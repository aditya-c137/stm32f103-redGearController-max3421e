
STM-MAX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004728  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08004834  08004834  00014834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004984  08004984  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004984  08004984  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004984  08004984  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004984  08004984  00014984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004988  08004988  00014988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800498c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  080049fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  080049fc  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9e9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ecd  00000000  00000000  0002da82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  0002f950  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  00030608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018fae  00000000  00000000  000311c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a3f6  00000000  00000000  0004a176  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b428  00000000  00000000  0005456c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df994  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb4  00000000  00000000  000dfa10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800481c 	.word	0x0800481c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800481c 	.word	0x0800481c

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
// uint8_t maxInit();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++) {
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e009      	b.n	80001be <_write+0x26>
		ITM_SendChar((*ptr++));
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	60ba      	str	r2, [r7, #8]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffca 	bl	800014c <ITM_SendChar>
	for(int i = 0; i < len; i++) {
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	3301      	adds	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	697a      	ldr	r2, [r7, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	dbf1      	blt.n	80001aa <_write+0x12>
	}
	return len;
 80001c6:	687b      	ldr	r3, [r7, #4]
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f001 f97d 	bl	80014d4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f845 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001de:	f000 fb1b 	bl	8000818 <MX_GPIO_Init>
  MX_SPI2_Init();
 80001e2:	f000 f887 	bl	80002f4 <MX_SPI2_Init>
  MX_TIM1_Init();
 80001e6:	f000 f8bb 	bl	8000360 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001ea:	f000 f96d 	bl	80004c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001ee:	f000 f9f3 	bl	80005d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80001f2:	f000 fa79 	bl	80006e8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  if(maxInit(&hspi2)){
 80001f6:	4817      	ldr	r0, [pc, #92]	; (8000254 <main+0x84>)
 80001f8:	f000 fc82 	bl	8000b00 <maxInit>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d002      	beq.n	8000208 <main+0x38>
	  return -1;
 8000202:	f04f 33ff 	mov.w	r3, #4294967295
 8000206:	e021      	b.n	800024c <main+0x7c>
  }
  HAL_Delay(10);
 8000208:	200a      	movs	r0, #10
 800020a:	f001 f9c5 	bl	8001598 <HAL_Delay>
  uint8_t HRSL = USB_enumerate(&hspi2); //This enumerates the USB and sets it's address to 0x01
 800020e:	4811      	ldr	r0, [pc, #68]	; (8000254 <main+0x84>)
 8000210:	f000 fd60 	bl	8000cd4 <USB_enumerate>
 8000214:	4603      	mov	r3, r0
 8000216:	71fb      	strb	r3, [r7, #7]
  printf("final HRSL: %x\n",HRSL);
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	4619      	mov	r1, r3
 800021c:	480e      	ldr	r0, [pc, #56]	; (8000258 <main+0x88>)
 800021e:	f003 fbab 	bl	8003978 <iprintf>
  printf("Done! set address to %x\n",regRd(&hspi2,rPERADDR));
 8000222:	21e0      	movs	r1, #224	; 0xe0
 8000224:	480b      	ldr	r0, [pc, #44]	; (8000254 <main+0x84>)
 8000226:	f000 fbeb 	bl	8000a00 <regRd>
 800022a:	4603      	mov	r3, r0
 800022c:	4619      	mov	r1, r3
 800022e:	480b      	ldr	r0, [pc, #44]	; (800025c <main+0x8c>)
 8000230:	f003 fba2 	bl	8003978 <iprintf>
//  while(!(USBgetDescriptor(&hspi2)));
  printf("fin: %x\n",USBgetDescriptor(&hspi2));
 8000234:	4807      	ldr	r0, [pc, #28]	; (8000254 <main+0x84>)
 8000236:	f000 fe0d 	bl	8000e54 <USBgetDescriptor>
 800023a:	4603      	mov	r3, r0
 800023c:	4619      	mov	r1, r3
 800023e:	4808      	ldr	r0, [pc, #32]	; (8000260 <main+0x90>)
 8000240:	f003 fb9a 	bl	8003978 <iprintf>
  printf("meh\n");
 8000244:	4807      	ldr	r0, [pc, #28]	; (8000264 <main+0x94>)
 8000246:	f003 fc0b 	bl	8003a60 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024a:	e7fe      	b.n	800024a <main+0x7a>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800024c:	4618      	mov	r0, r3
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000098 	.word	0x20000098
 8000258:	08004834 	.word	0x08004834
 800025c:	08004844 	.word	0x08004844
 8000260:	08004860 	.word	0x08004860
 8000264:	0800486c 	.word	0x0800486c

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b090      	sub	sp, #64	; 0x40
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	2228      	movs	r2, #40	; 0x28
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f003 fb76 	bl	8003968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
 8000288:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028a:	2301      	movs	r3, #1
 800028c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800028e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000292:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000298:	2301      	movs	r3, #1
 800029a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029c:	2302      	movs	r3, #2
 800029e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ac:	f107 0318 	add.w	r3, r7, #24
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fbe9 	bl	8001a88 <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002bc:	f000 fb38 	bl	8000930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	230f      	movs	r3, #15
 80002c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c4:	2302      	movs	r3, #2
 80002c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2102      	movs	r1, #2
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fe54 	bl	8001f88 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002e6:	f000 fb23 	bl	8000930 <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3740      	adds	r7, #64	; 0x40
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80002f8:	4b17      	ldr	r3, [pc, #92]	; (8000358 <MX_SPI2_Init+0x64>)
 80002fa:	4a18      	ldr	r2, [pc, #96]	; (800035c <MX_SPI2_Init+0x68>)
 80002fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80002fe:	4b16      	ldr	r3, [pc, #88]	; (8000358 <MX_SPI2_Init+0x64>)
 8000300:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000304:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000306:	4b14      	ldr	r3, [pc, #80]	; (8000358 <MX_SPI2_Init+0x64>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_SPI2_Init+0x64>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_SPI2_Init+0x64>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_SPI2_Init+0x64>)
 800031a:	2200      	movs	r2, #0
 800031c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_SPI2_Init+0x64>)
 8000320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000324:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000326:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_SPI2_Init+0x64>)
 8000328:	2210      	movs	r2, #16
 800032a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <MX_SPI2_Init+0x64>)
 800032e:	2200      	movs	r2, #0
 8000330:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_SPI2_Init+0x64>)
 8000334:	2200      	movs	r2, #0
 8000336:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <MX_SPI2_Init+0x64>)
 800033a:	2200      	movs	r2, #0
 800033c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_SPI2_Init+0x64>)
 8000340:	220a      	movs	r2, #10
 8000342:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <MX_SPI2_Init+0x64>)
 8000346:	f001 ff89 	bl	800225c <HAL_SPI_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000350:	f000 faee 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000098 	.word	0x20000098
 800035c:	40003800 	.word	0x40003800

08000360 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b09a      	sub	sp, #104	; 0x68
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000366:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800036a:	2224      	movs	r2, #36	; 0x24
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f003 fafa 	bl	8003968 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000374:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800037e:	f107 0320 	add.w	r3, r7, #32
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]
 800038e:	615a      	str	r2, [r3, #20]
 8000390:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000392:	463b      	mov	r3, r7
 8000394:	2220      	movs	r2, #32
 8000396:	2100      	movs	r1, #0
 8000398:	4618      	mov	r0, r3
 800039a:	f003 fae5 	bl	8003968 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800039e:	4b48      	ldr	r3, [pc, #288]	; (80004c0 <MX_TIM1_Init+0x160>)
 80003a0:	4a48      	ldr	r2, [pc, #288]	; (80004c4 <MX_TIM1_Init+0x164>)
 80003a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003a4:	4b46      	ldr	r3, [pc, #280]	; (80004c0 <MX_TIM1_Init+0x160>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003aa:	4b45      	ldr	r3, [pc, #276]	; (80004c0 <MX_TIM1_Init+0x160>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003b0:	4b43      	ldr	r3, [pc, #268]	; (80004c0 <MX_TIM1_Init+0x160>)
 80003b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b8:	4b41      	ldr	r3, [pc, #260]	; (80004c0 <MX_TIM1_Init+0x160>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003be:	4b40      	ldr	r3, [pc, #256]	; (80004c0 <MX_TIM1_Init+0x160>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c4:	4b3e      	ldr	r3, [pc, #248]	; (80004c0 <MX_TIM1_Init+0x160>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003ca:	483d      	ldr	r0, [pc, #244]	; (80004c0 <MX_TIM1_Init+0x160>)
 80003cc:	f002 fd01 	bl	8002dd2 <HAL_TIM_PWM_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80003d6:	f000 faab 	bl	8000930 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80003da:	2301      	movs	r3, #1
 80003dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80003de:	2300      	movs	r3, #0
 80003e0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003e2:	2301      	movs	r3, #1
 80003e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80003ee:	2300      	movs	r3, #0
 80003f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003f2:	2301      	movs	r3, #1
 80003f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80003fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000402:	4619      	mov	r1, r3
 8000404:	482e      	ldr	r0, [pc, #184]	; (80004c0 <MX_TIM1_Init+0x160>)
 8000406:	f002 fd33 	bl	8002e70 <HAL_TIM_Encoder_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000410:	f000 fa8e 	bl	8000930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000414:	2300      	movs	r3, #0
 8000416:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000418:	2300      	movs	r3, #0
 800041a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800041c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000420:	4619      	mov	r1, r3
 8000422:	4827      	ldr	r0, [pc, #156]	; (80004c0 <MX_TIM1_Init+0x160>)
 8000424:	f003 f9c6 	bl	80037b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800042e:	f000 fa7f 	bl	8000930 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000432:	2360      	movs	r3, #96	; 0x60
 8000434:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800043a:	2300      	movs	r3, #0
 800043c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800043e:	2300      	movs	r3, #0
 8000440:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000442:	2300      	movs	r3, #0
 8000444:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000446:	2300      	movs	r3, #0
 8000448:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800044a:	2300      	movs	r3, #0
 800044c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800044e:	f107 0320 	add.w	r3, r7, #32
 8000452:	2208      	movs	r2, #8
 8000454:	4619      	mov	r1, r3
 8000456:	481a      	ldr	r0, [pc, #104]	; (80004c0 <MX_TIM1_Init+0x160>)
 8000458:	f002 fdb6 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000462:	f000 fa65 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000466:	f107 0320 	add.w	r3, r7, #32
 800046a:	220c      	movs	r2, #12
 800046c:	4619      	mov	r1, r3
 800046e:	4814      	ldr	r0, [pc, #80]	; (80004c0 <MX_TIM1_Init+0x160>)
 8000470:	f002 fdaa 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 800047a:	f000 fa59 	bl	8000930 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800047e:	2300      	movs	r3, #0
 8000480:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000482:	2300      	movs	r3, #0
 8000484:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000486:	2300      	movs	r3, #0
 8000488:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800048e:	2300      	movs	r3, #0
 8000490:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000496:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000498:	2300      	movs	r3, #0
 800049a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800049c:	463b      	mov	r3, r7
 800049e:	4619      	mov	r1, r3
 80004a0:	4807      	ldr	r0, [pc, #28]	; (80004c0 <MX_TIM1_Init+0x160>)
 80004a2:	f003 f9e5 	bl	8003870 <HAL_TIMEx_ConfigBreakDeadTime>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 80004ac:	f000 fa40 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004b0:	4803      	ldr	r0, [pc, #12]	; (80004c0 <MX_TIM1_Init+0x160>)
 80004b2:	f000 fea1 	bl	80011f8 <HAL_TIM_MspPostInit>

}
 80004b6:	bf00      	nop
 80004b8:	3768      	adds	r7, #104	; 0x68
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000184 	.word	0x20000184
 80004c4:	40012c00 	.word	0x40012c00

080004c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b092      	sub	sp, #72	; 0x48
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d2:	2224      	movs	r2, #36	; 0x24
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 fa46 	bl	8003968 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004dc:	f107 031c 	add.w	r3, r7, #28
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004e6:	463b      	mov	r3, r7
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
 80004f4:	615a      	str	r2, [r3, #20]
 80004f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004f8:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <MX_TIM2_Init+0x10c>)
 80004fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000500:	4b34      	ldr	r3, [pc, #208]	; (80005d4 <MX_TIM2_Init+0x10c>)
 8000502:	2200      	movs	r2, #0
 8000504:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000506:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <MX_TIM2_Init+0x10c>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800050c:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <MX_TIM2_Init+0x10c>)
 800050e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000512:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000514:	4b2f      	ldr	r3, [pc, #188]	; (80005d4 <MX_TIM2_Init+0x10c>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051a:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <MX_TIM2_Init+0x10c>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000520:	482c      	ldr	r0, [pc, #176]	; (80005d4 <MX_TIM2_Init+0x10c>)
 8000522:	f002 fc56 	bl	8002dd2 <HAL_TIM_PWM_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800052c:	f000 fa00 	bl	8000930 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000530:	2301      	movs	r3, #1
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000534:	2300      	movs	r3, #0
 8000536:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000538:	2301      	movs	r3, #1
 800053a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC1Filter = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000544:	2300      	movs	r3, #0
 8000546:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000548:	2301      	movs	r3, #1
 800054a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.IC2Filter = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000558:	4619      	mov	r1, r3
 800055a:	481e      	ldr	r0, [pc, #120]	; (80005d4 <MX_TIM2_Init+0x10c>)
 800055c:	f002 fc88 	bl	8002e70 <HAL_TIM_Encoder_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000566:	f000 f9e3 	bl	8000930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056e:	2300      	movs	r3, #0
 8000570:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	4619      	mov	r1, r3
 8000578:	4816      	ldr	r0, [pc, #88]	; (80005d4 <MX_TIM2_Init+0x10c>)
 800057a:	f003 f91b 	bl	80037b4 <HAL_TIMEx_MasterConfigSynchronization>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8000584:	f000 f9d4 	bl	8000930 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000588:	2360      	movs	r3, #96	; 0x60
 800058a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000598:	463b      	mov	r3, r7
 800059a:	2208      	movs	r2, #8
 800059c:	4619      	mov	r1, r3
 800059e:	480d      	ldr	r0, [pc, #52]	; (80005d4 <MX_TIM2_Init+0x10c>)
 80005a0:	f002 fd12 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80005aa:	f000 f9c1 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	220c      	movs	r2, #12
 80005b2:	4619      	mov	r1, r3
 80005b4:	4807      	ldr	r0, [pc, #28]	; (80005d4 <MX_TIM2_Init+0x10c>)
 80005b6:	f002 fd07 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 80005c0:	f000 f9b6 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <MX_TIM2_Init+0x10c>)
 80005c6:	f000 fe17 	bl	80011f8 <HAL_TIM_MspPostInit>

}
 80005ca:	bf00      	nop
 80005cc:	3748      	adds	r7, #72	; 0x48
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200001cc 	.word	0x200001cc

080005d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b092      	sub	sp, #72	; 0x48
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80005de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e2:	2224      	movs	r2, #36	; 0x24
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 f9be 	bl	8003968 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ec:	f107 031c 	add.w	r3, r7, #28
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000608:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <MX_TIM3_Init+0x108>)
 800060a:	4a36      	ldr	r2, [pc, #216]	; (80006e4 <MX_TIM3_Init+0x10c>)
 800060c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800060e:	4b34      	ldr	r3, [pc, #208]	; (80006e0 <MX_TIM3_Init+0x108>)
 8000610:	2200      	movs	r2, #0
 8000612:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000614:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <MX_TIM3_Init+0x108>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800061a:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <MX_TIM3_Init+0x108>)
 800061c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000620:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000622:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <MX_TIM3_Init+0x108>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <MX_TIM3_Init+0x108>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800062e:	482c      	ldr	r0, [pc, #176]	; (80006e0 <MX_TIM3_Init+0x108>)
 8000630:	f002 fbcf 	bl	8002dd2 <HAL_TIM_PWM_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800063a:	f000 f979 	bl	8000930 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800063e:	2301      	movs	r3, #1
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000642:	2300      	movs	r3, #0
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000646:	2301      	movs	r3, #1
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC1Filter = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000652:	2300      	movs	r3, #0
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000656:	2301      	movs	r3, #1
 8000658:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.IC2Filter = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000666:	4619      	mov	r1, r3
 8000668:	481d      	ldr	r0, [pc, #116]	; (80006e0 <MX_TIM3_Init+0x108>)
 800066a:	f002 fc01 	bl	8002e70 <HAL_TIM_Encoder_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000674:	f000 f95c 	bl	8000930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	4816      	ldr	r0, [pc, #88]	; (80006e0 <MX_TIM3_Init+0x108>)
 8000688:	f003 f894 	bl	80037b4 <HAL_TIMEx_MasterConfigSynchronization>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8000692:	f000 f94d 	bl	8000930 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000696:	2360      	movs	r3, #96	; 0x60
 8000698:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006a6:	463b      	mov	r3, r7
 80006a8:	2208      	movs	r2, #8
 80006aa:	4619      	mov	r1, r3
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <MX_TIM3_Init+0x108>)
 80006ae:	f002 fc8b 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80006b8:	f000 f93a 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	220c      	movs	r2, #12
 80006c0:	4619      	mov	r1, r3
 80006c2:	4807      	ldr	r0, [pc, #28]	; (80006e0 <MX_TIM3_Init+0x108>)
 80006c4:	f002 fc80 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 80006ce:	f000 f92f 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006d2:	4803      	ldr	r0, [pc, #12]	; (80006e0 <MX_TIM3_Init+0x108>)
 80006d4:	f000 fd90 	bl	80011f8 <HAL_TIM_MspPostInit>

}
 80006d8:	bf00      	nop
 80006da:	3748      	adds	r7, #72	; 0x48
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000013c 	.word	0x2000013c
 80006e4:	40000400 	.word	0x40000400

080006e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08e      	sub	sp, #56	; 0x38
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
 8000714:	615a      	str	r2, [r3, #20]
 8000716:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000718:	4b3d      	ldr	r3, [pc, #244]	; (8000810 <MX_TIM4_Init+0x128>)
 800071a:	4a3e      	ldr	r2, [pc, #248]	; (8000814 <MX_TIM4_Init+0x12c>)
 800071c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800071e:	4b3c      	ldr	r3, [pc, #240]	; (8000810 <MX_TIM4_Init+0x128>)
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b3a      	ldr	r3, [pc, #232]	; (8000810 <MX_TIM4_Init+0x128>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <MX_TIM4_Init+0x128>)
 800072c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000730:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000732:	4b37      	ldr	r3, [pc, #220]	; (8000810 <MX_TIM4_Init+0x128>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000738:	4b35      	ldr	r3, [pc, #212]	; (8000810 <MX_TIM4_Init+0x128>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800073e:	4834      	ldr	r0, [pc, #208]	; (8000810 <MX_TIM4_Init+0x128>)
 8000740:	f002 faf8 	bl	8002d34 <HAL_TIM_Base_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800074a:	f000 f8f1 	bl	8000930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000754:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000758:	4619      	mov	r1, r3
 800075a:	482d      	ldr	r0, [pc, #180]	; (8000810 <MX_TIM4_Init+0x128>)
 800075c:	f002 fcf2 	bl	8003144 <HAL_TIM_ConfigClockSource>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000766:	f000 f8e3 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800076a:	4829      	ldr	r0, [pc, #164]	; (8000810 <MX_TIM4_Init+0x128>)
 800076c:	f002 fb31 	bl	8002dd2 <HAL_TIM_PWM_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000776:	f000 f8db 	bl	8000930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	4619      	mov	r1, r3
 8000788:	4821      	ldr	r0, [pc, #132]	; (8000810 <MX_TIM4_Init+0x128>)
 800078a:	f003 f813 	bl	80037b4 <HAL_TIMEx_MasterConfigSynchronization>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000794:	f000 f8cc 	bl	8000930 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000798:	2360      	movs	r3, #96	; 0x60
 800079a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	4818      	ldr	r0, [pc, #96]	; (8000810 <MX_TIM4_Init+0x128>)
 80007b0:	f002 fc0a 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80007ba:	f000 f8b9 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2204      	movs	r2, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4812      	ldr	r0, [pc, #72]	; (8000810 <MX_TIM4_Init+0x128>)
 80007c6:	f002 fbff 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80007d0:	f000 f8ae 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2208      	movs	r2, #8
 80007d8:	4619      	mov	r1, r3
 80007da:	480d      	ldr	r0, [pc, #52]	; (8000810 <MX_TIM4_Init+0x128>)
 80007dc:	f002 fbf4 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80007e6:	f000 f8a3 	bl	8000930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	220c      	movs	r2, #12
 80007ee:	4619      	mov	r1, r3
 80007f0:	4807      	ldr	r0, [pc, #28]	; (8000810 <MX_TIM4_Init+0x128>)
 80007f2:	f002 fbe9 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80007fc:	f000 f898 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <MX_TIM4_Init+0x128>)
 8000802:	f000 fcf9 	bl	80011f8 <HAL_TIM_MspPostInit>

}
 8000806:	bf00      	nop
 8000808:	3738      	adds	r7, #56	; 0x38
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000f0 	.word	0x200000f0
 8000814:	40000800 	.word	0x40000800

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082c:	4b3c      	ldr	r3, [pc, #240]	; (8000920 <MX_GPIO_Init+0x108>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a3b      	ldr	r2, [pc, #236]	; (8000920 <MX_GPIO_Init+0x108>)
 8000832:	f043 0310 	orr.w	r3, r3, #16
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b39      	ldr	r3, [pc, #228]	; (8000920 <MX_GPIO_Init+0x108>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0310 	and.w	r3, r3, #16
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000844:	4b36      	ldr	r3, [pc, #216]	; (8000920 <MX_GPIO_Init+0x108>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a35      	ldr	r2, [pc, #212]	; (8000920 <MX_GPIO_Init+0x108>)
 800084a:	f043 0320 	orr.w	r3, r3, #32
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b33      	ldr	r3, [pc, #204]	; (8000920 <MX_GPIO_Init+0x108>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0320 	and.w	r3, r3, #32
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	4b30      	ldr	r3, [pc, #192]	; (8000920 <MX_GPIO_Init+0x108>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a2f      	ldr	r2, [pc, #188]	; (8000920 <MX_GPIO_Init+0x108>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <MX_GPIO_Init+0x108>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000874:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <MX_GPIO_Init+0x108>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a29      	ldr	r2, [pc, #164]	; (8000920 <MX_GPIO_Init+0x108>)
 800087a:	f043 0308 	orr.w	r3, r3, #8
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b27      	ldr	r3, [pc, #156]	; (8000920 <MX_GPIO_Init+0x108>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0308 	and.w	r3, r3, #8
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Stepper1_PUL_Pin|Stepper1_DIR_Pin, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000892:	4824      	ldr	r0, [pc, #144]	; (8000924 <MX_GPIO_Init+0x10c>)
 8000894:	f001 f8e0 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay_Pin|GPIO_PIN_12|Stepper2_DIR_Pin|Stepper2_PUL_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f241 4130 	movw	r1, #5168	; 0x1430
 800089e:	4822      	ldr	r0, [pc, #136]	; (8000928 <MX_GPIO_Init+0x110>)
 80008a0:	f001 f8da 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Stepper1_PUL_Pin Stepper1_DIR_Pin */
  GPIO_InitStruct.Pin = Stepper1_PUL_Pin|Stepper1_DIR_Pin;
 80008a4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	4619      	mov	r1, r3
 80008bc:	4819      	ldr	r0, [pc, #100]	; (8000924 <MX_GPIO_Init+0x10c>)
 80008be:	f000 ff71 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Host_INT_Pin */
  GPIO_InitStruct.Pin = Host_INT_Pin;
 80008c2:	2310      	movs	r3, #16
 80008c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Host_INT_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4619      	mov	r1, r3
 80008d4:	4815      	ldr	r0, [pc, #84]	; (800092c <MX_GPIO_Init+0x114>)
 80008d6:	f000 ff65 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_Pin Stepper2_DIR_Pin Stepper2_PUL_Pin */
  GPIO_InitStruct.Pin = Relay_Pin|Stepper2_DIR_Pin|Stepper2_PUL_Pin;
 80008da:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80008de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2302      	movs	r3, #2
 80008ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_GPIO_Init+0x110>)
 80008f4:	f000 ff56 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000902:	2301      	movs	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2302      	movs	r3, #2
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_GPIO_Init+0x110>)
 8000912:	f000 ff47 	bl	80017a4 <HAL_GPIO_Init>

}
 8000916:	bf00      	nop
 8000918:	3720      	adds	r7, #32
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000
 8000924:	40011000 	.word	0x40011000
 8000928:	40010c00 	.word	0x40010c00
 800092c:	40010800 	.word	0x40010800

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <regWr>:
//RedGear XBOXUSB
#define MAX_PACKET_SIZE 40

//Write a register
void regWr(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t data)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	70fb      	strb	r3, [r7, #3]
 8000948:	4613      	mov	r3, r2
 800094a:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000952:	4812      	ldr	r0, [pc, #72]	; (800099c <regWr+0x60>)
 8000954:	f001 f880 	bl	8001a58 <HAL_GPIO_WritePin>
	uint8_t txData = reg | 0x02;
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	f043 0302 	orr.w	r3, r3, #2
 800095e:	b2db      	uxtb	r3, r3
 8000960:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, &txData, 1, HAL_MAX_DELAY);
 8000962:	f107 010f 	add.w	r1, r7, #15
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	2201      	movs	r2, #1
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f001 fcf9 	bl	8002364 <HAL_SPI_Transmit>
	txData = data;
 8000972:	78bb      	ldrb	r3, [r7, #2]
 8000974:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, &txData, 1, HAL_MAX_DELAY);
 8000976:	f107 010f 	add.w	r1, r7, #15
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
 800097e:	2201      	movs	r2, #1
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f001 fcef 	bl	8002364 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098c:	4803      	ldr	r0, [pc, #12]	; (800099c <regWr+0x60>)
 800098e:	f001 f863 	bl	8001a58 <HAL_GPIO_WritePin>
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40010c00 	.word	0x40010c00

080009a0 <regWrN>:

//Write nbytes to a register
void regWrN(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t *data, int nbytes)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	607a      	str	r2, [r7, #4]
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	460b      	mov	r3, r1
 80009ae:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b6:	4811      	ldr	r0, [pc, #68]	; (80009fc <regWrN+0x5c>)
 80009b8:	f001 f84e 	bl	8001a58 <HAL_GPIO_WritePin>
	uint8_t txData = reg | 0x02;
 80009bc:	7afb      	ldrb	r3, [r7, #11]
 80009be:	f043 0302 	orr.w	r3, r3, #2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &txData, 1, HAL_MAX_DELAY);
 80009c6:	f107 0117 	add.w	r1, r7, #23
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
 80009ce:	2201      	movs	r2, #1
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f001 fcc7 	bl	8002364 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, data, nbytes, HAL_MAX_DELAY);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	b29a      	uxth	r2, r3
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	f001 fcbf 	bl	8002364 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ec:	4803      	ldr	r0, [pc, #12]	; (80009fc <regWrN+0x5c>)
 80009ee:	f001 f833 	bl	8001a58 <HAL_GPIO_WritePin>
}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40010c00 	.word	0x40010c00

08000a00 <regRd>:

//read a byte from a register
uint8_t regRd(SPI_HandleTypeDef *hspi, uint8_t reg)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a12:	4810      	ldr	r0, [pc, #64]	; (8000a54 <regRd+0x54>)
 8000a14:	f001 f820 	bl	8001a58 <HAL_GPIO_WritePin>
	//register to read
	uint8_t rxData = reg;
 8000a18:	78fb      	ldrb	r3, [r7, #3]
 8000a1a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, &rxData, 1, HAL_MAX_DELAY);
 8000a1c:	f107 010f 	add.w	r1, r7, #15
 8000a20:	f04f 33ff 	mov.w	r3, #4294967295
 8000a24:	2201      	movs	r2, #1
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f001 fc9c 	bl	8002364 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &rxData, 1, HAL_MAX_DELAY);
 8000a2c:	f107 010f 	add.w	r1, r7, #15
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295
 8000a34:	2201      	movs	r2, #1
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f001 fdd0 	bl	80025dc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a42:	4804      	ldr	r0, [pc, #16]	; (8000a54 <regRd+0x54>)
 8000a44:	f001 f808 	bl	8001a58 <HAL_GPIO_WritePin>

	return rxData;
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40010c00 	.word	0x40010c00

08000a58 <regRdN>:

void regRdN(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t* data, int nbytes){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	460b      	mov	r3, r1
 8000a66:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <regRdN+0x54>)
 8000a70:	f000 fff2 	bl	8001a58 <HAL_GPIO_WritePin>
	//register to read
	uint8_t rxData = reg;
 8000a74:	7afb      	ldrb	r3, [r7, #11]
 8000a76:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &rxData, 1, HAL_MAX_DELAY);
 8000a78:	f107 0117 	add.w	r1, r7, #23
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a80:	2201      	movs	r2, #1
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f001 fc6e 	bl	8002364 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, data, nbytes, HAL_MAX_DELAY);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f001 fda2 	bl	80025dc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9e:	4803      	ldr	r0, [pc, #12]	; (8000aac <regRdN+0x54>)
 8000aa0:	f000 ffda 	bl	8001a58 <HAL_GPIO_WritePin>
}
 8000aa4:	bf00      	nop
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40010c00 	.word	0x40010c00

08000ab0 <maxReset>:
	regWr(hspi, rPINCTL, bmFDUPSPI | bmINTLEVEL | bmGPXA);
	return regRd(hspi, rREVISION); //Read-Only revision register
}

uint16_t maxReset(SPI_HandleTypeDef *hspi)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	81fb      	strh	r3, [r7, #14]
	regWr(hspi, 0x78, 0x20);
 8000abc:	2220      	movs	r2, #32
 8000abe:	2178      	movs	r1, #120	; 0x78
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff3b 	bl	800093c <regWr>
	regWr(hspi, 0x78, 0x00);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2178      	movs	r1, #120	; 0x78
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ff36 	bl	800093c <regWr>
	while(++i)
 8000ad0:	e008      	b.n	8000ae4 <maxReset+0x34>
	{
		if(regRd(hspi,0x68) & 0x01)
 8000ad2:	2168      	movs	r1, #104	; 0x68
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ff93 	bl	8000a00 <regRd>
 8000ada:	4603      	mov	r3, r0
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d106      	bne.n	8000af2 <maxReset+0x42>
	while(++i)
 8000ae4:	89fb      	ldrh	r3, [r7, #14]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	81fb      	strh	r3, [r7, #14]
 8000aea:	89fb      	ldrh	r3, [r7, #14]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1f0      	bne.n	8000ad2 <maxReset+0x22>
 8000af0:	e000      	b.n	8000af4 <maxReset+0x44>
		{
			break;
 8000af2:	bf00      	nop
		}
	}
	return i;
 8000af4:	89fb      	ldrh	r3, [r7, #14]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <maxInit>:

//returns -1 on failure 0 on success
uint8_t maxInit(SPI_HandleTypeDef *hspi)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	//set host shield in full duplex spi mode and verify
	regWr(hspi, rPINCTL, bmFDUPSPI | bmINTLEVEL | bmGPXA);
 8000b08:	2219      	movs	r2, #25
 8000b0a:	2188      	movs	r1, #136	; 0x88
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff ff15 	bl	800093c <regWr>
	if (0x13 == regRd(hspi, rREVISION))
 8000b12:	2190      	movs	r1, #144	; 0x90
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff73 	bl	8000a00 <regRd>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b13      	cmp	r3, #19
 8000b1e:	d13d      	bne.n	8000b9c <maxInit+0x9c>
		//set host shield in host mode and pull ups
		// regWr(hspi, 0xd8, 0xc1);

//		return maxReset(hspi);

        if(maxReset(hspi) == 0) { //OSCOKIRQ hasn't asserted in time
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff ffc5 	bl	8000ab0 <maxReset>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <maxInit+0x30>
                return 0xfc;
 8000b2c:	23fc      	movs	r3, #252	; 0xfc
 8000b2e:	e036      	b.n	8000b9e <maxInit+0x9e>
        }

		//set host shield in host mode and pull ups
		regWr(hspi, 0xd8, 0xc1);
 8000b30:	22c1      	movs	r2, #193	; 0xc1
 8000b32:	21d8      	movs	r1, #216	; 0xd8
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff01 	bl	800093c <regWr>
		
		//detect connection
		regWr(hspi, 0xd0, 0x60);
 8000b3a:	2260      	movs	r2, #96	; 0x60
 8000b3c:	21d0      	movs	r1, #208	; 0xd0
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff fefc 	bl	800093c <regWr>

		regWr(hspi, 0xe8, 0x04);
 8000b44:	2204      	movs	r2, #4
 8000b46:	21e8      	movs	r1, #232	; 0xe8
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff fef7 	bl	800093c <regWr>
		int i = regRd(hspi, 0xe8) & 0x04;
 8000b4e:	21e8      	movs	r1, #232	; 0xe8
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff55 	bl	8000a00 <regRd>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	60fb      	str	r3, [r7, #12]
		while (!i){
 8000b5e:	e00b      	b.n	8000b78 <maxInit+0x78>
			i = regRd(hspi, 0xe8) & 0x04;
 8000b60:	21e8      	movs	r1, #232	; 0xe8
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ff4c 	bl	8000a00 <regRd>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	60fb      	str	r3, [r7, #12]
			printf("i = %x\n",i);
 8000b70:	68f9      	ldr	r1, [r7, #12]
 8000b72:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <maxInit+0xa8>)
 8000b74:	f002 ff00 	bl	8003978 <iprintf>
		while (!i){
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0f0      	beq.n	8000b60 <maxInit+0x60>
		}

		//busprobe();
		maxBusprobe(hspi);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f000 f814 	bl	8000bac <maxBusprobe>
		//busprobe will read j and k status set speed depending on this

		//clear connection detect interrupt
		regWr(hspi,rHCTL,bmCONDENTIRQ);
 8000b84:	2220      	movs	r2, #32
 8000b86:	21e8      	movs	r1, #232	; 0xe8
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fed7 	bl	800093c <regWr>
		//enable interrupt pin
		regWr(hspi,rCPUCTL, 0x01);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff fed2 	bl	800093c <regWr>

		//busprobe fails if switch is connected, feels irrelevant, what is a switch
		//regWr(hspi,rPINCTL, (bmFDUPSPI | bmINTLEVEL));

		return (0);
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e000      	b.n	8000b9e <maxInit+0x9e>
	}
	else
	{
		return 0xde;
 8000b9c:	23de      	movs	r3, #222	; 0xde
	}
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	08004870 	.word	0x08004870

08000bac <maxBusprobe>:

uint8_t maxBusprobe(SPI_HandleTypeDef *hspi)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	uint8_t HRSL = regRd(hspi, rHRSL);
 8000bb4:	21f8      	movs	r1, #248	; 0xf8
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ff22 	bl	8000a00 <regRd>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	73fb      	strb	r3, [r7, #15]
	HRSL &= 0xc0; //make everything except J-K 0
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bc6:	73fb      	strb	r3, [r7, #15]
	HRSL = HRSL >> 6; //shift bits to LSB
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	099b      	lsrs	r3, r3, #6
 8000bcc:	73fb      	strb	r3, [r7, #15]
	switch(HRSL) {
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d860      	bhi.n	8000c96 <maxBusprobe+0xea>
 8000bd4:	a201      	add	r2, pc, #4	; (adr r2, 8000bdc <maxBusprobe+0x30>)
 8000bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bda:	bf00      	nop
 8000bdc:	08000bed 	.word	0x08000bed
 8000be0:	08000bfb 	.word	0x08000bfb
 8000be4:	08000c47 	.word	0x08000c47
 8000be8:	08000c93 	.word	0x08000c93
		case 0x00:
            regWr(hspi,rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 8000bec:	22d1      	movs	r2, #209	; 0xd1
 8000bee:	21d8      	movs	r1, #216	; 0xd8
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fea3 	bl	800093c <regWr>
			return 0xfd;
 8000bf6:	23fd      	movs	r3, #253	; 0xfd
 8000bf8:	e04e      	b.n	8000c98 <maxBusprobe+0xec>
			// break;
		case 0x01:
			// k state
			if(regRd(hspi,rMODE) & bmLOWSPEED){
 8000bfa:	21d8      	movs	r1, #216	; 0xd8
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff feff 	bl	8000a00 <regRd>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d011      	beq.n	8000c30 <maxBusprobe+0x84>
				//full speed
				regWr(hspi, rMODE, 0x80|0x40|0x08|0x01);
 8000c0c:	22c9      	movs	r2, #201	; 0xc9
 8000c0e:	21d8      	movs	r1, #216	; 0xd8
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff fe93 	bl	800093c <regWr>
				vbusState = 2;
 8000c16:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <maxBusprobe+0xf4>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	601a      	str	r2, [r3, #0]
				printf("D+ high and D- low: %x\n",regRd(hspi,rMODE));
 8000c1c:	21d8      	movs	r1, #216	; 0xd8
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff feee 	bl	8000a00 <regRd>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4619      	mov	r1, r3
 8000c28:	481e      	ldr	r0, [pc, #120]	; (8000ca4 <maxBusprobe+0xf8>)
 8000c2a:	f002 fea5 	bl	8003978 <iprintf>
 8000c2e:	e008      	b.n	8000c42 <maxBusprobe+0x96>
			}
			else {
				//low speed
				printf("D+ low and D- high: %x\n",regRd(hspi,rMODE));
 8000c30:	21d8      	movs	r1, #216	; 0xd8
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fee4 	bl	8000a00 <regRd>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	481a      	ldr	r0, [pc, #104]	; (8000ca8 <maxBusprobe+0xfc>)
 8000c3e:	f002 fe9b 	bl	8003978 <iprintf>
			}
			return 0x02;
 8000c42:	2302      	movs	r3, #2
 8000c44:	e028      	b.n	8000c98 <maxBusprobe+0xec>
			// break;
		case 0x02:
			//j state
			if(regRd(hspi,rMODE) & bmLOWSPEED){
 8000c46:	21d8      	movs	r1, #216	; 0xd8
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff fed9 	bl	8000a00 <regRd>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d009      	beq.n	8000c6c <maxBusprobe+0xc0>
				//low speed
				printf("D+ low and D- high: %x\n",regRd(hspi,rMODE));
 8000c58:	21d8      	movs	r1, #216	; 0xd8
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff fed0 	bl	8000a00 <regRd>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4619      	mov	r1, r3
 8000c64:	4810      	ldr	r0, [pc, #64]	; (8000ca8 <maxBusprobe+0xfc>)
 8000c66:	f002 fe87 	bl	8003978 <iprintf>
 8000c6a:	e010      	b.n	8000c8e <maxBusprobe+0xe2>
			}
			else {
				//full speed
				vbusState = 2;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <maxBusprobe+0xf4>)
 8000c6e:	2202      	movs	r2, #2
 8000c70:	601a      	str	r2, [r3, #0]
				regWr(hspi, rMODE, 0x80|0x40|0x08|0x01);
 8000c72:	22c9      	movs	r2, #201	; 0xc9
 8000c74:	21d8      	movs	r1, #216	; 0xd8
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff fe60 	bl	800093c <regWr>
				printf("D+ high and D- low: %x\n",regRd(hspi,rMODE));
 8000c7c:	21d8      	movs	r1, #216	; 0xd8
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff febe 	bl	8000a00 <regRd>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4619      	mov	r1, r3
 8000c88:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <maxBusprobe+0xf8>)
 8000c8a:	f002 fe75 	bl	8003978 <iprintf>
			}
			return 0x03;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e002      	b.n	8000c98 <maxBusprobe+0xec>
			// break;
		case 0x03:
			return 0x04;
 8000c92:	2304      	movs	r3, #4
 8000c94:	e000      	b.n	8000c98 <maxBusprobe+0xec>
			// break;
		default:
			return 0xbc;
 8000c96:	23bc      	movs	r3, #188	; 0xbc
	}
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000138 	.word	0x20000138
 8000ca4:	08004878 	.word	0x08004878
 8000ca8:	08004890 	.word	0x08004890

08000cac <__NVIC_SystemReset>:
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <__NVIC_SystemReset+0x20>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000cbc:	4903      	ldr	r1, [pc, #12]	; (8000ccc <__NVIC_SystemReset+0x20>)
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_SystemReset+0x24>)
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	60cb      	str	r3, [r1, #12]
 8000cc4:	f3bf 8f4f 	dsb	sy
    __NOP();
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <__NVIC_SystemReset+0x1c>
 8000ccc:	e000ed00 	.word	0xe000ed00
 8000cd0:	05fa0004 	.word	0x05fa0004

08000cd4 <USB_enumerate>:


//RedGear XBOXUSB
#define MAX_PACKET_SIZE 40

uint8_t USB_enumerate(SPI_HandleTypeDef *hspi){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	//	 *
	//	 * BUS RESET
	//	 *
	//	 *
	//	 * */
	uint8_t temp = regRd(hspi,rHCTL);
 8000cdc:	21e8      	movs	r1, #232	; 0xe8
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fe8e 	bl	8000a00 <regRd>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
	temp |= 0x01;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]
	regWr(hspi,rHCTL,temp);
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	21e8      	movs	r1, #232	; 0xe8
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff fe20 	bl	800093c <regWr>
	while(regRd(hspi,rHCTL)&bmBUSRST);
 8000cfc:	bf00      	nop
 8000cfe:	21e8      	movs	r1, #232	; 0xe8
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff fe7d 	bl	8000a00 <regRd>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f6      	bne.n	8000cfe <USB_enumerate+0x2a>
//	regWr(hspi,rHIRQ,(regRd(hspi,rHIRQ)&0b11111110));
	regWr(hspi,rMODE,(bmDMPULLDN|bmDPPULLDN|bmHOST|bmSOFKAENAB));
 8000d10:	22c9      	movs	r2, #201	; 0xc9
 8000d12:	21d8      	movs	r1, #216	; 0xd8
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff fe11 	bl	800093c <regWr>
	while(!(regRd(hspi,rHIRQ)&bmFRAMEIRQ));
 8000d1a:	bf00      	nop
 8000d1c:	21c8      	movs	r1, #200	; 0xc8
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff fe6e 	bl	8000a00 <regRd>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f6      	beq.n	8000d1c <USB_enumerate+0x48>

	//send packet to set the USB address
	USBsetAddress(hspi);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 f84a 	bl	8000dc8 <USBsetAddress>
	HAL_Delay(20);
 8000d34:	2014      	movs	r0, #20
 8000d36:	f000 fc2f 	bl	8001598 <HAL_Delay>

	//write newly assigned USB address for future addressing
	regWr(hspi,rPERADDR,0x01);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	21e0      	movs	r1, #224	; 0xe0
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff fdfc 	bl	800093c <regWr>

	return 0;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <USBdispatchToken>:

uint8_t USBdispatchToken(SPI_HandleTypeDef *hspi, uint8_t token, uint8_t ep, uint8_t naks){
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	4608      	mov	r0, r1
 8000d58:	4611      	mov	r1, r2
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	70fb      	strb	r3, [r7, #3]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70bb      	strb	r3, [r7, #2]
 8000d64:	4613      	mov	r3, r2
 8000d66:	707b      	strb	r3, [r7, #1]
	while(naks){
 8000d68:	e01d      	b.n	8000da6 <USBdispatchToken+0x58>
		regWr(hspi,rHXFR,(token | ep));
 8000d6a:	78fa      	ldrb	r2, [r7, #3]
 8000d6c:	78bb      	ldrb	r3, [r7, #2]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	21f0      	movs	r1, #240	; 0xf0
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fde0 	bl	800093c <regWr>
		// printf("waiting for HXFRDNIRQ...\n");
		while(!(regRd(hspi,rHIRQ) & bmHXFRNDIRQ));
 8000d7c:	bf00      	nop
 8000d7e:	21c8      	movs	r1, #200	; 0xc8
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff fe3d 	bl	8000a00 <regRd>
 8000d86:	4603      	mov	r3, r0
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	daf7      	bge.n	8000d7e <USBdispatchToken+0x30>
//		printf("dispatch HRSL: %x\n",regRd(hspi,rHRSL));
		if((regRd(hspi,rHRSL)&0x0f) == 0x04){
 8000d8e:	21f8      	movs	r1, #248	; 0xf8
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff fe35 	bl	8000a00 <regRd>
 8000d96:	4603      	mov	r3, r0
 8000d98:	f003 030f 	and.w	r3, r3, #15
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d106      	bne.n	8000dae <USBdispatchToken+0x60>
			naks--;
 8000da0:	787b      	ldrb	r3, [r7, #1]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	707b      	strb	r3, [r7, #1]
	while(naks){
 8000da6:	787b      	ldrb	r3, [r7, #1]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1de      	bne.n	8000d6a <USBdispatchToken+0x1c>
 8000dac:	e000      	b.n	8000db0 <USBdispatchToken+0x62>
		}
		else{
			break;
 8000dae:	bf00      	nop
		}
	}
	return regRd(hspi,rHRSL)&0x0f;
 8000db0:	21f8      	movs	r1, #248	; 0xf8
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fe24 	bl	8000a00 <regRd>
 8000db8:	4603      	mov	r3, r0
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	b2db      	uxtb	r3, r3
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <USBsetAddress>:

uint8_t USBsetAddress(SPI_HandleTypeDef *hspi){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	uint8_t naks = 10;
 8000dd0:	230a      	movs	r3, #10
 8000dd2:	75fb      	strb	r3, [r7, #23]
	//setup packet
	uint8_t setupPacket[8] = {
 8000dd4:	4a1e      	ldr	r2, [pc, #120]	; (8000e50 <USBsetAddress+0x88>)
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dde:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00, //index not relevant
			0x00,
			0x00, //lenght to be retrived
			0x00
	};
	while(naks){
 8000de2:	e026      	b.n	8000e32 <USBsetAddress+0x6a>
		regWrN(hspi,rSUDFIFO,setupPacket,8);
 8000de4:	f107 020c 	add.w	r2, r7, #12
 8000de8:	2308      	movs	r3, #8
 8000dea:	2120      	movs	r1, #32
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff fdd7 	bl	80009a0 <regWrN>

		USBdispatchToken(hspi,0x10,0x00,50);
 8000df2:	2332      	movs	r3, #50	; 0x32
 8000df4:	2200      	movs	r2, #0
 8000df6:	2110      	movs	r1, #16
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ffa8 	bl	8000d4e <USBdispatchToken>

		//handshake
		//HS-IN
		regWr(hspi,rHXFR,0x80);
 8000dfe:	2280      	movs	r2, #128	; 0x80
 8000e00:	21f0      	movs	r1, #240	; 0xf0
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff fd9a 	bl	800093c <regWr>
		while(!(regRd(hspi,rHIRQ) & bmHXFRNDIRQ));
 8000e08:	bf00      	nop
 8000e0a:	21c8      	movs	r1, #200	; 0xc8
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff fdf7 	bl	8000a00 <regRd>
 8000e12:	4603      	mov	r3, r0
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	daf7      	bge.n	8000e0a <USBsetAddress+0x42>
		if((regRd(hspi,rHRSL)&0x0f) == 0x04){
 8000e1a:	21f8      	movs	r1, #248	; 0xf8
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fdef 	bl	8000a00 <regRd>
 8000e22:	4603      	mov	r3, r0
 8000e24:	f003 030f 	and.w	r3, r3, #15
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d106      	bne.n	8000e3a <USBsetAddress+0x72>
			naks--;
 8000e2c:	7dfb      	ldrb	r3, [r7, #23]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	75fb      	strb	r3, [r7, #23]
	while(naks){
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1d5      	bne.n	8000de4 <USBsetAddress+0x1c>
 8000e38:	e000      	b.n	8000e3c <USBsetAddress+0x74>
		}
		else {
			break;
 8000e3a:	bf00      	nop
		}
	}
	return regRd(hspi,rHRSL);
 8000e3c:	21f8      	movs	r1, #248	; 0xf8
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff fdde 	bl	8000a00 <regRd>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	080048a8 	.word	0x080048a8

08000e54 <USBgetDescriptor>:

uint8_t USBgetDescriptor(SPI_HandleTypeDef *hspi){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b090      	sub	sp, #64	; 0x40
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
		SETUP stage
	*/
	//send a setup packet
	//TODO: find what 8 bytes constitute a setup packet data
	//1. write 8 bytes of setup data to SUDFIFO
	uint8_t setupPacket[8] = {
 8000e5c:	4a4a      	ldr	r2, [pc, #296]	; (8000f88 <USBgetDescriptor+0x134>)
 8000e5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e66:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00,
			0x30, //lenght to be retrived
			0x00
	};

	regWrN(hspi,rSUDFIFO,setupPacket,8);
 8000e6a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000e6e:	2308      	movs	r3, #8
 8000e70:	2120      	movs	r1, #32
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff fd94 	bl	80009a0 <regWrN>
	//2. Load the HXFR register with 00010000 this will initiate the transfer
	regWr(hspi,rHXFR,0x10);
 8000e78:	2210      	movs	r2, #16
 8000e7a:	21f0      	movs	r1, #240	; 0xf0
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff fd5d 	bl	800093c <regWr>
	HAL_Delay(1);
 8000e82:	2001      	movs	r0, #1
 8000e84:	f000 fb88 	bl	8001598 <HAL_Delay>
	//3. wait for HXFRDNIRQ bit to be set appx 18 bit times
	// printf("waiting for HXFRDNIRQ...\n");
	while(!(regRd(hspi,rHIRQ) & bmHXFRNDIRQ));
 8000e88:	bf00      	nop
 8000e8a:	21c8      	movs	r1, #200	; 0xc8
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff fdb7 	bl	8000a00 <regRd>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	daf7      	bge.n	8000e8a <USBgetDescriptor+0x36>
	//4. check the HRSLT[3:0] bits for result of transfer
	regRd(hspi,rHRSL);
 8000e9a:	21f8      	movs	r1, #248	; 0xf8
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff fdaf 	bl	8000a00 <regRd>
	/*
		DATA stage
	*/
	//send bulk-in request
	//send token
	USBdispatchToken(hspi,0x00,0x00,50);
 8000ea2:	2332      	movs	r3, #50	; 0x32
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ff50 	bl	8000d4e <USBdispatchToken>
	uint8_t RCVBC;
	while(!(regRd(hspi,rHIRQ)&bmRCVDAVIRQ)){
 8000eae:	bf00      	nop
 8000eb0:	21c8      	movs	r1, #200	; 0xc8
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fda4 	bl	8000a00 <regRd>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d107      	bne.n	8000ed2 <USBgetDescriptor+0x7e>
		USBdispatchToken(hspi,0x00,0x00,50);
 8000ec2:	2332      	movs	r3, #50	; 0x32
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff40 	bl	8000d4e <USBdispatchToken>
		 *
		 *
		 *
		 *
		 */
		NVIC_SystemReset(); //FIXME: Do not reset like this... FIND A DIFFERENT SOLUTION
 8000ece:	f7ff feed 	bl	8000cac <__NVIC_SystemReset>
		 *
		 *
		 */
	}
//	if(regRd(hspi,rHIRQ)&bmRCVDAVIRQ){
	temp = regRd(hspi,rHIRQ);
 8000ed2:	21c8      	movs	r1, #200	; 0xc8
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fd93 	bl	8000a00 <regRd>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	temp &= 0xfb; //We need to set the bmRCVDAVIRQ bit back to 0 after reading
 8000ee0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ee4:	f023 0304 	bic.w	r3, r3, #4
 8000ee8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	regWr(hspi,rHIRQ,temp);
 8000eec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	21c8      	movs	r1, #200	; 0xc8
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff fd21 	bl	800093c <regWr>
	RCVBC = regRd(hspi,rRCVBC);
 8000efa:	2130      	movs	r1, #48	; 0x30
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff fd7f 	bl	8000a00 <regRd>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	printf("RCVBC: %x\n",RCVBC);
 8000f08:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	481f      	ldr	r0, [pc, #124]	; (8000f8c <USBgetDescriptor+0x138>)
 8000f10:	f002 fd32 	bl	8003978 <iprintf>
//	else {
//		return 0xff;
//	}
	//Read RCVFIFO
	uint8_t DESC[40];
	regRdN(hspi,rRCVFIFO,DESC,RCVBC);
 8000f14:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000f18:	f107 0208 	add.w	r2, r7, #8
 8000f1c:	2108      	movs	r1, #8
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff fd9a 	bl	8000a58 <regRdN>
	for(int i = 0; i < RCVBC; i++){
 8000f24:	2300      	movs	r3, #0
 8000f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f28:	e00b      	b.n	8000f42 <USBgetDescriptor+0xee>
		printf("%x\n",DESC[i]);
 8000f2a:	f107 0208 	add.w	r2, r7, #8
 8000f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	4816      	ldr	r0, [pc, #88]	; (8000f90 <USBgetDescriptor+0x13c>)
 8000f38:	f002 fd1e 	bl	8003978 <iprintf>
	for(int i = 0; i < RCVBC; i++){
 8000f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f3e:	3301      	adds	r3, #1
 8000f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f42:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000f46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbee      	blt.n	8000f2a <USBgetDescriptor+0xd6>
//	printf("bNumConfigurations: %x\n",DESC[17]);
	/*
		STATUS stage
	*/
	//send HS-OUT
	regWr(hspi,rHXFR,0xA0);
 8000f4c:	22a0      	movs	r2, #160	; 0xa0
 8000f4e:	21f0      	movs	r1, #240	; 0xf0
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fcf3 	bl	800093c <regWr>
	HAL_Delay(1);
 8000f56:	2001      	movs	r0, #1
 8000f58:	f000 fb1e 	bl	8001598 <HAL_Delay>
	// printf("waiting for HXFRDNIRQ...\n");
	while(!(regRd(hspi,rHIRQ) & bmHXFRNDIRQ));
 8000f5c:	bf00      	nop
 8000f5e:	21c8      	movs	r1, #200	; 0xc8
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff fd4d 	bl	8000a00 <regRd>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	daf7      	bge.n	8000f5e <USBgetDescriptor+0x10a>

	return regRd(hspi,rHRSL)&0x0F;
 8000f6e:	21f8      	movs	r1, #248	; 0xf8
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff fd45 	bl	8000a00 <regRd>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f003 030f 	and.w	r3, r3, #15
 8000f7c:	b2db      	uxtb	r3, r3
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3740      	adds	r7, #64	; 0x40
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	080048c0 	.word	0x080048c0
 8000f8c:	080048b0 	.word	0x080048b0
 8000f90:	080048bc 	.word	0x080048bc

08000f94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6193      	str	r3, [r2, #24]
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	61d3      	str	r3, [r2, #28]
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_MspInit+0x60>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_MspInit+0x60>)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000

08000ff8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <HAL_SPI_MspInit+0x8c>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d131      	bne.n	800107c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <HAL_SPI_MspInit+0x90>)
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <HAL_SPI_MspInit+0x90>)
 800101e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001022:	61d3      	str	r3, [r2, #28]
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_SPI_MspInit+0x90>)
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_SPI_MspInit+0x90>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <HAL_SPI_MspInit+0x90>)
 8001036:	f043 0308 	orr.w	r3, r3, #8
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_SPI_MspInit+0x90>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001048:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800104c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	4619      	mov	r1, r3
 800105c:	480b      	ldr	r0, [pc, #44]	; (800108c <HAL_SPI_MspInit+0x94>)
 800105e:	f000 fba1 	bl	80017a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001062:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4619      	mov	r1, r3
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_SPI_MspInit+0x94>)
 8001078:	f000 fb94 	bl	80017a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40003800 	.word	0x40003800
 8001088:	40021000 	.word	0x40021000
 800108c:	40010c00 	.word	0x40010c00

08001090 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	; 0x30
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0320 	add.w	r3, r7, #32
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a40      	ldr	r2, [pc, #256]	; (80011ac <HAL_TIM_PWM_MspInit+0x11c>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d125      	bne.n	80010fc <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010b0:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a3e      	ldr	r2, [pc, #248]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 80010b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b3c      	ldr	r3, [pc, #240]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b39      	ldr	r3, [pc, #228]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a38      	ldr	r2, [pc, #224]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder3_A_Pin|Encoder3_B_Pin;
 80010e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	4619      	mov	r1, r3
 80010f4:	482f      	ldr	r0, [pc, #188]	; (80011b4 <HAL_TIM_PWM_MspInit+0x124>)
 80010f6:	f000 fb55 	bl	80017a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010fa:	e052      	b.n	80011a2 <HAL_TIM_PWM_MspInit+0x112>
  else if(htim_pwm->Instance==TIM2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001104:	d124      	bne.n	8001150 <HAL_TIM_PWM_MspInit+0xc0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a29      	ldr	r2, [pc, #164]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6193      	str	r3, [r2, #24]
 800112a:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 8001136:	2303      	movs	r3, #3
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	4619      	mov	r1, r3
 8001148:	481a      	ldr	r0, [pc, #104]	; (80011b4 <HAL_TIM_PWM_MspInit+0x124>)
 800114a:	f000 fb2b 	bl	80017a4 <HAL_GPIO_Init>
}
 800114e:	e028      	b.n	80011a2 <HAL_TIM_PWM_MspInit+0x112>
  else if(htim_pwm->Instance==TIM3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <HAL_TIM_PWM_MspInit+0x128>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d123      	bne.n	80011a2 <HAL_TIM_PWM_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	61d3      	str	r3, [r2, #28]
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	6193      	str	r3, [r2, #24]
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_TIM_PWM_MspInit+0x120>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 800118a:	23c0      	movs	r3, #192	; 0xc0
 800118c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0320 	add.w	r3, r7, #32
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_TIM_PWM_MspInit+0x124>)
 800119e:	f000 fb01 	bl	80017a4 <HAL_GPIO_Init>
}
 80011a2:	bf00      	nop
 80011a4:	3730      	adds	r7, #48	; 0x30
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40012c00 	.word	0x40012c00
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010800 	.word	0x40010800
 80011b8:	40000400 	.word	0x40000400

080011bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <HAL_TIM_Base_MspInit+0x34>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d10b      	bne.n	80011e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_TIM_Base_MspInit+0x38>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_TIM_Base_MspInit+0x38>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	61d3      	str	r3, [r2, #28]
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_TIM_Base_MspInit+0x38>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	40000800 	.word	0x40000800
 80011f4:	40021000 	.word	0x40021000

080011f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a3d      	ldr	r2, [pc, #244]	; (8001308 <HAL_TIM_MspPostInit+0x110>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d119      	bne.n	800124c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b3c      	ldr	r3, [pc, #240]	; (800130c <HAL_TIM_MspPostInit+0x114>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a3b      	ldr	r2, [pc, #236]	; (800130c <HAL_TIM_MspPostInit+0x114>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b39      	ldr	r3, [pc, #228]	; (800130c <HAL_TIM_MspPostInit+0x114>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Moror3_PWM_Pin|Motor3_DIR_Pin;
 8001230:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2302      	movs	r3, #2
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0318 	add.w	r3, r7, #24
 8001242:	4619      	mov	r1, r3
 8001244:	4832      	ldr	r0, [pc, #200]	; (8001310 <HAL_TIM_MspPostInit+0x118>)
 8001246:	f000 faad 	bl	80017a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800124a:	e059      	b.n	8001300 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM2)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001254:	d118      	bne.n	8001288 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b2d      	ldr	r3, [pc, #180]	; (800130c <HAL_TIM_MspPostInit+0x114>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	4a2c      	ldr	r2, [pc, #176]	; (800130c <HAL_TIM_MspPostInit+0x114>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6193      	str	r3, [r2, #24]
 8001262:	4b2a      	ldr	r3, [pc, #168]	; (800130c <HAL_TIM_MspPostInit+0x114>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Motor1_DIR_Pin|Motor1_PWM_Pin;
 800126e:	230c      	movs	r3, #12
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2302      	movs	r3, #2
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 0318 	add.w	r3, r7, #24
 800127e:	4619      	mov	r1, r3
 8001280:	4823      	ldr	r0, [pc, #140]	; (8001310 <HAL_TIM_MspPostInit+0x118>)
 8001282:	f000 fa8f 	bl	80017a4 <HAL_GPIO_Init>
}
 8001286:	e03b      	b.n	8001300 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM3)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a21      	ldr	r2, [pc, #132]	; (8001314 <HAL_TIM_MspPostInit+0x11c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d118      	bne.n	80012c4 <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_TIM_MspPostInit+0x114>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	4a1d      	ldr	r2, [pc, #116]	; (800130c <HAL_TIM_MspPostInit+0x114>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6193      	str	r3, [r2, #24]
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_TIM_MspPostInit+0x114>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor2_DIR_Pin|Motor2_PWM_Pin;
 80012aa:	2303      	movs	r3, #3
 80012ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2302      	movs	r3, #2
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	f107 0318 	add.w	r3, r7, #24
 80012ba:	4619      	mov	r1, r3
 80012bc:	4816      	ldr	r0, [pc, #88]	; (8001318 <HAL_TIM_MspPostInit+0x120>)
 80012be:	f000 fa71 	bl	80017a4 <HAL_GPIO_Init>
}
 80012c2:	e01d      	b.n	8001300 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM4)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <HAL_TIM_MspPostInit+0x124>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d118      	bne.n	8001300 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <HAL_TIM_MspPostInit+0x114>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <HAL_TIM_MspPostInit+0x114>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	6193      	str	r3, [r2, #24]
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <HAL_TIM_MspPostInit+0x114>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Servo4_Pin|Servo3_Pin|Servo2_Pin|Servo1_Pin;
 80012e6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80012ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2302      	movs	r3, #2
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	f107 0318 	add.w	r3, r7, #24
 80012f8:	4619      	mov	r1, r3
 80012fa:	4807      	ldr	r0, [pc, #28]	; (8001318 <HAL_TIM_MspPostInit+0x120>)
 80012fc:	f000 fa52 	bl	80017a4 <HAL_GPIO_Init>
}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	; 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40012c00 	.word	0x40012c00
 800130c:	40021000 	.word	0x40021000
 8001310:	40010800 	.word	0x40010800
 8001314:	40000400 	.word	0x40000400
 8001318:	40010c00 	.word	0x40010c00
 800131c:	40000800 	.word	0x40000800

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <HardFault_Handler+0x4>

08001332 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <MemManage_Handler+0x4>

08001338 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <BusFault_Handler+0x4>

0800133e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <UsageFault_Handler+0x4>

08001344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136c:	f000 f8f8 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}

08001374 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	e00a      	b.n	800139c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001386:	f3af 8000 	nop.w
 800138a:	4601      	mov	r1, r0
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	60ba      	str	r2, [r7, #8]
 8001392:	b2ca      	uxtb	r2, r1
 8001394:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dbf0      	blt.n	8001386 <_read+0x12>
	}

return len;
 80013a4:	687b      	ldr	r3, [r7, #4]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_close>:
	}
	return len;
}

int _close(int file)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
	return -1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d4:	605a      	str	r2, [r3, #4]
	return 0;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <_isatty>:

int _isatty(int file)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
	return 1;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b085      	sub	sp, #20
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
	return 0;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
	...

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f002 fa68 	bl	8003914 <__errno>
 8001444:	4602      	mov	r2, r0
 8001446:	230c      	movs	r3, #12
 8001448:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20005000 	.word	0x20005000
 8001470:	00000400 	.word	0x00000400
 8001474:	2000008c 	.word	0x2000008c
 8001478:	20000220 	.word	0x20000220

0800147c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001488:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800148a:	e003      	b.n	8001494 <LoopCopyDataInit>

0800148c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800148e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001490:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001492:	3104      	adds	r1, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001494:	480a      	ldr	r0, [pc, #40]	; (80014c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001498:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800149a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800149c:	d3f6      	bcc.n	800148c <CopyDataInit>
  ldr r2, =_sbss
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014a0:	e002      	b.n	80014a8 <LoopFillZerobss>

080014a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014a4:	f842 3b04 	str.w	r3, [r2], #4

080014a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014ac:	d3f9      	bcc.n	80014a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ae:	f7ff ffe5 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b2:	f002 fa35 	bl	8003920 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014b6:	f7fe fe8b 	bl	80001d0 <main>
  bx lr
 80014ba:	4770      	bx	lr
  ldr r3, =_sidata
 80014bc:	0800498c 	.word	0x0800498c
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014c4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80014c8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80014cc:	2000021c 	.word	0x2000021c

080014d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC1_2_IRQHandler>
	...

080014d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_Init+0x28>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_Init+0x28>)
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 f929 	bl	800173c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 f808 	bl	8001500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f0:	f7ff fd50 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40022000 	.word	0x40022000

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x54>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x58>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	fbb3 f3f1 	udiv	r3, r3, r1
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f933 	bl	800178a <HAL_SYSTICK_Config>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00e      	b.n	800154c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d80a      	bhi.n	800154a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f000 f909 	bl	8001752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <HAL_InitTick+0x5c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000000 	.word	0x20000000
 8001558:	20000008 	.word	0x20000008
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x1c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x20>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a03      	ldr	r2, [pc, #12]	; (8001580 <HAL_IncTick+0x20>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	20000008 	.word	0x20000008
 8001580:	20000214 	.word	0x20000214

08001584 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b02      	ldr	r3, [pc, #8]	; (8001594 <HAL_GetTick+0x10>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	20000214 	.word	0x20000214

08001598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff fff0 	bl	8001584 <HAL_GetTick>
 80015a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d005      	beq.n	80015be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_Delay+0x40>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015be:	bf00      	nop
 80015c0:	f7ff ffe0 	bl	8001584 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8f7      	bhi.n	80015c0 <HAL_Delay+0x28>
  {
  }
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000008 	.word	0x20000008

080015dc <__NVIC_SetPriorityGrouping>:
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_GetPriorityGrouping>:
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_SetPriority>:
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	; (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <SysTick_Config>:
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001708:	d301      	bcc.n	800170e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800170a:	2301      	movs	r3, #1
 800170c:	e00f      	b.n	800172e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <SysTick_Config+0x40>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001716:	210f      	movs	r1, #15
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f7ff ff90 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <SysTick_Config+0x40>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <SysTick_Config+0x40>)
 8001728:	2207      	movs	r2, #7
 800172a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	e000e010 	.word	0xe000e010

0800173c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff49 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff5e 	bl	8001624 <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ff90 	bl	8001694 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff5f 	bl	8001640 <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ffb0 	bl	80016f8 <SysTick_Config>
 8001798:	4603      	mov	r3, r0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b08b      	sub	sp, #44	; 0x2c
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b6:	e127      	b.n	8001a08 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017b8:	2201      	movs	r2, #1
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	f040 8116 	bne.w	8001a02 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b12      	cmp	r3, #18
 80017dc:	d034      	beq.n	8001848 <HAL_GPIO_Init+0xa4>
 80017de:	2b12      	cmp	r3, #18
 80017e0:	d80d      	bhi.n	80017fe <HAL_GPIO_Init+0x5a>
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d02b      	beq.n	800183e <HAL_GPIO_Init+0x9a>
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d804      	bhi.n	80017f4 <HAL_GPIO_Init+0x50>
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d031      	beq.n	8001852 <HAL_GPIO_Init+0xae>
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d01c      	beq.n	800182c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017f2:	e048      	b.n	8001886 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d043      	beq.n	8001880 <HAL_GPIO_Init+0xdc>
 80017f8:	2b11      	cmp	r3, #17
 80017fa:	d01b      	beq.n	8001834 <HAL_GPIO_Init+0x90>
          break;
 80017fc:	e043      	b.n	8001886 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017fe:	4a89      	ldr	r2, [pc, #548]	; (8001a24 <HAL_GPIO_Init+0x280>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d026      	beq.n	8001852 <HAL_GPIO_Init+0xae>
 8001804:	4a87      	ldr	r2, [pc, #540]	; (8001a24 <HAL_GPIO_Init+0x280>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d806      	bhi.n	8001818 <HAL_GPIO_Init+0x74>
 800180a:	4a87      	ldr	r2, [pc, #540]	; (8001a28 <HAL_GPIO_Init+0x284>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d020      	beq.n	8001852 <HAL_GPIO_Init+0xae>
 8001810:	4a86      	ldr	r2, [pc, #536]	; (8001a2c <HAL_GPIO_Init+0x288>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d01d      	beq.n	8001852 <HAL_GPIO_Init+0xae>
          break;
 8001816:	e036      	b.n	8001886 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001818:	4a85      	ldr	r2, [pc, #532]	; (8001a30 <HAL_GPIO_Init+0x28c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d019      	beq.n	8001852 <HAL_GPIO_Init+0xae>
 800181e:	4a85      	ldr	r2, [pc, #532]	; (8001a34 <HAL_GPIO_Init+0x290>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d016      	beq.n	8001852 <HAL_GPIO_Init+0xae>
 8001824:	4a84      	ldr	r2, [pc, #528]	; (8001a38 <HAL_GPIO_Init+0x294>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_GPIO_Init+0xae>
          break;
 800182a:	e02c      	b.n	8001886 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	623b      	str	r3, [r7, #32]
          break;
 8001832:	e028      	b.n	8001886 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	3304      	adds	r3, #4
 800183a:	623b      	str	r3, [r7, #32]
          break;
 800183c:	e023      	b.n	8001886 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	3308      	adds	r3, #8
 8001844:	623b      	str	r3, [r7, #32]
          break;
 8001846:	e01e      	b.n	8001886 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	330c      	adds	r3, #12
 800184e:	623b      	str	r3, [r7, #32]
          break;
 8001850:	e019      	b.n	8001886 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800185a:	2304      	movs	r3, #4
 800185c:	623b      	str	r3, [r7, #32]
          break;
 800185e:	e012      	b.n	8001886 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d105      	bne.n	8001874 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001868:	2308      	movs	r3, #8
 800186a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	611a      	str	r2, [r3, #16]
          break;
 8001872:	e008      	b.n	8001886 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001874:	2308      	movs	r3, #8
 8001876:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	615a      	str	r2, [r3, #20]
          break;
 800187e:	e002      	b.n	8001886 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
          break;
 8001884:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	2bff      	cmp	r3, #255	; 0xff
 800188a:	d801      	bhi.n	8001890 <HAL_GPIO_Init+0xec>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	e001      	b.n	8001894 <HAL_GPIO_Init+0xf0>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3304      	adds	r3, #4
 8001894:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	2bff      	cmp	r3, #255	; 0xff
 800189a:	d802      	bhi.n	80018a2 <HAL_GPIO_Init+0xfe>
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	e002      	b.n	80018a8 <HAL_GPIO_Init+0x104>
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	3b08      	subs	r3, #8
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	210f      	movs	r1, #15
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	401a      	ands	r2, r3
 80018ba:	6a39      	ldr	r1, [r7, #32]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	431a      	orrs	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 8096 	beq.w	8001a02 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018d6:	4b59      	ldr	r3, [pc, #356]	; (8001a3c <HAL_GPIO_Init+0x298>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	4a58      	ldr	r2, [pc, #352]	; (8001a3c <HAL_GPIO_Init+0x298>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6193      	str	r3, [r2, #24]
 80018e2:	4b56      	ldr	r3, [pc, #344]	; (8001a3c <HAL_GPIO_Init+0x298>)
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018ee:	4a54      	ldr	r2, [pc, #336]	; (8001a40 <HAL_GPIO_Init+0x29c>)
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3302      	adds	r3, #2
 80018f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	220f      	movs	r2, #15
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4013      	ands	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4b      	ldr	r2, [pc, #300]	; (8001a44 <HAL_GPIO_Init+0x2a0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0x19e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4a      	ldr	r2, [pc, #296]	; (8001a48 <HAL_GPIO_Init+0x2a4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00d      	beq.n	800193e <HAL_GPIO_Init+0x19a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a49      	ldr	r2, [pc, #292]	; (8001a4c <HAL_GPIO_Init+0x2a8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x196>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a48      	ldr	r2, [pc, #288]	; (8001a50 <HAL_GPIO_Init+0x2ac>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_GPIO_Init+0x192>
 8001932:	2303      	movs	r3, #3
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x1a0>
 8001936:	2304      	movs	r3, #4
 8001938:	e004      	b.n	8001944 <HAL_GPIO_Init+0x1a0>
 800193a:	2302      	movs	r3, #2
 800193c:	e002      	b.n	8001944 <HAL_GPIO_Init+0x1a0>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x1a0>
 8001942:	2300      	movs	r3, #0
 8001944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001946:	f002 0203 	and.w	r2, r2, #3
 800194a:	0092      	lsls	r2, r2, #2
 800194c:	4093      	lsls	r3, r2
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001954:	493a      	ldr	r1, [pc, #232]	; (8001a40 <HAL_GPIO_Init+0x29c>)
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d006      	beq.n	800197c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800196e:	4b39      	ldr	r3, [pc, #228]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4938      	ldr	r1, [pc, #224]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
 800197a:	e006      	b.n	800198a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800197c:	4b35      	ldr	r3, [pc, #212]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	43db      	mvns	r3, r3
 8001984:	4933      	ldr	r1, [pc, #204]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 8001986:	4013      	ands	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d006      	beq.n	80019a4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	492e      	ldr	r1, [pc, #184]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	604b      	str	r3, [r1, #4]
 80019a2:	e006      	b.n	80019b2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	4929      	ldr	r1, [pc, #164]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d006      	beq.n	80019cc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019be:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	4924      	ldr	r1, [pc, #144]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
 80019ca:	e006      	b.n	80019da <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019cc:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	491f      	ldr	r1, [pc, #124]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d006      	beq.n	80019f4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019e6:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	491a      	ldr	r1, [pc, #104]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60cb      	str	r3, [r1, #12]
 80019f2:	e006      	b.n	8001a02 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	4915      	ldr	r1, [pc, #84]	; (8001a54 <HAL_GPIO_Init+0x2b0>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	3301      	adds	r3, #1
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f47f aed0 	bne.w	80017b8 <HAL_GPIO_Init+0x14>
  }
}
 8001a18:	bf00      	nop
 8001a1a:	372c      	adds	r7, #44	; 0x2c
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	10210000 	.word	0x10210000
 8001a28:	10110000 	.word	0x10110000
 8001a2c:	10120000 	.word	0x10120000
 8001a30:	10310000 	.word	0x10310000
 8001a34:	10320000 	.word	0x10320000
 8001a38:	10220000 	.word	0x10220000
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010000 	.word	0x40010000
 8001a44:	40010800 	.word	0x40010800
 8001a48:	40010c00 	.word	0x40010c00
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	40011400 	.word	0x40011400
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a74:	e003      	b.n	8001a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	041a      	lsls	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	611a      	str	r2, [r3, #16]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e26c      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8087 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa8:	4b92      	ldr	r3, [pc, #584]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d00c      	beq.n	8001ace <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab4:	4b8f      	ldr	r3, [pc, #572]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d112      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x5e>
 8001ac0:	4b8c      	ldr	r3, [pc, #560]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001acc:	d10b      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ace:	4b89      	ldr	r3, [pc, #548]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d06c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x12c>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d168      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e246      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x76>
 8001af0:	4b80      	ldr	r3, [pc, #512]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a7f      	ldr	r2, [pc, #508]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	e02e      	b.n	8001b5c <HAL_RCC_OscConfig+0xd4>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x98>
 8001b06:	4b7b      	ldr	r3, [pc, #492]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a7a      	ldr	r2, [pc, #488]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b78      	ldr	r3, [pc, #480]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a77      	ldr	r2, [pc, #476]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e01d      	b.n	8001b5c <HAL_RCC_OscConfig+0xd4>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0xbc>
 8001b2a:	4b72      	ldr	r3, [pc, #456]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a71      	ldr	r2, [pc, #452]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b6f      	ldr	r3, [pc, #444]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a6e      	ldr	r2, [pc, #440]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0xd4>
 8001b44:	4b6b      	ldr	r3, [pc, #428]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a6a      	ldr	r2, [pc, #424]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b68      	ldr	r3, [pc, #416]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a67      	ldr	r2, [pc, #412]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff fd0e 	bl	8001584 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fd0a 	bl	8001584 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1fa      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b5d      	ldr	r3, [pc, #372]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0xe4>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fcfa 	bl	8001584 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff fcf6 	bl	8001584 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	; 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e1e6      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba6:	4b53      	ldr	r3, [pc, #332]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x10c>
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d063      	beq.n	8001c8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc2:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bce:	4b49      	ldr	r3, [pc, #292]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d11c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x18c>
 8001bda:	4b46      	ldr	r3, [pc, #280]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d116      	bne.n	8001c14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be6:	4b43      	ldr	r3, [pc, #268]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_RCC_OscConfig+0x176>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e1ba      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4939      	ldr	r1, [pc, #228]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c12:	e03a      	b.n	8001c8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d020      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c1c:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fcaf 	bl	8001584 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fcab 	bl	8001584 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e19b      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4927      	ldr	r1, [pc, #156]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
 8001c5c:	e015      	b.n	8001c8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5e:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff fc8e 	bl	8001584 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6c:	f7ff fc8a 	bl	8001584 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e17a      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d03a      	beq.n	8001d0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d019      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_RCC_OscConfig+0x274>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca4:	f7ff fc6e 	bl	8001584 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cac:	f7ff fc6a 	bl	8001584 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e15a      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f000 faa8 	bl	8002220 <RCC_Delay>
 8001cd0:	e01c      	b.n	8001d0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_RCC_OscConfig+0x274>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7ff fc54 	bl	8001584 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cde:	e00f      	b.n	8001d00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fc50 	bl	8001584 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d908      	bls.n	8001d00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e140      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	42420000 	.word	0x42420000
 8001cfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d00:	4b9e      	ldr	r3, [pc, #632]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1e9      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80a6 	beq.w	8001e66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1e:	4b97      	ldr	r3, [pc, #604]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10d      	bne.n	8001d46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	4b94      	ldr	r3, [pc, #592]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	4a93      	ldr	r2, [pc, #588]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d34:	61d3      	str	r3, [r2, #28]
 8001d36:	4b91      	ldr	r3, [pc, #580]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d42:	2301      	movs	r3, #1
 8001d44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d46:	4b8e      	ldr	r3, [pc, #568]	; (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d118      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d52:	4b8b      	ldr	r3, [pc, #556]	; (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a8a      	ldr	r2, [pc, #552]	; (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5e:	f7ff fc11 	bl	8001584 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d66:	f7ff fc0d 	bl	8001584 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b64      	cmp	r3, #100	; 0x64
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e0fd      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d78:	4b81      	ldr	r3, [pc, #516]	; (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCC_OscConfig+0x312>
 8001d8c:	4b7b      	ldr	r3, [pc, #492]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a7a      	ldr	r2, [pc, #488]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	e02d      	b.n	8001df6 <HAL_RCC_OscConfig+0x36e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x334>
 8001da2:	4b76      	ldr	r3, [pc, #472]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4a75      	ldr	r2, [pc, #468]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6213      	str	r3, [r2, #32]
 8001dae:	4b73      	ldr	r3, [pc, #460]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a72      	ldr	r2, [pc, #456]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	f023 0304 	bic.w	r3, r3, #4
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	e01c      	b.n	8001df6 <HAL_RCC_OscConfig+0x36e>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b05      	cmp	r3, #5
 8001dc2:	d10c      	bne.n	8001dde <HAL_RCC_OscConfig+0x356>
 8001dc4:	4b6d      	ldr	r3, [pc, #436]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4a6c      	ldr	r2, [pc, #432]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6213      	str	r3, [r2, #32]
 8001dd0:	4b6a      	ldr	r3, [pc, #424]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4a69      	ldr	r2, [pc, #420]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6213      	str	r3, [r2, #32]
 8001ddc:	e00b      	b.n	8001df6 <HAL_RCC_OscConfig+0x36e>
 8001dde:	4b67      	ldr	r3, [pc, #412]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a66      	ldr	r2, [pc, #408]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	6213      	str	r3, [r2, #32]
 8001dea:	4b64      	ldr	r3, [pc, #400]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a63      	ldr	r2, [pc, #396]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	f023 0304 	bic.w	r3, r3, #4
 8001df4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d015      	beq.n	8001e2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7ff fbc1 	bl	8001584 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7ff fbbd 	bl	8001584 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e0ab      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	4b57      	ldr	r3, [pc, #348]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0ee      	beq.n	8001e06 <HAL_RCC_OscConfig+0x37e>
 8001e28:	e014      	b.n	8001e54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff fbab 	bl	8001584 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7ff fba7 	bl	8001584 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e095      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e48:	4b4c      	ldr	r3, [pc, #304]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1ee      	bne.n	8001e32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e54:	7dfb      	ldrb	r3, [r7, #23]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d105      	bne.n	8001e66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5a:	4b48      	ldr	r3, [pc, #288]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a47      	ldr	r2, [pc, #284]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8081 	beq.w	8001f72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e70:	4b42      	ldr	r3, [pc, #264]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d061      	beq.n	8001f40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d146      	bne.n	8001f12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e84:	4b3f      	ldr	r3, [pc, #252]	; (8001f84 <HAL_RCC_OscConfig+0x4fc>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fb7b 	bl	8001584 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e92:	f7ff fb77 	bl	8001584 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e067      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea4:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f0      	bne.n	8001e92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb8:	d108      	bne.n	8001ecc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eba:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	492d      	ldr	r1, [pc, #180]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a19      	ldr	r1, [r3, #32]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	430b      	orrs	r3, r1
 8001ede:	4927      	ldr	r1, [pc, #156]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <HAL_RCC_OscConfig+0x4fc>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7ff fb4b 	bl	8001584 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff fb47 	bl	8001584 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e037      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x46a>
 8001f10:	e02f      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <HAL_RCC_OscConfig+0x4fc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff fb34 	bl	8001584 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f20:	f7ff fb30 	bl	8001584 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e020      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x498>
 8001f3e:	e018      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e013      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40007000 	.word	0x40007000
 8001f84:	42420060 	.word	0x42420060

08001f88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0d0      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b6a      	ldr	r3, [pc, #424]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d910      	bls.n	8001fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b67      	ldr	r3, [pc, #412]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 0207 	bic.w	r2, r3, #7
 8001fb2:	4965      	ldr	r1, [pc, #404]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b63      	ldr	r3, [pc, #396]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0b8      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe4:	4b59      	ldr	r3, [pc, #356]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a58      	ldr	r2, [pc, #352]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ffc:	4b53      	ldr	r3, [pc, #332]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002006:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b50      	ldr	r3, [pc, #320]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	494d      	ldr	r1, [pc, #308]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d040      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d115      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e07f      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	4b41      	ldr	r3, [pc, #260]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e073      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002056:	4b3d      	ldr	r3, [pc, #244]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e06b      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002066:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f023 0203 	bic.w	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4936      	ldr	r1, [pc, #216]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002078:	f7ff fa84 	bl	8001584 <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	e00a      	b.n	8002096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002080:	f7ff fa80 	bl	8001584 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e053      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 020c 	and.w	r2, r3, #12
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d1eb      	bne.n	8002080 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d210      	bcs.n	80020d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 0207 	bic.w	r2, r3, #7
 80020be:	4922      	ldr	r1, [pc, #136]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e032      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4916      	ldr	r1, [pc, #88]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	490e      	ldr	r1, [pc, #56]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002116:	f000 f821 	bl	800215c <HAL_RCC_GetSysClockFreq>
 800211a:	4601      	mov	r1, r0
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 8002128:	5cd3      	ldrb	r3, [r2, r3]
 800212a:	fa21 f303 	lsr.w	r3, r1, r3
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_RCC_ClockConfig+0x1cc>)
 8002130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_ClockConfig+0x1d0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff f9e2 	bl	8001500 <HAL_InitTick>

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40022000 	.word	0x40022000
 800214c:	40021000 	.word	0x40021000
 8002150:	080048dc 	.word	0x080048dc
 8002154:	20000000 	.word	0x20000000
 8002158:	20000004 	.word	0x20000004

0800215c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800215c:	b490      	push	{r4, r7}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002162:	4b2a      	ldr	r3, [pc, #168]	; (800220c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002164:	1d3c      	adds	r4, r7, #4
 8002166:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800216c:	4b28      	ldr	r3, [pc, #160]	; (8002210 <HAL_RCC_GetSysClockFreq+0xb4>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b04      	cmp	r3, #4
 8002194:	d002      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x40>
 8002196:	2b08      	cmp	r3, #8
 8002198:	d003      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0x46>
 800219a:	e02d      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800219c:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <HAL_RCC_GetSysClockFreq+0xbc>)
 800219e:	623b      	str	r3, [r7, #32]
      break;
 80021a0:	e02d      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	0c9b      	lsrs	r3, r3, #18
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021ae:	4413      	add	r3, r2
 80021b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021c0:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	0c5b      	lsrs	r3, r3, #17
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021ce:	4413      	add	r3, r2
 80021d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	4a0f      	ldr	r2, [pc, #60]	; (8002218 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021da:	fb02 f203 	mul.w	r2, r2, r3
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
 80021e6:	e004      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	4a0c      	ldr	r2, [pc, #48]	; (800221c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021ec:	fb02 f303 	mul.w	r3, r2, r3
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	623b      	str	r3, [r7, #32]
      break;
 80021f6:	e002      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021f8:	4b07      	ldr	r3, [pc, #28]	; (8002218 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021fa:	623b      	str	r3, [r7, #32]
      break;
 80021fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3728      	adds	r7, #40	; 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bc90      	pop	{r4, r7}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	080048c8 	.word	0x080048c8
 8002210:	080048d8 	.word	0x080048d8
 8002214:	40021000 	.word	0x40021000
 8002218:	007a1200 	.word	0x007a1200
 800221c:	003d0900 	.word	0x003d0900

08002220 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <RCC_Delay+0x34>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <RCC_Delay+0x38>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	0a5b      	lsrs	r3, r3, #9
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	fb02 f303 	mul.w	r3, r2, r3
 800223a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800223c:	bf00      	nop
  }
  while (Delay --);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1e5a      	subs	r2, r3, #1
 8002242:	60fa      	str	r2, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f9      	bne.n	800223c <RCC_Delay+0x1c>
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000000 	.word	0x20000000
 8002258:	10624dd3 	.word	0x10624dd3

0800225c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e076      	b.n	800235c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	2b00      	cmp	r3, #0
 8002274:	d108      	bne.n	8002288 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800227e:	d009      	beq.n	8002294 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]
 8002286:	e005      	b.n	8002294 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fea2 	bl	8000ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002318:	ea42 0103 	orr.w	r1, r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	0c1a      	lsrs	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f002 0204 	and.w	r2, r2, #4
 800233a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69da      	ldr	r2, [r3, #28]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800234a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_SPI_Transmit+0x22>
 8002382:	2302      	movs	r3, #2
 8002384:	e126      	b.n	80025d4 <HAL_SPI_Transmit+0x270>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800238e:	f7ff f8f9 	bl	8001584 <HAL_GetTick>
 8002392:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d002      	beq.n	80023aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80023a4:	2302      	movs	r3, #2
 80023a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023a8:	e10b      	b.n	80025c2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <HAL_SPI_Transmit+0x52>
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023ba:	e102      	b.n	80025c2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2203      	movs	r2, #3
 80023c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	88fa      	ldrh	r2, [r7, #6]
 80023d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	88fa      	ldrh	r2, [r7, #6]
 80023da:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002402:	d10f      	bne.n	8002424 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002412:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002422:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242e:	2b40      	cmp	r3, #64	; 0x40
 8002430:	d007      	beq.n	8002442 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002440:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800244a:	d14b      	bne.n	80024e4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <HAL_SPI_Transmit+0xf6>
 8002454:	8afb      	ldrh	r3, [r7, #22]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d13e      	bne.n	80024d8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	881a      	ldrh	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	1c9a      	adds	r2, r3, #2
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800247e:	e02b      	b.n	80024d8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b02      	cmp	r3, #2
 800248c:	d112      	bne.n	80024b4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	881a      	ldrh	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	1c9a      	adds	r2, r3, #2
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80024b2:	e011      	b.n	80024d8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024b4:	f7ff f866 	bl	8001584 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d803      	bhi.n	80024cc <HAL_SPI_Transmit+0x168>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ca:	d102      	bne.n	80024d2 <HAL_SPI_Transmit+0x16e>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024d6:	e074      	b.n	80025c2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1ce      	bne.n	8002480 <HAL_SPI_Transmit+0x11c>
 80024e2:	e04c      	b.n	800257e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <HAL_SPI_Transmit+0x18e>
 80024ec:	8afb      	ldrh	r3, [r7, #22]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d140      	bne.n	8002574 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	330c      	adds	r3, #12
 80024fc:	7812      	ldrb	r2, [r2, #0]
 80024fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002518:	e02c      	b.n	8002574 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b02      	cmp	r3, #2
 8002526:	d113      	bne.n	8002550 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	330c      	adds	r3, #12
 8002532:	7812      	ldrb	r2, [r2, #0]
 8002534:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002544:	b29b      	uxth	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	86da      	strh	r2, [r3, #54]	; 0x36
 800254e:	e011      	b.n	8002574 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002550:	f7ff f818 	bl	8001584 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d803      	bhi.n	8002568 <HAL_SPI_Transmit+0x204>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002566:	d102      	bne.n	800256e <HAL_SPI_Transmit+0x20a>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d102      	bne.n	8002574 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002572:	e026      	b.n	80025c2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1cd      	bne.n	800251a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	6839      	ldr	r1, [r7, #0]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 fbb8 	bl	8002cf8 <SPI_EndRxTxTransaction>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2220      	movs	r2, #32
 8002592:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10a      	bne.n	80025b2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	77fb      	strb	r3, [r7, #31]
 80025be:	e000      	b.n	80025c2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80025c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3720      	adds	r7, #32
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	4613      	mov	r3, r2
 80025ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025f8:	d112      	bne.n	8002620 <HAL_SPI_Receive+0x44>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10e      	bne.n	8002620 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2204      	movs	r2, #4
 8002606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800260a:	88fa      	ldrh	r2, [r7, #6]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f8f1 	bl	80027fe <HAL_SPI_TransmitReceive>
 800261c:	4603      	mov	r3, r0
 800261e:	e0ea      	b.n	80027f6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_SPI_Receive+0x52>
 800262a:	2302      	movs	r3, #2
 800262c:	e0e3      	b.n	80027f6 <HAL_SPI_Receive+0x21a>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002636:	f7fe ffa5 	bl	8001584 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d002      	beq.n	800264e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002648:	2302      	movs	r3, #2
 800264a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800264c:	e0ca      	b.n	80027e4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <HAL_SPI_Receive+0x7e>
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d102      	bne.n	8002660 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800265e:	e0c1      	b.n	80027e4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2204      	movs	r2, #4
 8002664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	88fa      	ldrh	r2, [r7, #6]
 8002678:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	88fa      	ldrh	r2, [r7, #6]
 800267e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026a6:	d10f      	bne.n	80026c8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026c6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d2:	2b40      	cmp	r3, #64	; 0x40
 80026d4:	d007      	beq.n	80026e6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d162      	bne.n	80027b4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026ee:	e02e      	b.n	800274e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d115      	bne.n	800272a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f103 020c 	add.w	r2, r3, #12
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270a:	7812      	ldrb	r2, [r2, #0]
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002728:	e011      	b.n	800274e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800272a:	f7fe ff2b 	bl	8001584 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d803      	bhi.n	8002742 <HAL_SPI_Receive+0x166>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d102      	bne.n	8002748 <HAL_SPI_Receive+0x16c>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800274c:	e04a      	b.n	80027e4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1cb      	bne.n	80026f0 <HAL_SPI_Receive+0x114>
 8002758:	e031      	b.n	80027be <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d113      	bne.n	8002790 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	b292      	uxth	r2, r2
 8002774:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	1c9a      	adds	r2, r3, #2
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800278e:	e011      	b.n	80027b4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002790:	f7fe fef8 	bl	8001584 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d803      	bhi.n	80027a8 <HAL_SPI_Receive+0x1cc>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a6:	d102      	bne.n	80027ae <HAL_SPI_Receive+0x1d2>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d102      	bne.n	80027b4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80027b2:	e017      	b.n	80027e4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1cd      	bne.n	800275a <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	6839      	ldr	r1, [r7, #0]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 fa46 	bl	8002c54 <SPI_EndRxTransaction>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	75fb      	strb	r3, [r7, #23]
 80027e0:	e000      	b.n	80027e4 <HAL_SPI_Receive+0x208>
  }

error :
 80027e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b08c      	sub	sp, #48	; 0x30
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800280c:	2301      	movs	r3, #1
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_SPI_TransmitReceive+0x26>
 8002820:	2302      	movs	r3, #2
 8002822:	e18a      	b.n	8002b3a <HAL_SPI_TransmitReceive+0x33c>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800282c:	f7fe feaa 	bl	8001584 <HAL_GetTick>
 8002830:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002842:	887b      	ldrh	r3, [r7, #2]
 8002844:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800284a:	2b01      	cmp	r3, #1
 800284c:	d00f      	beq.n	800286e <HAL_SPI_TransmitReceive+0x70>
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002854:	d107      	bne.n	8002866 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <HAL_SPI_TransmitReceive+0x68>
 800285e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002862:	2b04      	cmp	r3, #4
 8002864:	d003      	beq.n	800286e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002866:	2302      	movs	r3, #2
 8002868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800286c:	e15b      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_SPI_TransmitReceive+0x82>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_SPI_TransmitReceive+0x82>
 800287a:	887b      	ldrh	r3, [r7, #2]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d103      	bne.n	8002888 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002886:	e14e      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b04      	cmp	r3, #4
 8002892:	d003      	beq.n	800289c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2205      	movs	r2, #5
 8002898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	887a      	ldrh	r2, [r7, #2]
 80028ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	887a      	ldrh	r2, [r7, #2]
 80028b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	887a      	ldrh	r2, [r7, #2]
 80028be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	d007      	beq.n	80028f0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028f8:	d178      	bne.n	80029ec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x10a>
 8002902:	8b7b      	ldrh	r3, [r7, #26]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d166      	bne.n	80029d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	881a      	ldrh	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	1c9a      	adds	r2, r3, #2
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800292c:	e053      	b.n	80029d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b02      	cmp	r3, #2
 800293a:	d11b      	bne.n	8002974 <HAL_SPI_TransmitReceive+0x176>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <HAL_SPI_TransmitReceive+0x176>
 8002946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d113      	bne.n	8002974 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	881a      	ldrh	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	1c9a      	adds	r2, r3, #2
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b01      	cmp	r3, #1
 8002980:	d119      	bne.n	80029b6 <HAL_SPI_TransmitReceive+0x1b8>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d014      	beq.n	80029b6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	b292      	uxth	r2, r2
 8002998:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299e:	1c9a      	adds	r2, r3, #2
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029b2:	2301      	movs	r3, #1
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029b6:	f7fe fde5 	bl	8001584 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d807      	bhi.n	80029d6 <HAL_SPI_TransmitReceive+0x1d8>
 80029c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d003      	beq.n	80029d6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029d4:	e0a7      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1a6      	bne.n	800292e <HAL_SPI_TransmitReceive+0x130>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1a1      	bne.n	800292e <HAL_SPI_TransmitReceive+0x130>
 80029ea:	e07c      	b.n	8002ae6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_SPI_TransmitReceive+0x1fc>
 80029f4:	8b7b      	ldrh	r3, [r7, #26]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d16b      	bne.n	8002ad2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	330c      	adds	r3, #12
 8002a04:	7812      	ldrb	r2, [r2, #0]
 8002a06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a20:	e057      	b.n	8002ad2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d11c      	bne.n	8002a6a <HAL_SPI_TransmitReceive+0x26c>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d017      	beq.n	8002a6a <HAL_SPI_TransmitReceive+0x26c>
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d114      	bne.n	8002a6a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	330c      	adds	r3, #12
 8002a4a:	7812      	ldrb	r2, [r2, #0]
 8002a4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d119      	bne.n	8002aac <HAL_SPI_TransmitReceive+0x2ae>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d014      	beq.n	8002aac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002aac:	f7fe fd6a 	bl	8001584 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d803      	bhi.n	8002ac4 <HAL_SPI_TransmitReceive+0x2c6>
 8002abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	d102      	bne.n	8002aca <HAL_SPI_TransmitReceive+0x2cc>
 8002ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ad0:	e029      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1a2      	bne.n	8002a22 <HAL_SPI_TransmitReceive+0x224>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d19d      	bne.n	8002a22 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f904 	bl	8002cf8 <SPI_EndRxTxTransaction>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d006      	beq.n	8002b04 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002b02:	e010      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10b      	bne.n	8002b24 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	e000      	b.n	8002b26 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002b24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3730      	adds	r7, #48	; 0x30
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b54:	f7fe fd16 	bl	8001584 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	4413      	add	r3, r2
 8002b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b64:	f7fe fd0e 	bl	8001584 <HAL_GetTick>
 8002b68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b6a:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	015b      	lsls	r3, r3, #5
 8002b70:	0d1b      	lsrs	r3, r3, #20
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	fb02 f303 	mul.w	r3, r2, r3
 8002b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b7a:	e054      	b.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b82:	d050      	beq.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b84:	f7fe fcfe 	bl	8001584 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d902      	bls.n	8002b9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d13d      	bne.n	8002c16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bb2:	d111      	bne.n	8002bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bbc:	d004      	beq.n	8002bc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc6:	d107      	bne.n	8002bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be0:	d10f      	bne.n	8002c02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e017      	b.n	8002c46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	bf0c      	ite	eq
 8002c36:	2301      	moveq	r3, #1
 8002c38:	2300      	movne	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d19b      	bne.n	8002b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000000 	.word	0x20000000

08002c54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c68:	d111      	bne.n	8002c8e <SPI_EndRxTransaction+0x3a>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c72:	d004      	beq.n	8002c7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7c:	d107      	bne.n	8002c8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c96:	d117      	bne.n	8002cc8 <SPI_EndRxTransaction+0x74>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca0:	d112      	bne.n	8002cc8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2101      	movs	r1, #1
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f7ff ff49 	bl	8002b44 <SPI_WaitFlagStateUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01a      	beq.n	8002cee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbc:	f043 0220 	orr.w	r2, r3, #32
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e013      	b.n	8002cf0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2180      	movs	r1, #128	; 0x80
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f7ff ff36 	bl	8002b44 <SPI_WaitFlagStateUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d007      	beq.n	8002cee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f043 0220 	orr.w	r2, r3, #32
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e000      	b.n	8002cf0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2180      	movs	r1, #128	; 0x80
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f7ff ff18 	bl	8002b44 <SPI_WaitFlagStateUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d007      	beq.n	8002d2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	f043 0220 	orr.w	r2, r3, #32
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e000      	b.n	8002d2c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e041      	b.n	8002dca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fe fa2e 	bl	80011bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	4619      	mov	r1, r3
 8002d72:	4610      	mov	r0, r2
 8002d74:	f000 fa9e 	bl	80032b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e041      	b.n	8002e68 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d106      	bne.n	8002dfe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7fe f949 	bl	8001090 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2202      	movs	r2, #2
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4610      	mov	r0, r2
 8002e12:	f000 fa4f 	bl	80032b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e093      	b.n	8002fac <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d106      	bne.n	8002e9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f88b 	bl	8002fb4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eb4:	f023 0307 	bic.w	r3, r3, #7
 8002eb8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f000 f9f5 	bl	80032b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef2:	f023 0303 	bic.w	r3, r3, #3
 8002ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	4313      	orrs	r3, r2
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f10:	f023 030c 	bic.w	r3, r3, #12
 8002f14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	011a      	lsls	r2, r3, #4
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	031b      	lsls	r3, r3, #12
 8002f40:	4313      	orrs	r3, r2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002f4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
	...

08002fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e0ac      	b.n	800313c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	f200 809f 	bhi.w	8003130 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002ff2:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff8:	0800302d 	.word	0x0800302d
 8002ffc:	08003131 	.word	0x08003131
 8003000:	08003131 	.word	0x08003131
 8003004:	08003131 	.word	0x08003131
 8003008:	0800306d 	.word	0x0800306d
 800300c:	08003131 	.word	0x08003131
 8003010:	08003131 	.word	0x08003131
 8003014:	08003131 	.word	0x08003131
 8003018:	080030af 	.word	0x080030af
 800301c:	08003131 	.word	0x08003131
 8003020:	08003131 	.word	0x08003131
 8003024:	08003131 	.word	0x08003131
 8003028:	080030ef 	.word	0x080030ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 f9a0 	bl	8003378 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0208 	orr.w	r2, r2, #8
 8003046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0204 	bic.w	r2, r2, #4
 8003056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6999      	ldr	r1, [r3, #24]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	619a      	str	r2, [r3, #24]
      break;
 800306a:	e062      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 f9e6 	bl	8003444 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6999      	ldr	r1, [r3, #24]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	021a      	lsls	r2, r3, #8
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	619a      	str	r2, [r3, #24]
      break;
 80030ac:	e041      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fa2f 	bl	8003518 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0208 	orr.w	r2, r2, #8
 80030c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0204 	bic.w	r2, r2, #4
 80030d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69d9      	ldr	r1, [r3, #28]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	61da      	str	r2, [r3, #28]
      break;
 80030ec:	e021      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fa79 	bl	80035ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69da      	ldr	r2, [r3, #28]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69d9      	ldr	r1, [r3, #28]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	021a      	lsls	r2, r3, #8
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	61da      	str	r2, [r3, #28]
      break;
 800312e:	e000      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003130:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_TIM_ConfigClockSource+0x18>
 8003158:	2302      	movs	r3, #2
 800315a:	e0a6      	b.n	80032aa <HAL_TIM_ConfigClockSource+0x166>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800317a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003182:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	d067      	beq.n	8003264 <HAL_TIM_ConfigClockSource+0x120>
 8003194:	2b40      	cmp	r3, #64	; 0x40
 8003196:	d80b      	bhi.n	80031b0 <HAL_TIM_ConfigClockSource+0x6c>
 8003198:	2b10      	cmp	r3, #16
 800319a:	d073      	beq.n	8003284 <HAL_TIM_ConfigClockSource+0x140>
 800319c:	2b10      	cmp	r3, #16
 800319e:	d802      	bhi.n	80031a6 <HAL_TIM_ConfigClockSource+0x62>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d06f      	beq.n	8003284 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031a4:	e078      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d06c      	beq.n	8003284 <HAL_TIM_ConfigClockSource+0x140>
 80031aa:	2b30      	cmp	r3, #48	; 0x30
 80031ac:	d06a      	beq.n	8003284 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80031ae:	e073      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031b0:	2b70      	cmp	r3, #112	; 0x70
 80031b2:	d00d      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x8c>
 80031b4:	2b70      	cmp	r3, #112	; 0x70
 80031b6:	d804      	bhi.n	80031c2 <HAL_TIM_ConfigClockSource+0x7e>
 80031b8:	2b50      	cmp	r3, #80	; 0x50
 80031ba:	d033      	beq.n	8003224 <HAL_TIM_ConfigClockSource+0xe0>
 80031bc:	2b60      	cmp	r3, #96	; 0x60
 80031be:	d041      	beq.n	8003244 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80031c0:	e06a      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c6:	d066      	beq.n	8003296 <HAL_TIM_ConfigClockSource+0x152>
 80031c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031cc:	d017      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 80031ce:	e063      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6899      	ldr	r1, [r3, #8]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f000 fac9 	bl	8003776 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	609a      	str	r2, [r3, #8]
      break;
 80031fc:	e04c      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6899      	ldr	r1, [r3, #8]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f000 fab2 	bl	8003776 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003220:	609a      	str	r2, [r3, #8]
      break;
 8003222:	e039      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	461a      	mov	r2, r3
 8003232:	f000 fa29 	bl	8003688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2150      	movs	r1, #80	; 0x50
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fa80 	bl	8003742 <TIM_ITRx_SetConfig>
      break;
 8003242:	e029      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	461a      	mov	r2, r3
 8003252:	f000 fa47 	bl	80036e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2160      	movs	r1, #96	; 0x60
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fa70 	bl	8003742 <TIM_ITRx_SetConfig>
      break;
 8003262:	e019      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	461a      	mov	r2, r3
 8003272:	f000 fa09 	bl	8003688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2140      	movs	r1, #64	; 0x40
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fa60 	bl	8003742 <TIM_ITRx_SetConfig>
      break;
 8003282:	e009      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f000 fa57 	bl	8003742 <TIM_ITRx_SetConfig>
        break;
 8003294:	e000      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003296:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a29      	ldr	r2, [pc, #164]	; (800336c <TIM_Base_SetConfig+0xb8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00b      	beq.n	80032e4 <TIM_Base_SetConfig+0x30>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d2:	d007      	beq.n	80032e4 <TIM_Base_SetConfig+0x30>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a26      	ldr	r2, [pc, #152]	; (8003370 <TIM_Base_SetConfig+0xbc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <TIM_Base_SetConfig+0x30>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a25      	ldr	r2, [pc, #148]	; (8003374 <TIM_Base_SetConfig+0xc0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d108      	bne.n	80032f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a1c      	ldr	r2, [pc, #112]	; (800336c <TIM_Base_SetConfig+0xb8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00b      	beq.n	8003316 <TIM_Base_SetConfig+0x62>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003304:	d007      	beq.n	8003316 <TIM_Base_SetConfig+0x62>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a19      	ldr	r2, [pc, #100]	; (8003370 <TIM_Base_SetConfig+0xbc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d003      	beq.n	8003316 <TIM_Base_SetConfig+0x62>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a18      	ldr	r2, [pc, #96]	; (8003374 <TIM_Base_SetConfig+0xc0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d108      	bne.n	8003328 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a07      	ldr	r2, [pc, #28]	; (800336c <TIM_Base_SetConfig+0xb8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d103      	bne.n	800335c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	615a      	str	r2, [r3, #20]
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	40012c00 	.word	0x40012c00
 8003370:	40000400 	.word	0x40000400
 8003374:	40000800 	.word	0x40000800

08003378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f023 0201 	bic.w	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0303 	bic.w	r3, r3, #3
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f023 0302 	bic.w	r3, r3, #2
 80033c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <TIM_OC1_SetConfig+0xc8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d10c      	bne.n	80033ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0308 	bic.w	r3, r3, #8
 80033da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f023 0304 	bic.w	r3, r3, #4
 80033ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a13      	ldr	r2, [pc, #76]	; (8003440 <TIM_OC1_SetConfig+0xc8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d111      	bne.n	800341a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	621a      	str	r2, [r3, #32]
}
 8003434:	bf00      	nop
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40012c00 	.word	0x40012c00

08003444 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	f023 0210 	bic.w	r2, r3, #16
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 0320 	bic.w	r3, r3, #32
 800348e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <TIM_OC2_SetConfig+0xd0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d10d      	bne.n	80034c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a14      	ldr	r2, [pc, #80]	; (8003514 <TIM_OC2_SetConfig+0xd0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d113      	bne.n	80034f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	621a      	str	r2, [r3, #32]
}
 800350a:	bf00      	nop
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr
 8003514:	40012c00 	.word	0x40012c00

08003518 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0303 	bic.w	r3, r3, #3
 800354e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <TIM_OC3_SetConfig+0xd0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d10d      	bne.n	8003592 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800357c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	021b      	lsls	r3, r3, #8
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <TIM_OC3_SetConfig+0xd0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d113      	bne.n	80035c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	621a      	str	r2, [r3, #32]
}
 80035dc:	bf00      	nop
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40012c00 	.word	0x40012c00

080035ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800361a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	031b      	lsls	r3, r3, #12
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a0f      	ldr	r2, [pc, #60]	; (8003684 <TIM_OC4_SetConfig+0x98>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d109      	bne.n	8003660 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	019b      	lsls	r3, r3, #6
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	621a      	str	r2, [r3, #32]
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	40012c00 	.word	0x40012c00

08003688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f023 0201 	bic.w	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f023 030a 	bic.w	r3, r3, #10
 80036c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	621a      	str	r2, [r3, #32]
}
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f023 0210 	bic.w	r2, r3, #16
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800370e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	031b      	lsls	r3, r3, #12
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003720:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	621a      	str	r2, [r3, #32]
}
 8003738:	bf00      	nop
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003742:	b480      	push	{r7}
 8003744:	b085      	sub	sp, #20
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003758:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	f043 0307 	orr.w	r3, r3, #7
 8003764:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	609a      	str	r2, [r3, #8]
}
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr

08003776 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003776:	b480      	push	{r7}
 8003778:	b087      	sub	sp, #28
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003790:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	021a      	lsls	r2, r3, #8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	431a      	orrs	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4313      	orrs	r3, r2
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	609a      	str	r2, [r3, #8]
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e046      	b.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a16      	ldr	r2, [pc, #88]	; (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d00e      	beq.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003818:	d009      	beq.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a12      	ldr	r2, [pc, #72]	; (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d004      	beq.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a10      	ldr	r2, [pc, #64]	; (800386c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d10c      	bne.n	8003848 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003834:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	4313      	orrs	r3, r2
 800383e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	40012c00 	.word	0x40012c00
 8003868:	40000400 	.word	0x40000400
 800386c:	40000800 	.word	0x40000800

08003870 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003888:	2302      	movs	r3, #2
 800388a:	e03d      	b.n	8003908 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr
	...

08003914 <__errno>:
 8003914:	4b01      	ldr	r3, [pc, #4]	; (800391c <__errno+0x8>)
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	2000000c 	.word	0x2000000c

08003920 <__libc_init_array>:
 8003920:	b570      	push	{r4, r5, r6, lr}
 8003922:	2500      	movs	r5, #0
 8003924:	4e0c      	ldr	r6, [pc, #48]	; (8003958 <__libc_init_array+0x38>)
 8003926:	4c0d      	ldr	r4, [pc, #52]	; (800395c <__libc_init_array+0x3c>)
 8003928:	1ba4      	subs	r4, r4, r6
 800392a:	10a4      	asrs	r4, r4, #2
 800392c:	42a5      	cmp	r5, r4
 800392e:	d109      	bne.n	8003944 <__libc_init_array+0x24>
 8003930:	f000 ff74 	bl	800481c <_init>
 8003934:	2500      	movs	r5, #0
 8003936:	4e0a      	ldr	r6, [pc, #40]	; (8003960 <__libc_init_array+0x40>)
 8003938:	4c0a      	ldr	r4, [pc, #40]	; (8003964 <__libc_init_array+0x44>)
 800393a:	1ba4      	subs	r4, r4, r6
 800393c:	10a4      	asrs	r4, r4, #2
 800393e:	42a5      	cmp	r5, r4
 8003940:	d105      	bne.n	800394e <__libc_init_array+0x2e>
 8003942:	bd70      	pop	{r4, r5, r6, pc}
 8003944:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003948:	4798      	blx	r3
 800394a:	3501      	adds	r5, #1
 800394c:	e7ee      	b.n	800392c <__libc_init_array+0xc>
 800394e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003952:	4798      	blx	r3
 8003954:	3501      	adds	r5, #1
 8003956:	e7f2      	b.n	800393e <__libc_init_array+0x1e>
 8003958:	08004984 	.word	0x08004984
 800395c:	08004984 	.word	0x08004984
 8003960:	08004984 	.word	0x08004984
 8003964:	08004988 	.word	0x08004988

08003968 <memset>:
 8003968:	4603      	mov	r3, r0
 800396a:	4402      	add	r2, r0
 800396c:	4293      	cmp	r3, r2
 800396e:	d100      	bne.n	8003972 <memset+0xa>
 8003970:	4770      	bx	lr
 8003972:	f803 1b01 	strb.w	r1, [r3], #1
 8003976:	e7f9      	b.n	800396c <memset+0x4>

08003978 <iprintf>:
 8003978:	b40f      	push	{r0, r1, r2, r3}
 800397a:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <iprintf+0x2c>)
 800397c:	b513      	push	{r0, r1, r4, lr}
 800397e:	681c      	ldr	r4, [r3, #0]
 8003980:	b124      	cbz	r4, 800398c <iprintf+0x14>
 8003982:	69a3      	ldr	r3, [r4, #24]
 8003984:	b913      	cbnz	r3, 800398c <iprintf+0x14>
 8003986:	4620      	mov	r0, r4
 8003988:	f000 fa22 	bl	8003dd0 <__sinit>
 800398c:	ab05      	add	r3, sp, #20
 800398e:	9a04      	ldr	r2, [sp, #16]
 8003990:	68a1      	ldr	r1, [r4, #8]
 8003992:	4620      	mov	r0, r4
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	f000 fbd7 	bl	8004148 <_vfiprintf_r>
 800399a:	b002      	add	sp, #8
 800399c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039a0:	b004      	add	sp, #16
 80039a2:	4770      	bx	lr
 80039a4:	2000000c 	.word	0x2000000c

080039a8 <_puts_r>:
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	460e      	mov	r6, r1
 80039ac:	4605      	mov	r5, r0
 80039ae:	b118      	cbz	r0, 80039b8 <_puts_r+0x10>
 80039b0:	6983      	ldr	r3, [r0, #24]
 80039b2:	b90b      	cbnz	r3, 80039b8 <_puts_r+0x10>
 80039b4:	f000 fa0c 	bl	8003dd0 <__sinit>
 80039b8:	69ab      	ldr	r3, [r5, #24]
 80039ba:	68ac      	ldr	r4, [r5, #8]
 80039bc:	b913      	cbnz	r3, 80039c4 <_puts_r+0x1c>
 80039be:	4628      	mov	r0, r5
 80039c0:	f000 fa06 	bl	8003dd0 <__sinit>
 80039c4:	4b23      	ldr	r3, [pc, #140]	; (8003a54 <_puts_r+0xac>)
 80039c6:	429c      	cmp	r4, r3
 80039c8:	d117      	bne.n	80039fa <_puts_r+0x52>
 80039ca:	686c      	ldr	r4, [r5, #4]
 80039cc:	89a3      	ldrh	r3, [r4, #12]
 80039ce:	071b      	lsls	r3, r3, #28
 80039d0:	d51d      	bpl.n	8003a0e <_puts_r+0x66>
 80039d2:	6923      	ldr	r3, [r4, #16]
 80039d4:	b1db      	cbz	r3, 8003a0e <_puts_r+0x66>
 80039d6:	3e01      	subs	r6, #1
 80039d8:	68a3      	ldr	r3, [r4, #8]
 80039da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80039de:	3b01      	subs	r3, #1
 80039e0:	60a3      	str	r3, [r4, #8]
 80039e2:	b9e9      	cbnz	r1, 8003a20 <_puts_r+0x78>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	da2e      	bge.n	8003a46 <_puts_r+0x9e>
 80039e8:	4622      	mov	r2, r4
 80039ea:	210a      	movs	r1, #10
 80039ec:	4628      	mov	r0, r5
 80039ee:	f000 f83f 	bl	8003a70 <__swbuf_r>
 80039f2:	3001      	adds	r0, #1
 80039f4:	d011      	beq.n	8003a1a <_puts_r+0x72>
 80039f6:	200a      	movs	r0, #10
 80039f8:	e011      	b.n	8003a1e <_puts_r+0x76>
 80039fa:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <_puts_r+0xb0>)
 80039fc:	429c      	cmp	r4, r3
 80039fe:	d101      	bne.n	8003a04 <_puts_r+0x5c>
 8003a00:	68ac      	ldr	r4, [r5, #8]
 8003a02:	e7e3      	b.n	80039cc <_puts_r+0x24>
 8003a04:	4b15      	ldr	r3, [pc, #84]	; (8003a5c <_puts_r+0xb4>)
 8003a06:	429c      	cmp	r4, r3
 8003a08:	bf08      	it	eq
 8003a0a:	68ec      	ldreq	r4, [r5, #12]
 8003a0c:	e7de      	b.n	80039cc <_puts_r+0x24>
 8003a0e:	4621      	mov	r1, r4
 8003a10:	4628      	mov	r0, r5
 8003a12:	f000 f87f 	bl	8003b14 <__swsetup_r>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d0dd      	beq.n	80039d6 <_puts_r+0x2e>
 8003a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	da04      	bge.n	8003a2e <_puts_r+0x86>
 8003a24:	69a2      	ldr	r2, [r4, #24]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	dc06      	bgt.n	8003a38 <_puts_r+0x90>
 8003a2a:	290a      	cmp	r1, #10
 8003a2c:	d004      	beq.n	8003a38 <_puts_r+0x90>
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	6022      	str	r2, [r4, #0]
 8003a34:	7019      	strb	r1, [r3, #0]
 8003a36:	e7cf      	b.n	80039d8 <_puts_r+0x30>
 8003a38:	4622      	mov	r2, r4
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	f000 f818 	bl	8003a70 <__swbuf_r>
 8003a40:	3001      	adds	r0, #1
 8003a42:	d1c9      	bne.n	80039d8 <_puts_r+0x30>
 8003a44:	e7e9      	b.n	8003a1a <_puts_r+0x72>
 8003a46:	200a      	movs	r0, #10
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	6022      	str	r2, [r4, #0]
 8003a4e:	7018      	strb	r0, [r3, #0]
 8003a50:	e7e5      	b.n	8003a1e <_puts_r+0x76>
 8003a52:	bf00      	nop
 8003a54:	08004910 	.word	0x08004910
 8003a58:	08004930 	.word	0x08004930
 8003a5c:	080048f0 	.word	0x080048f0

08003a60 <puts>:
 8003a60:	4b02      	ldr	r3, [pc, #8]	; (8003a6c <puts+0xc>)
 8003a62:	4601      	mov	r1, r0
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	f7ff bf9f 	b.w	80039a8 <_puts_r>
 8003a6a:	bf00      	nop
 8003a6c:	2000000c 	.word	0x2000000c

08003a70 <__swbuf_r>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	460e      	mov	r6, r1
 8003a74:	4614      	mov	r4, r2
 8003a76:	4605      	mov	r5, r0
 8003a78:	b118      	cbz	r0, 8003a82 <__swbuf_r+0x12>
 8003a7a:	6983      	ldr	r3, [r0, #24]
 8003a7c:	b90b      	cbnz	r3, 8003a82 <__swbuf_r+0x12>
 8003a7e:	f000 f9a7 	bl	8003dd0 <__sinit>
 8003a82:	4b21      	ldr	r3, [pc, #132]	; (8003b08 <__swbuf_r+0x98>)
 8003a84:	429c      	cmp	r4, r3
 8003a86:	d12a      	bne.n	8003ade <__swbuf_r+0x6e>
 8003a88:	686c      	ldr	r4, [r5, #4]
 8003a8a:	69a3      	ldr	r3, [r4, #24]
 8003a8c:	60a3      	str	r3, [r4, #8]
 8003a8e:	89a3      	ldrh	r3, [r4, #12]
 8003a90:	071a      	lsls	r2, r3, #28
 8003a92:	d52e      	bpl.n	8003af2 <__swbuf_r+0x82>
 8003a94:	6923      	ldr	r3, [r4, #16]
 8003a96:	b363      	cbz	r3, 8003af2 <__swbuf_r+0x82>
 8003a98:	6923      	ldr	r3, [r4, #16]
 8003a9a:	6820      	ldr	r0, [r4, #0]
 8003a9c:	b2f6      	uxtb	r6, r6
 8003a9e:	1ac0      	subs	r0, r0, r3
 8003aa0:	6963      	ldr	r3, [r4, #20]
 8003aa2:	4637      	mov	r7, r6
 8003aa4:	4283      	cmp	r3, r0
 8003aa6:	dc04      	bgt.n	8003ab2 <__swbuf_r+0x42>
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f000 f926 	bl	8003cfc <_fflush_r>
 8003ab0:	bb28      	cbnz	r0, 8003afe <__swbuf_r+0x8e>
 8003ab2:	68a3      	ldr	r3, [r4, #8]
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	60a3      	str	r3, [r4, #8]
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	6022      	str	r2, [r4, #0]
 8003ac0:	701e      	strb	r6, [r3, #0]
 8003ac2:	6963      	ldr	r3, [r4, #20]
 8003ac4:	4283      	cmp	r3, r0
 8003ac6:	d004      	beq.n	8003ad2 <__swbuf_r+0x62>
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	07db      	lsls	r3, r3, #31
 8003acc:	d519      	bpl.n	8003b02 <__swbuf_r+0x92>
 8003ace:	2e0a      	cmp	r6, #10
 8003ad0:	d117      	bne.n	8003b02 <__swbuf_r+0x92>
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f000 f911 	bl	8003cfc <_fflush_r>
 8003ada:	b190      	cbz	r0, 8003b02 <__swbuf_r+0x92>
 8003adc:	e00f      	b.n	8003afe <__swbuf_r+0x8e>
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <__swbuf_r+0x9c>)
 8003ae0:	429c      	cmp	r4, r3
 8003ae2:	d101      	bne.n	8003ae8 <__swbuf_r+0x78>
 8003ae4:	68ac      	ldr	r4, [r5, #8]
 8003ae6:	e7d0      	b.n	8003a8a <__swbuf_r+0x1a>
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <__swbuf_r+0xa0>)
 8003aea:	429c      	cmp	r4, r3
 8003aec:	bf08      	it	eq
 8003aee:	68ec      	ldreq	r4, [r5, #12]
 8003af0:	e7cb      	b.n	8003a8a <__swbuf_r+0x1a>
 8003af2:	4621      	mov	r1, r4
 8003af4:	4628      	mov	r0, r5
 8003af6:	f000 f80d 	bl	8003b14 <__swsetup_r>
 8003afa:	2800      	cmp	r0, #0
 8003afc:	d0cc      	beq.n	8003a98 <__swbuf_r+0x28>
 8003afe:	f04f 37ff 	mov.w	r7, #4294967295
 8003b02:	4638      	mov	r0, r7
 8003b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b06:	bf00      	nop
 8003b08:	08004910 	.word	0x08004910
 8003b0c:	08004930 	.word	0x08004930
 8003b10:	080048f0 	.word	0x080048f0

08003b14 <__swsetup_r>:
 8003b14:	4b32      	ldr	r3, [pc, #200]	; (8003be0 <__swsetup_r+0xcc>)
 8003b16:	b570      	push	{r4, r5, r6, lr}
 8003b18:	681d      	ldr	r5, [r3, #0]
 8003b1a:	4606      	mov	r6, r0
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	b125      	cbz	r5, 8003b2a <__swsetup_r+0x16>
 8003b20:	69ab      	ldr	r3, [r5, #24]
 8003b22:	b913      	cbnz	r3, 8003b2a <__swsetup_r+0x16>
 8003b24:	4628      	mov	r0, r5
 8003b26:	f000 f953 	bl	8003dd0 <__sinit>
 8003b2a:	4b2e      	ldr	r3, [pc, #184]	; (8003be4 <__swsetup_r+0xd0>)
 8003b2c:	429c      	cmp	r4, r3
 8003b2e:	d10f      	bne.n	8003b50 <__swsetup_r+0x3c>
 8003b30:	686c      	ldr	r4, [r5, #4]
 8003b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	0715      	lsls	r5, r2, #28
 8003b3a:	d42c      	bmi.n	8003b96 <__swsetup_r+0x82>
 8003b3c:	06d0      	lsls	r0, r2, #27
 8003b3e:	d411      	bmi.n	8003b64 <__swsetup_r+0x50>
 8003b40:	2209      	movs	r2, #9
 8003b42:	6032      	str	r2, [r6, #0]
 8003b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b48:	81a3      	strh	r3, [r4, #12]
 8003b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4e:	e03e      	b.n	8003bce <__swsetup_r+0xba>
 8003b50:	4b25      	ldr	r3, [pc, #148]	; (8003be8 <__swsetup_r+0xd4>)
 8003b52:	429c      	cmp	r4, r3
 8003b54:	d101      	bne.n	8003b5a <__swsetup_r+0x46>
 8003b56:	68ac      	ldr	r4, [r5, #8]
 8003b58:	e7eb      	b.n	8003b32 <__swsetup_r+0x1e>
 8003b5a:	4b24      	ldr	r3, [pc, #144]	; (8003bec <__swsetup_r+0xd8>)
 8003b5c:	429c      	cmp	r4, r3
 8003b5e:	bf08      	it	eq
 8003b60:	68ec      	ldreq	r4, [r5, #12]
 8003b62:	e7e6      	b.n	8003b32 <__swsetup_r+0x1e>
 8003b64:	0751      	lsls	r1, r2, #29
 8003b66:	d512      	bpl.n	8003b8e <__swsetup_r+0x7a>
 8003b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b6a:	b141      	cbz	r1, 8003b7e <__swsetup_r+0x6a>
 8003b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b70:	4299      	cmp	r1, r3
 8003b72:	d002      	beq.n	8003b7a <__swsetup_r+0x66>
 8003b74:	4630      	mov	r0, r6
 8003b76:	f000 fa19 	bl	8003fac <_free_r>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	6363      	str	r3, [r4, #52]	; 0x34
 8003b7e:	89a3      	ldrh	r3, [r4, #12]
 8003b80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b84:	81a3      	strh	r3, [r4, #12]
 8003b86:	2300      	movs	r3, #0
 8003b88:	6063      	str	r3, [r4, #4]
 8003b8a:	6923      	ldr	r3, [r4, #16]
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	f043 0308 	orr.w	r3, r3, #8
 8003b94:	81a3      	strh	r3, [r4, #12]
 8003b96:	6923      	ldr	r3, [r4, #16]
 8003b98:	b94b      	cbnz	r3, 8003bae <__swsetup_r+0x9a>
 8003b9a:	89a3      	ldrh	r3, [r4, #12]
 8003b9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ba4:	d003      	beq.n	8003bae <__swsetup_r+0x9a>
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	4630      	mov	r0, r6
 8003baa:	f000 f9bf 	bl	8003f2c <__smakebuf_r>
 8003bae:	89a2      	ldrh	r2, [r4, #12]
 8003bb0:	f012 0301 	ands.w	r3, r2, #1
 8003bb4:	d00c      	beq.n	8003bd0 <__swsetup_r+0xbc>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60a3      	str	r3, [r4, #8]
 8003bba:	6963      	ldr	r3, [r4, #20]
 8003bbc:	425b      	negs	r3, r3
 8003bbe:	61a3      	str	r3, [r4, #24]
 8003bc0:	6923      	ldr	r3, [r4, #16]
 8003bc2:	b953      	cbnz	r3, 8003bda <__swsetup_r+0xc6>
 8003bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bc8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003bcc:	d1ba      	bne.n	8003b44 <__swsetup_r+0x30>
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
 8003bd0:	0792      	lsls	r2, r2, #30
 8003bd2:	bf58      	it	pl
 8003bd4:	6963      	ldrpl	r3, [r4, #20]
 8003bd6:	60a3      	str	r3, [r4, #8]
 8003bd8:	e7f2      	b.n	8003bc0 <__swsetup_r+0xac>
 8003bda:	2000      	movs	r0, #0
 8003bdc:	e7f7      	b.n	8003bce <__swsetup_r+0xba>
 8003bde:	bf00      	nop
 8003be0:	2000000c 	.word	0x2000000c
 8003be4:	08004910 	.word	0x08004910
 8003be8:	08004930 	.word	0x08004930
 8003bec:	080048f0 	.word	0x080048f0

08003bf0 <__sflush_r>:
 8003bf0:	898a      	ldrh	r2, [r1, #12]
 8003bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf6:	4605      	mov	r5, r0
 8003bf8:	0710      	lsls	r0, r2, #28
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	d458      	bmi.n	8003cb0 <__sflush_r+0xc0>
 8003bfe:	684b      	ldr	r3, [r1, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	dc05      	bgt.n	8003c10 <__sflush_r+0x20>
 8003c04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	dc02      	bgt.n	8003c10 <__sflush_r+0x20>
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c12:	2e00      	cmp	r6, #0
 8003c14:	d0f9      	beq.n	8003c0a <__sflush_r+0x1a>
 8003c16:	2300      	movs	r3, #0
 8003c18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c1c:	682f      	ldr	r7, [r5, #0]
 8003c1e:	6a21      	ldr	r1, [r4, #32]
 8003c20:	602b      	str	r3, [r5, #0]
 8003c22:	d032      	beq.n	8003c8a <__sflush_r+0x9a>
 8003c24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c26:	89a3      	ldrh	r3, [r4, #12]
 8003c28:	075a      	lsls	r2, r3, #29
 8003c2a:	d505      	bpl.n	8003c38 <__sflush_r+0x48>
 8003c2c:	6863      	ldr	r3, [r4, #4]
 8003c2e:	1ac0      	subs	r0, r0, r3
 8003c30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c32:	b10b      	cbz	r3, 8003c38 <__sflush_r+0x48>
 8003c34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c36:	1ac0      	subs	r0, r0, r3
 8003c38:	2300      	movs	r3, #0
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c3e:	6a21      	ldr	r1, [r4, #32]
 8003c40:	4628      	mov	r0, r5
 8003c42:	47b0      	blx	r6
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	89a3      	ldrh	r3, [r4, #12]
 8003c48:	d106      	bne.n	8003c58 <__sflush_r+0x68>
 8003c4a:	6829      	ldr	r1, [r5, #0]
 8003c4c:	291d      	cmp	r1, #29
 8003c4e:	d848      	bhi.n	8003ce2 <__sflush_r+0xf2>
 8003c50:	4a29      	ldr	r2, [pc, #164]	; (8003cf8 <__sflush_r+0x108>)
 8003c52:	40ca      	lsrs	r2, r1
 8003c54:	07d6      	lsls	r6, r2, #31
 8003c56:	d544      	bpl.n	8003ce2 <__sflush_r+0xf2>
 8003c58:	2200      	movs	r2, #0
 8003c5a:	6062      	str	r2, [r4, #4]
 8003c5c:	6922      	ldr	r2, [r4, #16]
 8003c5e:	04d9      	lsls	r1, r3, #19
 8003c60:	6022      	str	r2, [r4, #0]
 8003c62:	d504      	bpl.n	8003c6e <__sflush_r+0x7e>
 8003c64:	1c42      	adds	r2, r0, #1
 8003c66:	d101      	bne.n	8003c6c <__sflush_r+0x7c>
 8003c68:	682b      	ldr	r3, [r5, #0]
 8003c6a:	b903      	cbnz	r3, 8003c6e <__sflush_r+0x7e>
 8003c6c:	6560      	str	r0, [r4, #84]	; 0x54
 8003c6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c70:	602f      	str	r7, [r5, #0]
 8003c72:	2900      	cmp	r1, #0
 8003c74:	d0c9      	beq.n	8003c0a <__sflush_r+0x1a>
 8003c76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c7a:	4299      	cmp	r1, r3
 8003c7c:	d002      	beq.n	8003c84 <__sflush_r+0x94>
 8003c7e:	4628      	mov	r0, r5
 8003c80:	f000 f994 	bl	8003fac <_free_r>
 8003c84:	2000      	movs	r0, #0
 8003c86:	6360      	str	r0, [r4, #52]	; 0x34
 8003c88:	e7c0      	b.n	8003c0c <__sflush_r+0x1c>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	47b0      	blx	r6
 8003c90:	1c41      	adds	r1, r0, #1
 8003c92:	d1c8      	bne.n	8003c26 <__sflush_r+0x36>
 8003c94:	682b      	ldr	r3, [r5, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0c5      	beq.n	8003c26 <__sflush_r+0x36>
 8003c9a:	2b1d      	cmp	r3, #29
 8003c9c:	d001      	beq.n	8003ca2 <__sflush_r+0xb2>
 8003c9e:	2b16      	cmp	r3, #22
 8003ca0:	d101      	bne.n	8003ca6 <__sflush_r+0xb6>
 8003ca2:	602f      	str	r7, [r5, #0]
 8003ca4:	e7b1      	b.n	8003c0a <__sflush_r+0x1a>
 8003ca6:	89a3      	ldrh	r3, [r4, #12]
 8003ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cac:	81a3      	strh	r3, [r4, #12]
 8003cae:	e7ad      	b.n	8003c0c <__sflush_r+0x1c>
 8003cb0:	690f      	ldr	r7, [r1, #16]
 8003cb2:	2f00      	cmp	r7, #0
 8003cb4:	d0a9      	beq.n	8003c0a <__sflush_r+0x1a>
 8003cb6:	0793      	lsls	r3, r2, #30
 8003cb8:	bf18      	it	ne
 8003cba:	2300      	movne	r3, #0
 8003cbc:	680e      	ldr	r6, [r1, #0]
 8003cbe:	bf08      	it	eq
 8003cc0:	694b      	ldreq	r3, [r1, #20]
 8003cc2:	eba6 0807 	sub.w	r8, r6, r7
 8003cc6:	600f      	str	r7, [r1, #0]
 8003cc8:	608b      	str	r3, [r1, #8]
 8003cca:	f1b8 0f00 	cmp.w	r8, #0
 8003cce:	dd9c      	ble.n	8003c0a <__sflush_r+0x1a>
 8003cd0:	4643      	mov	r3, r8
 8003cd2:	463a      	mov	r2, r7
 8003cd4:	6a21      	ldr	r1, [r4, #32]
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003cda:	47b0      	blx	r6
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	dc06      	bgt.n	8003cee <__sflush_r+0xfe>
 8003ce0:	89a3      	ldrh	r3, [r4, #12]
 8003ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce6:	81a3      	strh	r3, [r4, #12]
 8003ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cec:	e78e      	b.n	8003c0c <__sflush_r+0x1c>
 8003cee:	4407      	add	r7, r0
 8003cf0:	eba8 0800 	sub.w	r8, r8, r0
 8003cf4:	e7e9      	b.n	8003cca <__sflush_r+0xda>
 8003cf6:	bf00      	nop
 8003cf8:	20400001 	.word	0x20400001

08003cfc <_fflush_r>:
 8003cfc:	b538      	push	{r3, r4, r5, lr}
 8003cfe:	690b      	ldr	r3, [r1, #16]
 8003d00:	4605      	mov	r5, r0
 8003d02:	460c      	mov	r4, r1
 8003d04:	b1db      	cbz	r3, 8003d3e <_fflush_r+0x42>
 8003d06:	b118      	cbz	r0, 8003d10 <_fflush_r+0x14>
 8003d08:	6983      	ldr	r3, [r0, #24]
 8003d0a:	b90b      	cbnz	r3, 8003d10 <_fflush_r+0x14>
 8003d0c:	f000 f860 	bl	8003dd0 <__sinit>
 8003d10:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <_fflush_r+0x48>)
 8003d12:	429c      	cmp	r4, r3
 8003d14:	d109      	bne.n	8003d2a <_fflush_r+0x2e>
 8003d16:	686c      	ldr	r4, [r5, #4]
 8003d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d1c:	b17b      	cbz	r3, 8003d3e <_fflush_r+0x42>
 8003d1e:	4621      	mov	r1, r4
 8003d20:	4628      	mov	r0, r5
 8003d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d26:	f7ff bf63 	b.w	8003bf0 <__sflush_r>
 8003d2a:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <_fflush_r+0x4c>)
 8003d2c:	429c      	cmp	r4, r3
 8003d2e:	d101      	bne.n	8003d34 <_fflush_r+0x38>
 8003d30:	68ac      	ldr	r4, [r5, #8]
 8003d32:	e7f1      	b.n	8003d18 <_fflush_r+0x1c>
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <_fflush_r+0x50>)
 8003d36:	429c      	cmp	r4, r3
 8003d38:	bf08      	it	eq
 8003d3a:	68ec      	ldreq	r4, [r5, #12]
 8003d3c:	e7ec      	b.n	8003d18 <_fflush_r+0x1c>
 8003d3e:	2000      	movs	r0, #0
 8003d40:	bd38      	pop	{r3, r4, r5, pc}
 8003d42:	bf00      	nop
 8003d44:	08004910 	.word	0x08004910
 8003d48:	08004930 	.word	0x08004930
 8003d4c:	080048f0 	.word	0x080048f0

08003d50 <std>:
 8003d50:	2300      	movs	r3, #0
 8003d52:	b510      	push	{r4, lr}
 8003d54:	4604      	mov	r4, r0
 8003d56:	e9c0 3300 	strd	r3, r3, [r0]
 8003d5a:	6083      	str	r3, [r0, #8]
 8003d5c:	8181      	strh	r1, [r0, #12]
 8003d5e:	6643      	str	r3, [r0, #100]	; 0x64
 8003d60:	81c2      	strh	r2, [r0, #14]
 8003d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d66:	6183      	str	r3, [r0, #24]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	305c      	adds	r0, #92	; 0x5c
 8003d6e:	f7ff fdfb 	bl	8003968 <memset>
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <std+0x38>)
 8003d74:	6224      	str	r4, [r4, #32]
 8003d76:	6263      	str	r3, [r4, #36]	; 0x24
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <std+0x3c>)
 8003d7a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <std+0x40>)
 8003d7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d80:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <std+0x44>)
 8003d82:	6323      	str	r3, [r4, #48]	; 0x30
 8003d84:	bd10      	pop	{r4, pc}
 8003d86:	bf00      	nop
 8003d88:	080046a5 	.word	0x080046a5
 8003d8c:	080046c7 	.word	0x080046c7
 8003d90:	080046ff 	.word	0x080046ff
 8003d94:	08004723 	.word	0x08004723

08003d98 <_cleanup_r>:
 8003d98:	4901      	ldr	r1, [pc, #4]	; (8003da0 <_cleanup_r+0x8>)
 8003d9a:	f000 b885 	b.w	8003ea8 <_fwalk_reent>
 8003d9e:	bf00      	nop
 8003da0:	08003cfd 	.word	0x08003cfd

08003da4 <__sfmoreglue>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	2568      	movs	r5, #104	; 0x68
 8003da8:	1e4a      	subs	r2, r1, #1
 8003daa:	4355      	muls	r5, r2
 8003dac:	460e      	mov	r6, r1
 8003dae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003db2:	f000 f947 	bl	8004044 <_malloc_r>
 8003db6:	4604      	mov	r4, r0
 8003db8:	b140      	cbz	r0, 8003dcc <__sfmoreglue+0x28>
 8003dba:	2100      	movs	r1, #0
 8003dbc:	e9c0 1600 	strd	r1, r6, [r0]
 8003dc0:	300c      	adds	r0, #12
 8003dc2:	60a0      	str	r0, [r4, #8]
 8003dc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003dc8:	f7ff fdce 	bl	8003968 <memset>
 8003dcc:	4620      	mov	r0, r4
 8003dce:	bd70      	pop	{r4, r5, r6, pc}

08003dd0 <__sinit>:
 8003dd0:	6983      	ldr	r3, [r0, #24]
 8003dd2:	b510      	push	{r4, lr}
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	bb33      	cbnz	r3, 8003e26 <__sinit+0x56>
 8003dd8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003ddc:	6503      	str	r3, [r0, #80]	; 0x50
 8003dde:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <__sinit+0x58>)
 8003de0:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <__sinit+0x5c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6282      	str	r2, [r0, #40]	; 0x28
 8003de6:	4298      	cmp	r0, r3
 8003de8:	bf04      	itt	eq
 8003dea:	2301      	moveq	r3, #1
 8003dec:	6183      	streq	r3, [r0, #24]
 8003dee:	f000 f81f 	bl	8003e30 <__sfp>
 8003df2:	6060      	str	r0, [r4, #4]
 8003df4:	4620      	mov	r0, r4
 8003df6:	f000 f81b 	bl	8003e30 <__sfp>
 8003dfa:	60a0      	str	r0, [r4, #8]
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f000 f817 	bl	8003e30 <__sfp>
 8003e02:	2200      	movs	r2, #0
 8003e04:	60e0      	str	r0, [r4, #12]
 8003e06:	2104      	movs	r1, #4
 8003e08:	6860      	ldr	r0, [r4, #4]
 8003e0a:	f7ff ffa1 	bl	8003d50 <std>
 8003e0e:	2201      	movs	r2, #1
 8003e10:	2109      	movs	r1, #9
 8003e12:	68a0      	ldr	r0, [r4, #8]
 8003e14:	f7ff ff9c 	bl	8003d50 <std>
 8003e18:	2202      	movs	r2, #2
 8003e1a:	2112      	movs	r1, #18
 8003e1c:	68e0      	ldr	r0, [r4, #12]
 8003e1e:	f7ff ff97 	bl	8003d50 <std>
 8003e22:	2301      	movs	r3, #1
 8003e24:	61a3      	str	r3, [r4, #24]
 8003e26:	bd10      	pop	{r4, pc}
 8003e28:	080048ec 	.word	0x080048ec
 8003e2c:	08003d99 	.word	0x08003d99

08003e30 <__sfp>:
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <__sfp+0x70>)
 8003e34:	4607      	mov	r7, r0
 8003e36:	681e      	ldr	r6, [r3, #0]
 8003e38:	69b3      	ldr	r3, [r6, #24]
 8003e3a:	b913      	cbnz	r3, 8003e42 <__sfp+0x12>
 8003e3c:	4630      	mov	r0, r6
 8003e3e:	f7ff ffc7 	bl	8003dd0 <__sinit>
 8003e42:	3648      	adds	r6, #72	; 0x48
 8003e44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	d503      	bpl.n	8003e54 <__sfp+0x24>
 8003e4c:	6833      	ldr	r3, [r6, #0]
 8003e4e:	b133      	cbz	r3, 8003e5e <__sfp+0x2e>
 8003e50:	6836      	ldr	r6, [r6, #0]
 8003e52:	e7f7      	b.n	8003e44 <__sfp+0x14>
 8003e54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e58:	b16d      	cbz	r5, 8003e76 <__sfp+0x46>
 8003e5a:	3468      	adds	r4, #104	; 0x68
 8003e5c:	e7f4      	b.n	8003e48 <__sfp+0x18>
 8003e5e:	2104      	movs	r1, #4
 8003e60:	4638      	mov	r0, r7
 8003e62:	f7ff ff9f 	bl	8003da4 <__sfmoreglue>
 8003e66:	6030      	str	r0, [r6, #0]
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d1f1      	bne.n	8003e50 <__sfp+0x20>
 8003e6c:	230c      	movs	r3, #12
 8003e6e:	4604      	mov	r4, r0
 8003e70:	603b      	str	r3, [r7, #0]
 8003e72:	4620      	mov	r0, r4
 8003e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e76:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <__sfp+0x74>)
 8003e78:	6665      	str	r5, [r4, #100]	; 0x64
 8003e7a:	e9c4 5500 	strd	r5, r5, [r4]
 8003e7e:	60a5      	str	r5, [r4, #8]
 8003e80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003e84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003e88:	2208      	movs	r2, #8
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e90:	f7ff fd6a 	bl	8003968 <memset>
 8003e94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e9c:	e7e9      	b.n	8003e72 <__sfp+0x42>
 8003e9e:	bf00      	nop
 8003ea0:	080048ec 	.word	0x080048ec
 8003ea4:	ffff0001 	.word	0xffff0001

08003ea8 <_fwalk_reent>:
 8003ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003eac:	4680      	mov	r8, r0
 8003eae:	4689      	mov	r9, r1
 8003eb0:	2600      	movs	r6, #0
 8003eb2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003eb6:	b914      	cbnz	r4, 8003ebe <_fwalk_reent+0x16>
 8003eb8:	4630      	mov	r0, r6
 8003eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ebe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003ec2:	3f01      	subs	r7, #1
 8003ec4:	d501      	bpl.n	8003eca <_fwalk_reent+0x22>
 8003ec6:	6824      	ldr	r4, [r4, #0]
 8003ec8:	e7f5      	b.n	8003eb6 <_fwalk_reent+0xe>
 8003eca:	89ab      	ldrh	r3, [r5, #12]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d907      	bls.n	8003ee0 <_fwalk_reent+0x38>
 8003ed0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	d003      	beq.n	8003ee0 <_fwalk_reent+0x38>
 8003ed8:	4629      	mov	r1, r5
 8003eda:	4640      	mov	r0, r8
 8003edc:	47c8      	blx	r9
 8003ede:	4306      	orrs	r6, r0
 8003ee0:	3568      	adds	r5, #104	; 0x68
 8003ee2:	e7ee      	b.n	8003ec2 <_fwalk_reent+0x1a>

08003ee4 <__swhatbuf_r>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	460e      	mov	r6, r1
 8003ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eec:	b096      	sub	sp, #88	; 0x58
 8003eee:	2900      	cmp	r1, #0
 8003ef0:	4614      	mov	r4, r2
 8003ef2:	461d      	mov	r5, r3
 8003ef4:	da07      	bge.n	8003f06 <__swhatbuf_r+0x22>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	602b      	str	r3, [r5, #0]
 8003efa:	89b3      	ldrh	r3, [r6, #12]
 8003efc:	061a      	lsls	r2, r3, #24
 8003efe:	d410      	bmi.n	8003f22 <__swhatbuf_r+0x3e>
 8003f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f04:	e00e      	b.n	8003f24 <__swhatbuf_r+0x40>
 8003f06:	466a      	mov	r2, sp
 8003f08:	f000 fc32 	bl	8004770 <_fstat_r>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	dbf2      	blt.n	8003ef6 <__swhatbuf_r+0x12>
 8003f10:	9a01      	ldr	r2, [sp, #4]
 8003f12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f1a:	425a      	negs	r2, r3
 8003f1c:	415a      	adcs	r2, r3
 8003f1e:	602a      	str	r2, [r5, #0]
 8003f20:	e7ee      	b.n	8003f00 <__swhatbuf_r+0x1c>
 8003f22:	2340      	movs	r3, #64	; 0x40
 8003f24:	2000      	movs	r0, #0
 8003f26:	6023      	str	r3, [r4, #0]
 8003f28:	b016      	add	sp, #88	; 0x58
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}

08003f2c <__smakebuf_r>:
 8003f2c:	898b      	ldrh	r3, [r1, #12]
 8003f2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f30:	079d      	lsls	r5, r3, #30
 8003f32:	4606      	mov	r6, r0
 8003f34:	460c      	mov	r4, r1
 8003f36:	d507      	bpl.n	8003f48 <__smakebuf_r+0x1c>
 8003f38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	6123      	str	r3, [r4, #16]
 8003f40:	2301      	movs	r3, #1
 8003f42:	6163      	str	r3, [r4, #20]
 8003f44:	b002      	add	sp, #8
 8003f46:	bd70      	pop	{r4, r5, r6, pc}
 8003f48:	ab01      	add	r3, sp, #4
 8003f4a:	466a      	mov	r2, sp
 8003f4c:	f7ff ffca 	bl	8003ee4 <__swhatbuf_r>
 8003f50:	9900      	ldr	r1, [sp, #0]
 8003f52:	4605      	mov	r5, r0
 8003f54:	4630      	mov	r0, r6
 8003f56:	f000 f875 	bl	8004044 <_malloc_r>
 8003f5a:	b948      	cbnz	r0, 8003f70 <__smakebuf_r+0x44>
 8003f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f60:	059a      	lsls	r2, r3, #22
 8003f62:	d4ef      	bmi.n	8003f44 <__smakebuf_r+0x18>
 8003f64:	f023 0303 	bic.w	r3, r3, #3
 8003f68:	f043 0302 	orr.w	r3, r3, #2
 8003f6c:	81a3      	strh	r3, [r4, #12]
 8003f6e:	e7e3      	b.n	8003f38 <__smakebuf_r+0xc>
 8003f70:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <__smakebuf_r+0x7c>)
 8003f72:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	6020      	str	r0, [r4, #0]
 8003f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7c:	81a3      	strh	r3, [r4, #12]
 8003f7e:	9b00      	ldr	r3, [sp, #0]
 8003f80:	6120      	str	r0, [r4, #16]
 8003f82:	6163      	str	r3, [r4, #20]
 8003f84:	9b01      	ldr	r3, [sp, #4]
 8003f86:	b15b      	cbz	r3, 8003fa0 <__smakebuf_r+0x74>
 8003f88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f000 fc01 	bl	8004794 <_isatty_r>
 8003f92:	b128      	cbz	r0, 8003fa0 <__smakebuf_r+0x74>
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	81a3      	strh	r3, [r4, #12]
 8003fa0:	89a3      	ldrh	r3, [r4, #12]
 8003fa2:	431d      	orrs	r5, r3
 8003fa4:	81a5      	strh	r5, [r4, #12]
 8003fa6:	e7cd      	b.n	8003f44 <__smakebuf_r+0x18>
 8003fa8:	08003d99 	.word	0x08003d99

08003fac <_free_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4605      	mov	r5, r0
 8003fb0:	2900      	cmp	r1, #0
 8003fb2:	d043      	beq.n	800403c <_free_r+0x90>
 8003fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fb8:	1f0c      	subs	r4, r1, #4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bfb8      	it	lt
 8003fbe:	18e4      	addlt	r4, r4, r3
 8003fc0:	f000 fc18 	bl	80047f4 <__malloc_lock>
 8003fc4:	4a1e      	ldr	r2, [pc, #120]	; (8004040 <_free_r+0x94>)
 8003fc6:	6813      	ldr	r3, [r2, #0]
 8003fc8:	4610      	mov	r0, r2
 8003fca:	b933      	cbnz	r3, 8003fda <_free_r+0x2e>
 8003fcc:	6063      	str	r3, [r4, #4]
 8003fce:	6014      	str	r4, [r2, #0]
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fd6:	f000 bc0e 	b.w	80047f6 <__malloc_unlock>
 8003fda:	42a3      	cmp	r3, r4
 8003fdc:	d90b      	bls.n	8003ff6 <_free_r+0x4a>
 8003fde:	6821      	ldr	r1, [r4, #0]
 8003fe0:	1862      	adds	r2, r4, r1
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	bf01      	itttt	eq
 8003fe6:	681a      	ldreq	r2, [r3, #0]
 8003fe8:	685b      	ldreq	r3, [r3, #4]
 8003fea:	1852      	addeq	r2, r2, r1
 8003fec:	6022      	streq	r2, [r4, #0]
 8003fee:	6063      	str	r3, [r4, #4]
 8003ff0:	6004      	str	r4, [r0, #0]
 8003ff2:	e7ed      	b.n	8003fd0 <_free_r+0x24>
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	b10a      	cbz	r2, 8003ffe <_free_r+0x52>
 8003ffa:	42a2      	cmp	r2, r4
 8003ffc:	d9fa      	bls.n	8003ff4 <_free_r+0x48>
 8003ffe:	6819      	ldr	r1, [r3, #0]
 8004000:	1858      	adds	r0, r3, r1
 8004002:	42a0      	cmp	r0, r4
 8004004:	d10b      	bne.n	800401e <_free_r+0x72>
 8004006:	6820      	ldr	r0, [r4, #0]
 8004008:	4401      	add	r1, r0
 800400a:	1858      	adds	r0, r3, r1
 800400c:	4282      	cmp	r2, r0
 800400e:	6019      	str	r1, [r3, #0]
 8004010:	d1de      	bne.n	8003fd0 <_free_r+0x24>
 8004012:	6810      	ldr	r0, [r2, #0]
 8004014:	6852      	ldr	r2, [r2, #4]
 8004016:	4401      	add	r1, r0
 8004018:	6019      	str	r1, [r3, #0]
 800401a:	605a      	str	r2, [r3, #4]
 800401c:	e7d8      	b.n	8003fd0 <_free_r+0x24>
 800401e:	d902      	bls.n	8004026 <_free_r+0x7a>
 8004020:	230c      	movs	r3, #12
 8004022:	602b      	str	r3, [r5, #0]
 8004024:	e7d4      	b.n	8003fd0 <_free_r+0x24>
 8004026:	6820      	ldr	r0, [r4, #0]
 8004028:	1821      	adds	r1, r4, r0
 800402a:	428a      	cmp	r2, r1
 800402c:	bf01      	itttt	eq
 800402e:	6811      	ldreq	r1, [r2, #0]
 8004030:	6852      	ldreq	r2, [r2, #4]
 8004032:	1809      	addeq	r1, r1, r0
 8004034:	6021      	streq	r1, [r4, #0]
 8004036:	6062      	str	r2, [r4, #4]
 8004038:	605c      	str	r4, [r3, #4]
 800403a:	e7c9      	b.n	8003fd0 <_free_r+0x24>
 800403c:	bd38      	pop	{r3, r4, r5, pc}
 800403e:	bf00      	nop
 8004040:	20000090 	.word	0x20000090

08004044 <_malloc_r>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	1ccd      	adds	r5, r1, #3
 8004048:	f025 0503 	bic.w	r5, r5, #3
 800404c:	3508      	adds	r5, #8
 800404e:	2d0c      	cmp	r5, #12
 8004050:	bf38      	it	cc
 8004052:	250c      	movcc	r5, #12
 8004054:	2d00      	cmp	r5, #0
 8004056:	4606      	mov	r6, r0
 8004058:	db01      	blt.n	800405e <_malloc_r+0x1a>
 800405a:	42a9      	cmp	r1, r5
 800405c:	d903      	bls.n	8004066 <_malloc_r+0x22>
 800405e:	230c      	movs	r3, #12
 8004060:	6033      	str	r3, [r6, #0]
 8004062:	2000      	movs	r0, #0
 8004064:	bd70      	pop	{r4, r5, r6, pc}
 8004066:	f000 fbc5 	bl	80047f4 <__malloc_lock>
 800406a:	4a21      	ldr	r2, [pc, #132]	; (80040f0 <_malloc_r+0xac>)
 800406c:	6814      	ldr	r4, [r2, #0]
 800406e:	4621      	mov	r1, r4
 8004070:	b991      	cbnz	r1, 8004098 <_malloc_r+0x54>
 8004072:	4c20      	ldr	r4, [pc, #128]	; (80040f4 <_malloc_r+0xb0>)
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	b91b      	cbnz	r3, 8004080 <_malloc_r+0x3c>
 8004078:	4630      	mov	r0, r6
 800407a:	f000 fb03 	bl	8004684 <_sbrk_r>
 800407e:	6020      	str	r0, [r4, #0]
 8004080:	4629      	mov	r1, r5
 8004082:	4630      	mov	r0, r6
 8004084:	f000 fafe 	bl	8004684 <_sbrk_r>
 8004088:	1c43      	adds	r3, r0, #1
 800408a:	d124      	bne.n	80040d6 <_malloc_r+0x92>
 800408c:	230c      	movs	r3, #12
 800408e:	4630      	mov	r0, r6
 8004090:	6033      	str	r3, [r6, #0]
 8004092:	f000 fbb0 	bl	80047f6 <__malloc_unlock>
 8004096:	e7e4      	b.n	8004062 <_malloc_r+0x1e>
 8004098:	680b      	ldr	r3, [r1, #0]
 800409a:	1b5b      	subs	r3, r3, r5
 800409c:	d418      	bmi.n	80040d0 <_malloc_r+0x8c>
 800409e:	2b0b      	cmp	r3, #11
 80040a0:	d90f      	bls.n	80040c2 <_malloc_r+0x7e>
 80040a2:	600b      	str	r3, [r1, #0]
 80040a4:	18cc      	adds	r4, r1, r3
 80040a6:	50cd      	str	r5, [r1, r3]
 80040a8:	4630      	mov	r0, r6
 80040aa:	f000 fba4 	bl	80047f6 <__malloc_unlock>
 80040ae:	f104 000b 	add.w	r0, r4, #11
 80040b2:	1d23      	adds	r3, r4, #4
 80040b4:	f020 0007 	bic.w	r0, r0, #7
 80040b8:	1ac3      	subs	r3, r0, r3
 80040ba:	d0d3      	beq.n	8004064 <_malloc_r+0x20>
 80040bc:	425a      	negs	r2, r3
 80040be:	50e2      	str	r2, [r4, r3]
 80040c0:	e7d0      	b.n	8004064 <_malloc_r+0x20>
 80040c2:	684b      	ldr	r3, [r1, #4]
 80040c4:	428c      	cmp	r4, r1
 80040c6:	bf16      	itet	ne
 80040c8:	6063      	strne	r3, [r4, #4]
 80040ca:	6013      	streq	r3, [r2, #0]
 80040cc:	460c      	movne	r4, r1
 80040ce:	e7eb      	b.n	80040a8 <_malloc_r+0x64>
 80040d0:	460c      	mov	r4, r1
 80040d2:	6849      	ldr	r1, [r1, #4]
 80040d4:	e7cc      	b.n	8004070 <_malloc_r+0x2c>
 80040d6:	1cc4      	adds	r4, r0, #3
 80040d8:	f024 0403 	bic.w	r4, r4, #3
 80040dc:	42a0      	cmp	r0, r4
 80040de:	d005      	beq.n	80040ec <_malloc_r+0xa8>
 80040e0:	1a21      	subs	r1, r4, r0
 80040e2:	4630      	mov	r0, r6
 80040e4:	f000 face 	bl	8004684 <_sbrk_r>
 80040e8:	3001      	adds	r0, #1
 80040ea:	d0cf      	beq.n	800408c <_malloc_r+0x48>
 80040ec:	6025      	str	r5, [r4, #0]
 80040ee:	e7db      	b.n	80040a8 <_malloc_r+0x64>
 80040f0:	20000090 	.word	0x20000090
 80040f4:	20000094 	.word	0x20000094

080040f8 <__sfputc_r>:
 80040f8:	6893      	ldr	r3, [r2, #8]
 80040fa:	b410      	push	{r4}
 80040fc:	3b01      	subs	r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	6093      	str	r3, [r2, #8]
 8004102:	da07      	bge.n	8004114 <__sfputc_r+0x1c>
 8004104:	6994      	ldr	r4, [r2, #24]
 8004106:	42a3      	cmp	r3, r4
 8004108:	db01      	blt.n	800410e <__sfputc_r+0x16>
 800410a:	290a      	cmp	r1, #10
 800410c:	d102      	bne.n	8004114 <__sfputc_r+0x1c>
 800410e:	bc10      	pop	{r4}
 8004110:	f7ff bcae 	b.w	8003a70 <__swbuf_r>
 8004114:	6813      	ldr	r3, [r2, #0]
 8004116:	1c58      	adds	r0, r3, #1
 8004118:	6010      	str	r0, [r2, #0]
 800411a:	7019      	strb	r1, [r3, #0]
 800411c:	4608      	mov	r0, r1
 800411e:	bc10      	pop	{r4}
 8004120:	4770      	bx	lr

08004122 <__sfputs_r>:
 8004122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004124:	4606      	mov	r6, r0
 8004126:	460f      	mov	r7, r1
 8004128:	4614      	mov	r4, r2
 800412a:	18d5      	adds	r5, r2, r3
 800412c:	42ac      	cmp	r4, r5
 800412e:	d101      	bne.n	8004134 <__sfputs_r+0x12>
 8004130:	2000      	movs	r0, #0
 8004132:	e007      	b.n	8004144 <__sfputs_r+0x22>
 8004134:	463a      	mov	r2, r7
 8004136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800413a:	4630      	mov	r0, r6
 800413c:	f7ff ffdc 	bl	80040f8 <__sfputc_r>
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	d1f3      	bne.n	800412c <__sfputs_r+0xa>
 8004144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004148 <_vfiprintf_r>:
 8004148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414c:	460c      	mov	r4, r1
 800414e:	b09d      	sub	sp, #116	; 0x74
 8004150:	4617      	mov	r7, r2
 8004152:	461d      	mov	r5, r3
 8004154:	4606      	mov	r6, r0
 8004156:	b118      	cbz	r0, 8004160 <_vfiprintf_r+0x18>
 8004158:	6983      	ldr	r3, [r0, #24]
 800415a:	b90b      	cbnz	r3, 8004160 <_vfiprintf_r+0x18>
 800415c:	f7ff fe38 	bl	8003dd0 <__sinit>
 8004160:	4b7c      	ldr	r3, [pc, #496]	; (8004354 <_vfiprintf_r+0x20c>)
 8004162:	429c      	cmp	r4, r3
 8004164:	d158      	bne.n	8004218 <_vfiprintf_r+0xd0>
 8004166:	6874      	ldr	r4, [r6, #4]
 8004168:	89a3      	ldrh	r3, [r4, #12]
 800416a:	0718      	lsls	r0, r3, #28
 800416c:	d55e      	bpl.n	800422c <_vfiprintf_r+0xe4>
 800416e:	6923      	ldr	r3, [r4, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d05b      	beq.n	800422c <_vfiprintf_r+0xe4>
 8004174:	2300      	movs	r3, #0
 8004176:	9309      	str	r3, [sp, #36]	; 0x24
 8004178:	2320      	movs	r3, #32
 800417a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800417e:	2330      	movs	r3, #48	; 0x30
 8004180:	f04f 0b01 	mov.w	fp, #1
 8004184:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004188:	9503      	str	r5, [sp, #12]
 800418a:	46b8      	mov	r8, r7
 800418c:	4645      	mov	r5, r8
 800418e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004192:	b10b      	cbz	r3, 8004198 <_vfiprintf_r+0x50>
 8004194:	2b25      	cmp	r3, #37	; 0x25
 8004196:	d154      	bne.n	8004242 <_vfiprintf_r+0xfa>
 8004198:	ebb8 0a07 	subs.w	sl, r8, r7
 800419c:	d00b      	beq.n	80041b6 <_vfiprintf_r+0x6e>
 800419e:	4653      	mov	r3, sl
 80041a0:	463a      	mov	r2, r7
 80041a2:	4621      	mov	r1, r4
 80041a4:	4630      	mov	r0, r6
 80041a6:	f7ff ffbc 	bl	8004122 <__sfputs_r>
 80041aa:	3001      	adds	r0, #1
 80041ac:	f000 80c2 	beq.w	8004334 <_vfiprintf_r+0x1ec>
 80041b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041b2:	4453      	add	r3, sl
 80041b4:	9309      	str	r3, [sp, #36]	; 0x24
 80041b6:	f898 3000 	ldrb.w	r3, [r8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80ba 	beq.w	8004334 <_vfiprintf_r+0x1ec>
 80041c0:	2300      	movs	r3, #0
 80041c2:	f04f 32ff 	mov.w	r2, #4294967295
 80041c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041ca:	9304      	str	r3, [sp, #16]
 80041cc:	9307      	str	r3, [sp, #28]
 80041ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041d2:	931a      	str	r3, [sp, #104]	; 0x68
 80041d4:	46a8      	mov	r8, r5
 80041d6:	2205      	movs	r2, #5
 80041d8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80041dc:	485e      	ldr	r0, [pc, #376]	; (8004358 <_vfiprintf_r+0x210>)
 80041de:	f000 fafb 	bl	80047d8 <memchr>
 80041e2:	9b04      	ldr	r3, [sp, #16]
 80041e4:	bb78      	cbnz	r0, 8004246 <_vfiprintf_r+0xfe>
 80041e6:	06d9      	lsls	r1, r3, #27
 80041e8:	bf44      	itt	mi
 80041ea:	2220      	movmi	r2, #32
 80041ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041f0:	071a      	lsls	r2, r3, #28
 80041f2:	bf44      	itt	mi
 80041f4:	222b      	movmi	r2, #43	; 0x2b
 80041f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041fa:	782a      	ldrb	r2, [r5, #0]
 80041fc:	2a2a      	cmp	r2, #42	; 0x2a
 80041fe:	d02a      	beq.n	8004256 <_vfiprintf_r+0x10e>
 8004200:	46a8      	mov	r8, r5
 8004202:	2000      	movs	r0, #0
 8004204:	250a      	movs	r5, #10
 8004206:	9a07      	ldr	r2, [sp, #28]
 8004208:	4641      	mov	r1, r8
 800420a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800420e:	3b30      	subs	r3, #48	; 0x30
 8004210:	2b09      	cmp	r3, #9
 8004212:	d969      	bls.n	80042e8 <_vfiprintf_r+0x1a0>
 8004214:	b360      	cbz	r0, 8004270 <_vfiprintf_r+0x128>
 8004216:	e024      	b.n	8004262 <_vfiprintf_r+0x11a>
 8004218:	4b50      	ldr	r3, [pc, #320]	; (800435c <_vfiprintf_r+0x214>)
 800421a:	429c      	cmp	r4, r3
 800421c:	d101      	bne.n	8004222 <_vfiprintf_r+0xda>
 800421e:	68b4      	ldr	r4, [r6, #8]
 8004220:	e7a2      	b.n	8004168 <_vfiprintf_r+0x20>
 8004222:	4b4f      	ldr	r3, [pc, #316]	; (8004360 <_vfiprintf_r+0x218>)
 8004224:	429c      	cmp	r4, r3
 8004226:	bf08      	it	eq
 8004228:	68f4      	ldreq	r4, [r6, #12]
 800422a:	e79d      	b.n	8004168 <_vfiprintf_r+0x20>
 800422c:	4621      	mov	r1, r4
 800422e:	4630      	mov	r0, r6
 8004230:	f7ff fc70 	bl	8003b14 <__swsetup_r>
 8004234:	2800      	cmp	r0, #0
 8004236:	d09d      	beq.n	8004174 <_vfiprintf_r+0x2c>
 8004238:	f04f 30ff 	mov.w	r0, #4294967295
 800423c:	b01d      	add	sp, #116	; 0x74
 800423e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004242:	46a8      	mov	r8, r5
 8004244:	e7a2      	b.n	800418c <_vfiprintf_r+0x44>
 8004246:	4a44      	ldr	r2, [pc, #272]	; (8004358 <_vfiprintf_r+0x210>)
 8004248:	4645      	mov	r5, r8
 800424a:	1a80      	subs	r0, r0, r2
 800424c:	fa0b f000 	lsl.w	r0, fp, r0
 8004250:	4318      	orrs	r0, r3
 8004252:	9004      	str	r0, [sp, #16]
 8004254:	e7be      	b.n	80041d4 <_vfiprintf_r+0x8c>
 8004256:	9a03      	ldr	r2, [sp, #12]
 8004258:	1d11      	adds	r1, r2, #4
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	9103      	str	r1, [sp, #12]
 800425e:	2a00      	cmp	r2, #0
 8004260:	db01      	blt.n	8004266 <_vfiprintf_r+0x11e>
 8004262:	9207      	str	r2, [sp, #28]
 8004264:	e004      	b.n	8004270 <_vfiprintf_r+0x128>
 8004266:	4252      	negs	r2, r2
 8004268:	f043 0302 	orr.w	r3, r3, #2
 800426c:	9207      	str	r2, [sp, #28]
 800426e:	9304      	str	r3, [sp, #16]
 8004270:	f898 3000 	ldrb.w	r3, [r8]
 8004274:	2b2e      	cmp	r3, #46	; 0x2e
 8004276:	d10e      	bne.n	8004296 <_vfiprintf_r+0x14e>
 8004278:	f898 3001 	ldrb.w	r3, [r8, #1]
 800427c:	2b2a      	cmp	r3, #42	; 0x2a
 800427e:	d138      	bne.n	80042f2 <_vfiprintf_r+0x1aa>
 8004280:	9b03      	ldr	r3, [sp, #12]
 8004282:	f108 0802 	add.w	r8, r8, #2
 8004286:	1d1a      	adds	r2, r3, #4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	9203      	str	r2, [sp, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	bfb8      	it	lt
 8004290:	f04f 33ff 	movlt.w	r3, #4294967295
 8004294:	9305      	str	r3, [sp, #20]
 8004296:	4d33      	ldr	r5, [pc, #204]	; (8004364 <_vfiprintf_r+0x21c>)
 8004298:	2203      	movs	r2, #3
 800429a:	f898 1000 	ldrb.w	r1, [r8]
 800429e:	4628      	mov	r0, r5
 80042a0:	f000 fa9a 	bl	80047d8 <memchr>
 80042a4:	b140      	cbz	r0, 80042b8 <_vfiprintf_r+0x170>
 80042a6:	2340      	movs	r3, #64	; 0x40
 80042a8:	1b40      	subs	r0, r0, r5
 80042aa:	fa03 f000 	lsl.w	r0, r3, r0
 80042ae:	9b04      	ldr	r3, [sp, #16]
 80042b0:	f108 0801 	add.w	r8, r8, #1
 80042b4:	4303      	orrs	r3, r0
 80042b6:	9304      	str	r3, [sp, #16]
 80042b8:	f898 1000 	ldrb.w	r1, [r8]
 80042bc:	2206      	movs	r2, #6
 80042be:	482a      	ldr	r0, [pc, #168]	; (8004368 <_vfiprintf_r+0x220>)
 80042c0:	f108 0701 	add.w	r7, r8, #1
 80042c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042c8:	f000 fa86 	bl	80047d8 <memchr>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d037      	beq.n	8004340 <_vfiprintf_r+0x1f8>
 80042d0:	4b26      	ldr	r3, [pc, #152]	; (800436c <_vfiprintf_r+0x224>)
 80042d2:	bb1b      	cbnz	r3, 800431c <_vfiprintf_r+0x1d4>
 80042d4:	9b03      	ldr	r3, [sp, #12]
 80042d6:	3307      	adds	r3, #7
 80042d8:	f023 0307 	bic.w	r3, r3, #7
 80042dc:	3308      	adds	r3, #8
 80042de:	9303      	str	r3, [sp, #12]
 80042e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e2:	444b      	add	r3, r9
 80042e4:	9309      	str	r3, [sp, #36]	; 0x24
 80042e6:	e750      	b.n	800418a <_vfiprintf_r+0x42>
 80042e8:	fb05 3202 	mla	r2, r5, r2, r3
 80042ec:	2001      	movs	r0, #1
 80042ee:	4688      	mov	r8, r1
 80042f0:	e78a      	b.n	8004208 <_vfiprintf_r+0xc0>
 80042f2:	2300      	movs	r3, #0
 80042f4:	250a      	movs	r5, #10
 80042f6:	4619      	mov	r1, r3
 80042f8:	f108 0801 	add.w	r8, r8, #1
 80042fc:	9305      	str	r3, [sp, #20]
 80042fe:	4640      	mov	r0, r8
 8004300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004304:	3a30      	subs	r2, #48	; 0x30
 8004306:	2a09      	cmp	r2, #9
 8004308:	d903      	bls.n	8004312 <_vfiprintf_r+0x1ca>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0c3      	beq.n	8004296 <_vfiprintf_r+0x14e>
 800430e:	9105      	str	r1, [sp, #20]
 8004310:	e7c1      	b.n	8004296 <_vfiprintf_r+0x14e>
 8004312:	fb05 2101 	mla	r1, r5, r1, r2
 8004316:	2301      	movs	r3, #1
 8004318:	4680      	mov	r8, r0
 800431a:	e7f0      	b.n	80042fe <_vfiprintf_r+0x1b6>
 800431c:	ab03      	add	r3, sp, #12
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	4622      	mov	r2, r4
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <_vfiprintf_r+0x228>)
 8004324:	a904      	add	r1, sp, #16
 8004326:	4630      	mov	r0, r6
 8004328:	f3af 8000 	nop.w
 800432c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004330:	4681      	mov	r9, r0
 8004332:	d1d5      	bne.n	80042e0 <_vfiprintf_r+0x198>
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	065b      	lsls	r3, r3, #25
 8004338:	f53f af7e 	bmi.w	8004238 <_vfiprintf_r+0xf0>
 800433c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800433e:	e77d      	b.n	800423c <_vfiprintf_r+0xf4>
 8004340:	ab03      	add	r3, sp, #12
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	4622      	mov	r2, r4
 8004346:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <_vfiprintf_r+0x228>)
 8004348:	a904      	add	r1, sp, #16
 800434a:	4630      	mov	r0, r6
 800434c:	f000 f888 	bl	8004460 <_printf_i>
 8004350:	e7ec      	b.n	800432c <_vfiprintf_r+0x1e4>
 8004352:	bf00      	nop
 8004354:	08004910 	.word	0x08004910
 8004358:	08004950 	.word	0x08004950
 800435c:	08004930 	.word	0x08004930
 8004360:	080048f0 	.word	0x080048f0
 8004364:	08004956 	.word	0x08004956
 8004368:	0800495a 	.word	0x0800495a
 800436c:	00000000 	.word	0x00000000
 8004370:	08004123 	.word	0x08004123

08004374 <_printf_common>:
 8004374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004378:	4691      	mov	r9, r2
 800437a:	461f      	mov	r7, r3
 800437c:	688a      	ldr	r2, [r1, #8]
 800437e:	690b      	ldr	r3, [r1, #16]
 8004380:	4606      	mov	r6, r0
 8004382:	4293      	cmp	r3, r2
 8004384:	bfb8      	it	lt
 8004386:	4613      	movlt	r3, r2
 8004388:	f8c9 3000 	str.w	r3, [r9]
 800438c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004390:	460c      	mov	r4, r1
 8004392:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004396:	b112      	cbz	r2, 800439e <_printf_common+0x2a>
 8004398:	3301      	adds	r3, #1
 800439a:	f8c9 3000 	str.w	r3, [r9]
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	0699      	lsls	r1, r3, #26
 80043a2:	bf42      	ittt	mi
 80043a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80043a8:	3302      	addmi	r3, #2
 80043aa:	f8c9 3000 	strmi.w	r3, [r9]
 80043ae:	6825      	ldr	r5, [r4, #0]
 80043b0:	f015 0506 	ands.w	r5, r5, #6
 80043b4:	d107      	bne.n	80043c6 <_printf_common+0x52>
 80043b6:	f104 0a19 	add.w	sl, r4, #25
 80043ba:	68e3      	ldr	r3, [r4, #12]
 80043bc:	f8d9 2000 	ldr.w	r2, [r9]
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	42ab      	cmp	r3, r5
 80043c4:	dc29      	bgt.n	800441a <_printf_common+0xa6>
 80043c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80043ca:	6822      	ldr	r2, [r4, #0]
 80043cc:	3300      	adds	r3, #0
 80043ce:	bf18      	it	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	0692      	lsls	r2, r2, #26
 80043d4:	d42e      	bmi.n	8004434 <_printf_common+0xc0>
 80043d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043da:	4639      	mov	r1, r7
 80043dc:	4630      	mov	r0, r6
 80043de:	47c0      	blx	r8
 80043e0:	3001      	adds	r0, #1
 80043e2:	d021      	beq.n	8004428 <_printf_common+0xb4>
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	68e5      	ldr	r5, [r4, #12]
 80043e8:	f003 0306 	and.w	r3, r3, #6
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	bf18      	it	ne
 80043f0:	2500      	movne	r5, #0
 80043f2:	f8d9 2000 	ldr.w	r2, [r9]
 80043f6:	f04f 0900 	mov.w	r9, #0
 80043fa:	bf08      	it	eq
 80043fc:	1aad      	subeq	r5, r5, r2
 80043fe:	68a3      	ldr	r3, [r4, #8]
 8004400:	6922      	ldr	r2, [r4, #16]
 8004402:	bf08      	it	eq
 8004404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004408:	4293      	cmp	r3, r2
 800440a:	bfc4      	itt	gt
 800440c:	1a9b      	subgt	r3, r3, r2
 800440e:	18ed      	addgt	r5, r5, r3
 8004410:	341a      	adds	r4, #26
 8004412:	454d      	cmp	r5, r9
 8004414:	d11a      	bne.n	800444c <_printf_common+0xd8>
 8004416:	2000      	movs	r0, #0
 8004418:	e008      	b.n	800442c <_printf_common+0xb8>
 800441a:	2301      	movs	r3, #1
 800441c:	4652      	mov	r2, sl
 800441e:	4639      	mov	r1, r7
 8004420:	4630      	mov	r0, r6
 8004422:	47c0      	blx	r8
 8004424:	3001      	adds	r0, #1
 8004426:	d103      	bne.n	8004430 <_printf_common+0xbc>
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
 800442c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004430:	3501      	adds	r5, #1
 8004432:	e7c2      	b.n	80043ba <_printf_common+0x46>
 8004434:	2030      	movs	r0, #48	; 0x30
 8004436:	18e1      	adds	r1, r4, r3
 8004438:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004442:	4422      	add	r2, r4
 8004444:	3302      	adds	r3, #2
 8004446:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800444a:	e7c4      	b.n	80043d6 <_printf_common+0x62>
 800444c:	2301      	movs	r3, #1
 800444e:	4622      	mov	r2, r4
 8004450:	4639      	mov	r1, r7
 8004452:	4630      	mov	r0, r6
 8004454:	47c0      	blx	r8
 8004456:	3001      	adds	r0, #1
 8004458:	d0e6      	beq.n	8004428 <_printf_common+0xb4>
 800445a:	f109 0901 	add.w	r9, r9, #1
 800445e:	e7d8      	b.n	8004412 <_printf_common+0x9e>

08004460 <_printf_i>:
 8004460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004464:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004468:	460c      	mov	r4, r1
 800446a:	7e09      	ldrb	r1, [r1, #24]
 800446c:	b085      	sub	sp, #20
 800446e:	296e      	cmp	r1, #110	; 0x6e
 8004470:	4617      	mov	r7, r2
 8004472:	4606      	mov	r6, r0
 8004474:	4698      	mov	r8, r3
 8004476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004478:	f000 80b3 	beq.w	80045e2 <_printf_i+0x182>
 800447c:	d822      	bhi.n	80044c4 <_printf_i+0x64>
 800447e:	2963      	cmp	r1, #99	; 0x63
 8004480:	d036      	beq.n	80044f0 <_printf_i+0x90>
 8004482:	d80a      	bhi.n	800449a <_printf_i+0x3a>
 8004484:	2900      	cmp	r1, #0
 8004486:	f000 80b9 	beq.w	80045fc <_printf_i+0x19c>
 800448a:	2958      	cmp	r1, #88	; 0x58
 800448c:	f000 8083 	beq.w	8004596 <_printf_i+0x136>
 8004490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004494:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004498:	e032      	b.n	8004500 <_printf_i+0xa0>
 800449a:	2964      	cmp	r1, #100	; 0x64
 800449c:	d001      	beq.n	80044a2 <_printf_i+0x42>
 800449e:	2969      	cmp	r1, #105	; 0x69
 80044a0:	d1f6      	bne.n	8004490 <_printf_i+0x30>
 80044a2:	6820      	ldr	r0, [r4, #0]
 80044a4:	6813      	ldr	r3, [r2, #0]
 80044a6:	0605      	lsls	r5, r0, #24
 80044a8:	f103 0104 	add.w	r1, r3, #4
 80044ac:	d52a      	bpl.n	8004504 <_printf_i+0xa4>
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6011      	str	r1, [r2, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	da03      	bge.n	80044be <_printf_i+0x5e>
 80044b6:	222d      	movs	r2, #45	; 0x2d
 80044b8:	425b      	negs	r3, r3
 80044ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80044be:	486f      	ldr	r0, [pc, #444]	; (800467c <_printf_i+0x21c>)
 80044c0:	220a      	movs	r2, #10
 80044c2:	e039      	b.n	8004538 <_printf_i+0xd8>
 80044c4:	2973      	cmp	r1, #115	; 0x73
 80044c6:	f000 809d 	beq.w	8004604 <_printf_i+0x1a4>
 80044ca:	d808      	bhi.n	80044de <_printf_i+0x7e>
 80044cc:	296f      	cmp	r1, #111	; 0x6f
 80044ce:	d020      	beq.n	8004512 <_printf_i+0xb2>
 80044d0:	2970      	cmp	r1, #112	; 0x70
 80044d2:	d1dd      	bne.n	8004490 <_printf_i+0x30>
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	f043 0320 	orr.w	r3, r3, #32
 80044da:	6023      	str	r3, [r4, #0]
 80044dc:	e003      	b.n	80044e6 <_printf_i+0x86>
 80044de:	2975      	cmp	r1, #117	; 0x75
 80044e0:	d017      	beq.n	8004512 <_printf_i+0xb2>
 80044e2:	2978      	cmp	r1, #120	; 0x78
 80044e4:	d1d4      	bne.n	8004490 <_printf_i+0x30>
 80044e6:	2378      	movs	r3, #120	; 0x78
 80044e8:	4865      	ldr	r0, [pc, #404]	; (8004680 <_printf_i+0x220>)
 80044ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044ee:	e055      	b.n	800459c <_printf_i+0x13c>
 80044f0:	6813      	ldr	r3, [r2, #0]
 80044f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f6:	1d19      	adds	r1, r3, #4
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6011      	str	r1, [r2, #0]
 80044fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004500:	2301      	movs	r3, #1
 8004502:	e08c      	b.n	800461e <_printf_i+0x1be>
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f010 0f40 	tst.w	r0, #64	; 0x40
 800450a:	6011      	str	r1, [r2, #0]
 800450c:	bf18      	it	ne
 800450e:	b21b      	sxthne	r3, r3
 8004510:	e7cf      	b.n	80044b2 <_printf_i+0x52>
 8004512:	6813      	ldr	r3, [r2, #0]
 8004514:	6825      	ldr	r5, [r4, #0]
 8004516:	1d18      	adds	r0, r3, #4
 8004518:	6010      	str	r0, [r2, #0]
 800451a:	0628      	lsls	r0, r5, #24
 800451c:	d501      	bpl.n	8004522 <_printf_i+0xc2>
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	e002      	b.n	8004528 <_printf_i+0xc8>
 8004522:	0668      	lsls	r0, r5, #25
 8004524:	d5fb      	bpl.n	800451e <_printf_i+0xbe>
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	296f      	cmp	r1, #111	; 0x6f
 800452a:	bf14      	ite	ne
 800452c:	220a      	movne	r2, #10
 800452e:	2208      	moveq	r2, #8
 8004530:	4852      	ldr	r0, [pc, #328]	; (800467c <_printf_i+0x21c>)
 8004532:	2100      	movs	r1, #0
 8004534:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004538:	6865      	ldr	r5, [r4, #4]
 800453a:	2d00      	cmp	r5, #0
 800453c:	60a5      	str	r5, [r4, #8]
 800453e:	f2c0 8095 	blt.w	800466c <_printf_i+0x20c>
 8004542:	6821      	ldr	r1, [r4, #0]
 8004544:	f021 0104 	bic.w	r1, r1, #4
 8004548:	6021      	str	r1, [r4, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d13d      	bne.n	80045ca <_printf_i+0x16a>
 800454e:	2d00      	cmp	r5, #0
 8004550:	f040 808e 	bne.w	8004670 <_printf_i+0x210>
 8004554:	4665      	mov	r5, ip
 8004556:	2a08      	cmp	r2, #8
 8004558:	d10b      	bne.n	8004572 <_printf_i+0x112>
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	07db      	lsls	r3, r3, #31
 800455e:	d508      	bpl.n	8004572 <_printf_i+0x112>
 8004560:	6923      	ldr	r3, [r4, #16]
 8004562:	6862      	ldr	r2, [r4, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	bfde      	ittt	le
 8004568:	2330      	movle	r3, #48	; 0x30
 800456a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800456e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004572:	ebac 0305 	sub.w	r3, ip, r5
 8004576:	6123      	str	r3, [r4, #16]
 8004578:	f8cd 8000 	str.w	r8, [sp]
 800457c:	463b      	mov	r3, r7
 800457e:	aa03      	add	r2, sp, #12
 8004580:	4621      	mov	r1, r4
 8004582:	4630      	mov	r0, r6
 8004584:	f7ff fef6 	bl	8004374 <_printf_common>
 8004588:	3001      	adds	r0, #1
 800458a:	d14d      	bne.n	8004628 <_printf_i+0x1c8>
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	b005      	add	sp, #20
 8004592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004596:	4839      	ldr	r0, [pc, #228]	; (800467c <_printf_i+0x21c>)
 8004598:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800459c:	6813      	ldr	r3, [r2, #0]
 800459e:	6821      	ldr	r1, [r4, #0]
 80045a0:	1d1d      	adds	r5, r3, #4
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6015      	str	r5, [r2, #0]
 80045a6:	060a      	lsls	r2, r1, #24
 80045a8:	d50b      	bpl.n	80045c2 <_printf_i+0x162>
 80045aa:	07ca      	lsls	r2, r1, #31
 80045ac:	bf44      	itt	mi
 80045ae:	f041 0120 	orrmi.w	r1, r1, #32
 80045b2:	6021      	strmi	r1, [r4, #0]
 80045b4:	b91b      	cbnz	r3, 80045be <_printf_i+0x15e>
 80045b6:	6822      	ldr	r2, [r4, #0]
 80045b8:	f022 0220 	bic.w	r2, r2, #32
 80045bc:	6022      	str	r2, [r4, #0]
 80045be:	2210      	movs	r2, #16
 80045c0:	e7b7      	b.n	8004532 <_printf_i+0xd2>
 80045c2:	064d      	lsls	r5, r1, #25
 80045c4:	bf48      	it	mi
 80045c6:	b29b      	uxthmi	r3, r3
 80045c8:	e7ef      	b.n	80045aa <_printf_i+0x14a>
 80045ca:	4665      	mov	r5, ip
 80045cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80045d0:	fb02 3311 	mls	r3, r2, r1, r3
 80045d4:	5cc3      	ldrb	r3, [r0, r3]
 80045d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80045da:	460b      	mov	r3, r1
 80045dc:	2900      	cmp	r1, #0
 80045de:	d1f5      	bne.n	80045cc <_printf_i+0x16c>
 80045e0:	e7b9      	b.n	8004556 <_printf_i+0xf6>
 80045e2:	6813      	ldr	r3, [r2, #0]
 80045e4:	6825      	ldr	r5, [r4, #0]
 80045e6:	1d18      	adds	r0, r3, #4
 80045e8:	6961      	ldr	r1, [r4, #20]
 80045ea:	6010      	str	r0, [r2, #0]
 80045ec:	0628      	lsls	r0, r5, #24
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	d501      	bpl.n	80045f6 <_printf_i+0x196>
 80045f2:	6019      	str	r1, [r3, #0]
 80045f4:	e002      	b.n	80045fc <_printf_i+0x19c>
 80045f6:	066a      	lsls	r2, r5, #25
 80045f8:	d5fb      	bpl.n	80045f2 <_printf_i+0x192>
 80045fa:	8019      	strh	r1, [r3, #0]
 80045fc:	2300      	movs	r3, #0
 80045fe:	4665      	mov	r5, ip
 8004600:	6123      	str	r3, [r4, #16]
 8004602:	e7b9      	b.n	8004578 <_printf_i+0x118>
 8004604:	6813      	ldr	r3, [r2, #0]
 8004606:	1d19      	adds	r1, r3, #4
 8004608:	6011      	str	r1, [r2, #0]
 800460a:	681d      	ldr	r5, [r3, #0]
 800460c:	6862      	ldr	r2, [r4, #4]
 800460e:	2100      	movs	r1, #0
 8004610:	4628      	mov	r0, r5
 8004612:	f000 f8e1 	bl	80047d8 <memchr>
 8004616:	b108      	cbz	r0, 800461c <_printf_i+0x1bc>
 8004618:	1b40      	subs	r0, r0, r5
 800461a:	6060      	str	r0, [r4, #4]
 800461c:	6863      	ldr	r3, [r4, #4]
 800461e:	6123      	str	r3, [r4, #16]
 8004620:	2300      	movs	r3, #0
 8004622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004626:	e7a7      	b.n	8004578 <_printf_i+0x118>
 8004628:	6923      	ldr	r3, [r4, #16]
 800462a:	462a      	mov	r2, r5
 800462c:	4639      	mov	r1, r7
 800462e:	4630      	mov	r0, r6
 8004630:	47c0      	blx	r8
 8004632:	3001      	adds	r0, #1
 8004634:	d0aa      	beq.n	800458c <_printf_i+0x12c>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	079b      	lsls	r3, r3, #30
 800463a:	d413      	bmi.n	8004664 <_printf_i+0x204>
 800463c:	68e0      	ldr	r0, [r4, #12]
 800463e:	9b03      	ldr	r3, [sp, #12]
 8004640:	4298      	cmp	r0, r3
 8004642:	bfb8      	it	lt
 8004644:	4618      	movlt	r0, r3
 8004646:	e7a3      	b.n	8004590 <_printf_i+0x130>
 8004648:	2301      	movs	r3, #1
 800464a:	464a      	mov	r2, r9
 800464c:	4639      	mov	r1, r7
 800464e:	4630      	mov	r0, r6
 8004650:	47c0      	blx	r8
 8004652:	3001      	adds	r0, #1
 8004654:	d09a      	beq.n	800458c <_printf_i+0x12c>
 8004656:	3501      	adds	r5, #1
 8004658:	68e3      	ldr	r3, [r4, #12]
 800465a:	9a03      	ldr	r2, [sp, #12]
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	42ab      	cmp	r3, r5
 8004660:	dcf2      	bgt.n	8004648 <_printf_i+0x1e8>
 8004662:	e7eb      	b.n	800463c <_printf_i+0x1dc>
 8004664:	2500      	movs	r5, #0
 8004666:	f104 0919 	add.w	r9, r4, #25
 800466a:	e7f5      	b.n	8004658 <_printf_i+0x1f8>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1ac      	bne.n	80045ca <_printf_i+0x16a>
 8004670:	7803      	ldrb	r3, [r0, #0]
 8004672:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004676:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800467a:	e76c      	b.n	8004556 <_printf_i+0xf6>
 800467c:	08004961 	.word	0x08004961
 8004680:	08004972 	.word	0x08004972

08004684 <_sbrk_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	2300      	movs	r3, #0
 8004688:	4c05      	ldr	r4, [pc, #20]	; (80046a0 <_sbrk_r+0x1c>)
 800468a:	4605      	mov	r5, r0
 800468c:	4608      	mov	r0, r1
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	f7fc febe 	bl	8001410 <_sbrk>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d102      	bne.n	800469e <_sbrk_r+0x1a>
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	b103      	cbz	r3, 800469e <_sbrk_r+0x1a>
 800469c:	602b      	str	r3, [r5, #0]
 800469e:	bd38      	pop	{r3, r4, r5, pc}
 80046a0:	20000218 	.word	0x20000218

080046a4 <__sread>:
 80046a4:	b510      	push	{r4, lr}
 80046a6:	460c      	mov	r4, r1
 80046a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ac:	f000 f8a4 	bl	80047f8 <_read_r>
 80046b0:	2800      	cmp	r0, #0
 80046b2:	bfab      	itete	ge
 80046b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046b6:	89a3      	ldrhlt	r3, [r4, #12]
 80046b8:	181b      	addge	r3, r3, r0
 80046ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046be:	bfac      	ite	ge
 80046c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80046c2:	81a3      	strhlt	r3, [r4, #12]
 80046c4:	bd10      	pop	{r4, pc}

080046c6 <__swrite>:
 80046c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ca:	461f      	mov	r7, r3
 80046cc:	898b      	ldrh	r3, [r1, #12]
 80046ce:	4605      	mov	r5, r0
 80046d0:	05db      	lsls	r3, r3, #23
 80046d2:	460c      	mov	r4, r1
 80046d4:	4616      	mov	r6, r2
 80046d6:	d505      	bpl.n	80046e4 <__swrite+0x1e>
 80046d8:	2302      	movs	r3, #2
 80046da:	2200      	movs	r2, #0
 80046dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e0:	f000 f868 	bl	80047b4 <_lseek_r>
 80046e4:	89a3      	ldrh	r3, [r4, #12]
 80046e6:	4632      	mov	r2, r6
 80046e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046ec:	81a3      	strh	r3, [r4, #12]
 80046ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046f2:	463b      	mov	r3, r7
 80046f4:	4628      	mov	r0, r5
 80046f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046fa:	f000 b817 	b.w	800472c <_write_r>

080046fe <__sseek>:
 80046fe:	b510      	push	{r4, lr}
 8004700:	460c      	mov	r4, r1
 8004702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004706:	f000 f855 	bl	80047b4 <_lseek_r>
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	89a3      	ldrh	r3, [r4, #12]
 800470e:	bf15      	itete	ne
 8004710:	6560      	strne	r0, [r4, #84]	; 0x54
 8004712:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004716:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800471a:	81a3      	strheq	r3, [r4, #12]
 800471c:	bf18      	it	ne
 800471e:	81a3      	strhne	r3, [r4, #12]
 8004720:	bd10      	pop	{r4, pc}

08004722 <__sclose>:
 8004722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004726:	f000 b813 	b.w	8004750 <_close_r>
	...

0800472c <_write_r>:
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	4605      	mov	r5, r0
 8004730:	4608      	mov	r0, r1
 8004732:	4611      	mov	r1, r2
 8004734:	2200      	movs	r2, #0
 8004736:	4c05      	ldr	r4, [pc, #20]	; (800474c <_write_r+0x20>)
 8004738:	6022      	str	r2, [r4, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	f7fb fd2c 	bl	8000198 <_write>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d102      	bne.n	800474a <_write_r+0x1e>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	b103      	cbz	r3, 800474a <_write_r+0x1e>
 8004748:	602b      	str	r3, [r5, #0]
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	20000218 	.word	0x20000218

08004750 <_close_r>:
 8004750:	b538      	push	{r3, r4, r5, lr}
 8004752:	2300      	movs	r3, #0
 8004754:	4c05      	ldr	r4, [pc, #20]	; (800476c <_close_r+0x1c>)
 8004756:	4605      	mov	r5, r0
 8004758:	4608      	mov	r0, r1
 800475a:	6023      	str	r3, [r4, #0]
 800475c:	f7fc fe27 	bl	80013ae <_close>
 8004760:	1c43      	adds	r3, r0, #1
 8004762:	d102      	bne.n	800476a <_close_r+0x1a>
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	b103      	cbz	r3, 800476a <_close_r+0x1a>
 8004768:	602b      	str	r3, [r5, #0]
 800476a:	bd38      	pop	{r3, r4, r5, pc}
 800476c:	20000218 	.word	0x20000218

08004770 <_fstat_r>:
 8004770:	b538      	push	{r3, r4, r5, lr}
 8004772:	2300      	movs	r3, #0
 8004774:	4c06      	ldr	r4, [pc, #24]	; (8004790 <_fstat_r+0x20>)
 8004776:	4605      	mov	r5, r0
 8004778:	4608      	mov	r0, r1
 800477a:	4611      	mov	r1, r2
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	f7fc fe21 	bl	80013c4 <_fstat>
 8004782:	1c43      	adds	r3, r0, #1
 8004784:	d102      	bne.n	800478c <_fstat_r+0x1c>
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	b103      	cbz	r3, 800478c <_fstat_r+0x1c>
 800478a:	602b      	str	r3, [r5, #0]
 800478c:	bd38      	pop	{r3, r4, r5, pc}
 800478e:	bf00      	nop
 8004790:	20000218 	.word	0x20000218

08004794 <_isatty_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	2300      	movs	r3, #0
 8004798:	4c05      	ldr	r4, [pc, #20]	; (80047b0 <_isatty_r+0x1c>)
 800479a:	4605      	mov	r5, r0
 800479c:	4608      	mov	r0, r1
 800479e:	6023      	str	r3, [r4, #0]
 80047a0:	f7fc fe1f 	bl	80013e2 <_isatty>
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	d102      	bne.n	80047ae <_isatty_r+0x1a>
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	b103      	cbz	r3, 80047ae <_isatty_r+0x1a>
 80047ac:	602b      	str	r3, [r5, #0]
 80047ae:	bd38      	pop	{r3, r4, r5, pc}
 80047b0:	20000218 	.word	0x20000218

080047b4 <_lseek_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4605      	mov	r5, r0
 80047b8:	4608      	mov	r0, r1
 80047ba:	4611      	mov	r1, r2
 80047bc:	2200      	movs	r2, #0
 80047be:	4c05      	ldr	r4, [pc, #20]	; (80047d4 <_lseek_r+0x20>)
 80047c0:	6022      	str	r2, [r4, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	f7fc fe17 	bl	80013f6 <_lseek>
 80047c8:	1c43      	adds	r3, r0, #1
 80047ca:	d102      	bne.n	80047d2 <_lseek_r+0x1e>
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	b103      	cbz	r3, 80047d2 <_lseek_r+0x1e>
 80047d0:	602b      	str	r3, [r5, #0]
 80047d2:	bd38      	pop	{r3, r4, r5, pc}
 80047d4:	20000218 	.word	0x20000218

080047d8 <memchr>:
 80047d8:	b510      	push	{r4, lr}
 80047da:	b2c9      	uxtb	r1, r1
 80047dc:	4402      	add	r2, r0
 80047de:	4290      	cmp	r0, r2
 80047e0:	4603      	mov	r3, r0
 80047e2:	d101      	bne.n	80047e8 <memchr+0x10>
 80047e4:	2300      	movs	r3, #0
 80047e6:	e003      	b.n	80047f0 <memchr+0x18>
 80047e8:	781c      	ldrb	r4, [r3, #0]
 80047ea:	3001      	adds	r0, #1
 80047ec:	428c      	cmp	r4, r1
 80047ee:	d1f6      	bne.n	80047de <memchr+0x6>
 80047f0:	4618      	mov	r0, r3
 80047f2:	bd10      	pop	{r4, pc}

080047f4 <__malloc_lock>:
 80047f4:	4770      	bx	lr

080047f6 <__malloc_unlock>:
 80047f6:	4770      	bx	lr

080047f8 <_read_r>:
 80047f8:	b538      	push	{r3, r4, r5, lr}
 80047fa:	4605      	mov	r5, r0
 80047fc:	4608      	mov	r0, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	2200      	movs	r2, #0
 8004802:	4c05      	ldr	r4, [pc, #20]	; (8004818 <_read_r+0x20>)
 8004804:	6022      	str	r2, [r4, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	f7fc fdb4 	bl	8001374 <_read>
 800480c:	1c43      	adds	r3, r0, #1
 800480e:	d102      	bne.n	8004816 <_read_r+0x1e>
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	b103      	cbz	r3, 8004816 <_read_r+0x1e>
 8004814:	602b      	str	r3, [r5, #0]
 8004816:	bd38      	pop	{r3, r4, r5, pc}
 8004818:	20000218 	.word	0x20000218

0800481c <_init>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	bf00      	nop
 8004820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004822:	bc08      	pop	{r3}
 8004824:	469e      	mov	lr, r3
 8004826:	4770      	bx	lr

08004828 <_fini>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	bf00      	nop
 800482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482e:	bc08      	pop	{r3}
 8004830:	469e      	mov	lr, r3
 8004832:	4770      	bx	lr
