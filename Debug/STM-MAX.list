
STM-MAX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08004f54  08004f54  00014f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050d0  080050d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080050d0  080050d0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050d0  080050d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d0  080050d0  000150d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080050d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000070  08005148  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08005148  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f07a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000220c  00000000  00000000  0002f113  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d30  00000000  00000000  00031320  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c88  00000000  00000000  00032050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019454  00000000  00000000  00032cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aef6  00000000  00000000  0004c12c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bb8e  00000000  00000000  00057022  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2bb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d90  00000000  00000000  000e2c2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f3c 	.word	0x08004f3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004f3c 	.word	0x08004f3c

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
// uint8_t maxInit();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++) {
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e009      	b.n	80001be <_write+0x26>
		ITM_SendChar((*ptr++));
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	60ba      	str	r2, [r7, #8]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffca 	bl	800014c <ITM_SendChar>
	for(int i = 0; i < len; i++) {
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	3301      	adds	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	697a      	ldr	r2, [r7, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	dbf1      	blt.n	80001aa <_write+0x12>
	}
	return len;
 80001c6:	687b      	ldr	r3, [r7, #4]
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f001 fd0d 	bl	8001bf4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f88f 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001de:	f000 fb65 	bl	80008ac <MX_GPIO_Init>
  MX_SPI2_Init();
 80001e2:	f000 f8d1 	bl	8000388 <MX_SPI2_Init>
  MX_TIM1_Init();
 80001e6:	f000 f905 	bl	80003f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001ea:	f000 f9b7 	bl	800055c <MX_TIM2_Init>
  MX_TIM3_Init();
 80001ee:	f000 fa3d 	bl	800066c <MX_TIM3_Init>
  MX_TIM4_Init();
 80001f2:	f000 fac3 	bl	800077c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  if(maxInit(&hspi2)){
 80001f6:	483b      	ldr	r0, [pc, #236]	; (80002e4 <main+0x114>)
 80001f8:	f000 fcbe 	bl	8000b78 <maxInit>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d167      	bne.n	80002d2 <main+0x102>
	  goto NO;
  }
  HAL_Delay(10);
 8000202:	200a      	movs	r0, #10
 8000204:	f001 fd58 	bl	8001cb8 <HAL_Delay>
//uint8_t HRSL = USB_enumerate(&hspi2); //This enumerates the USB and sets it's address to 0x01
//while(!(USBgetDescriptor(&hspi2)));
//printf("fin: %x\n",USBgetDescriptor(&hspi2));
//printf("meh\n");
//uint8_t HRSL = USB_enumerate(&hspi2);
  allEp[0].epAddr = 0x00;
 8000208:	4b37      	ldr	r3, [pc, #220]	; (80002e8 <main+0x118>)
 800020a:	2200      	movs	r2, #0
 800020c:	701a      	strb	r2, [r3, #0]
	allEp[0].maxPktSize = 0x40;
 800020e:	4b36      	ldr	r3, [pc, #216]	; (80002e8 <main+0x118>)
 8000210:	2240      	movs	r2, #64	; 0x40
 8000212:	705a      	strb	r2, [r3, #1]
	allEp[0].bmNakPower = 0x0e;
 8000214:	4a34      	ldr	r2, [pc, #208]	; (80002e8 <main+0x118>)
 8000216:	7893      	ldrb	r3, [r2, #2]
 8000218:	210e      	movs	r1, #14
 800021a:	f361 0387 	bfi	r3, r1, #2, #6
 800021e:	7093      	strb	r3, [r2, #2]
	allEp[1].epAddr = 0x01;
 8000220:	4b31      	ldr	r3, [pc, #196]	; (80002e8 <main+0x118>)
 8000222:	2201      	movs	r2, #1
 8000224:	70da      	strb	r2, [r3, #3]
	allEp[1].epAttribs = 0x03;
 8000226:	4b30      	ldr	r3, [pc, #192]	; (80002e8 <main+0x118>)
 8000228:	2203      	movs	r2, #3
 800022a:	715a      	strb	r2, [r3, #5]
	allEp[1].bmSndToggle = 0x00;
 800022c:	4a2e      	ldr	r2, [pc, #184]	; (80002e8 <main+0x118>)
 800022e:	7953      	ldrb	r3, [r2, #5]
 8000230:	f36f 0300 	bfc	r3, #0, #1
 8000234:	7153      	strb	r3, [r2, #5]
	allEp[1].bmRcvToggle = 0x00;
 8000236:	4a2c      	ldr	r2, [pc, #176]	; (80002e8 <main+0x118>)
 8000238:	7953      	ldrb	r3, [r2, #5]
 800023a:	f36f 0341 	bfc	r3, #1, #1
 800023e:	7153      	strb	r3, [r2, #5]
	allEp[1].maxPktSize = 0x20;
 8000240:	4b29      	ldr	r3, [pc, #164]	; (80002e8 <main+0x118>)
 8000242:	2220      	movs	r2, #32
 8000244:	711a      	strb	r2, [r3, #4]
	allEp[1].bmNakPower = 0x01;
 8000246:	4a28      	ldr	r2, [pc, #160]	; (80002e8 <main+0x118>)
 8000248:	7953      	ldrb	r3, [r2, #5]
 800024a:	2101      	movs	r1, #1
 800024c:	f361 0387 	bfi	r3, r1, #2, #6
 8000250:	7153      	strb	r3, [r2, #5]
	allEp[2].epAddr = 0x02;
 8000252:	4b25      	ldr	r3, [pc, #148]	; (80002e8 <main+0x118>)
 8000254:	2202      	movs	r2, #2
 8000256:	719a      	strb	r2, [r3, #6]
	allEp[2].epAttribs = 0x03;
 8000258:	4b23      	ldr	r3, [pc, #140]	; (80002e8 <main+0x118>)
 800025a:	2203      	movs	r2, #3
 800025c:	721a      	strb	r2, [r3, #8]
	allEp[2].bmSndToggle = 0x00;
 800025e:	4a22      	ldr	r2, [pc, #136]	; (80002e8 <main+0x118>)
 8000260:	7a13      	ldrb	r3, [r2, #8]
 8000262:	f36f 0300 	bfc	r3, #0, #1
 8000266:	7213      	strb	r3, [r2, #8]
	allEp[2].bmRcvToggle = 0x00;
 8000268:	4a1f      	ldr	r2, [pc, #124]	; (80002e8 <main+0x118>)
 800026a:	7a13      	ldrb	r3, [r2, #8]
 800026c:	f36f 0341 	bfc	r3, #1, #1
 8000270:	7213      	strb	r3, [r2, #8]
	allEp[2].maxPktSize = 0x20;
 8000272:	4b1d      	ldr	r3, [pc, #116]	; (80002e8 <main+0x118>)
 8000274:	2220      	movs	r2, #32
 8000276:	71da      	strb	r2, [r3, #7]
	allEp[2].bmNakPower = 0x01;
 8000278:	4a1b      	ldr	r2, [pc, #108]	; (80002e8 <main+0x118>)
 800027a:	7a13      	ldrb	r3, [r2, #8]
 800027c:	2101      	movs	r1, #1
 800027e:	f361 0387 	bfi	r3, r1, #2, #6
 8000282:	7213      	strb	r3, [r2, #8]
  uint8_t HRSL = RGinit(&hspi2);
 8000284:	4817      	ldr	r0, [pc, #92]	; (80002e4 <main+0x114>)
 8000286:	f001 f9b1 	bl	80015ec <RGinit>
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  USBgetDescriptor(&hspi2);
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <main+0x114>)
 8000290:	f000 fdb0 	bl	8000df4 <USBgetDescriptor>
  printf("Init: %x\n",HRSL);
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	4619      	mov	r1, r3
 8000298:	4814      	ldr	r0, [pc, #80]	; (80002ec <main+0x11c>)
 800029a:	f003 fefd 	bl	8004098 <iprintf>
  printf("Done! set address to %x\n",regRd(&hspi2,rPERADDR));
 800029e:	21e0      	movs	r1, #224	; 0xe0
 80002a0:	4810      	ldr	r0, [pc, #64]	; (80002e4 <main+0x114>)
 80002a2:	f000 fbe9 	bl	8000a78 <regRd>
 80002a6:	4603      	mov	r3, r0
 80002a8:	4619      	mov	r1, r3
 80002aa:	4811      	ldr	r0, [pc, #68]	; (80002f0 <main+0x120>)
 80002ac:	f003 fef4 	bl	8004098 <iprintf>
  // printf("HID descriptor: %x\n",RGgetHIDreportDescriptor(&hspi2));
  uint8_t temp;
  temp = RGpoll(&hspi2);
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <main+0x114>)
 80002b2:	f001 f981 	bl	80015b8 <RGpoll>
 80002b6:	4603      	mov	r3, r0
 80002b8:	71bb      	strb	r3, [r7, #6]
	  if(temp != 0x04){
 80002ba:	79bb      	ldrb	r3, [r7, #6]
 80002bc:	2b04      	cmp	r3, #4
 80002be:	d004      	beq.n	80002ca <main+0xfa>
		  printf("poll RG: %x\n",temp);
 80002c0:	79bb      	ldrb	r3, [r7, #6]
 80002c2:	4619      	mov	r1, r3
 80002c4:	480b      	ldr	r0, [pc, #44]	; (80002f4 <main+0x124>)
 80002c6:	f003 fee7 	bl	8004098 <iprintf>
	  }
	  HAL_Delay(4);
 80002ca:	2004      	movs	r0, #4
 80002cc:	f001 fcf4 	bl	8001cb8 <HAL_Delay>
//  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d0:	e7fe      	b.n	80002d0 <main+0x100>
	  goto NO;
 80002d2:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  NO:
  printf("Couldn't connect to max!\n");
 80002d4:	4808      	ldr	r0, [pc, #32]	; (80002f8 <main+0x128>)
 80002d6:	f003 ff53 	bl	8004180 <puts>
 80002da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80002dc:	4618      	mov	r0, r3
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000098 	.word	0x20000098
 80002e8:	200000f0 	.word	0x200000f0
 80002ec:	08004f54 	.word	0x08004f54
 80002f0:	08004f60 	.word	0x08004f60
 80002f4:	08004f7c 	.word	0x08004f7c
 80002f8:	08004f8c 	.word	0x08004f8c

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b090      	sub	sp, #64	; 0x40
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	2228      	movs	r2, #40	; 0x28
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f003 febc 	bl	8004088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800031e:	2301      	movs	r3, #1
 8000320:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000326:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032c:	2301      	movs	r3, #1
 800032e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000330:	2302      	movs	r3, #2
 8000332:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000338:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800033a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800033e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000340:	f107 0318 	add.w	r3, r7, #24
 8000344:	4618      	mov	r0, r3
 8000346:	f001 ff2f 	bl	80021a8 <HAL_RCC_OscConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000350:	f000 fb2a 	bl	80009a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000354:	230f      	movs	r3, #15
 8000356:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000358:	2302      	movs	r3, #2
 800035a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000364:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f002 f99a 	bl	80026a8 <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800037a:	f000 fb15 	bl	80009a8 <Error_Handler>
  }
}
 800037e:	bf00      	nop
 8000380:	3740      	adds	r7, #64	; 0x40
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800038c:	4b17      	ldr	r3, [pc, #92]	; (80003ec <MX_SPI2_Init+0x64>)
 800038e:	4a18      	ldr	r2, [pc, #96]	; (80003f0 <MX_SPI2_Init+0x68>)
 8000390:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000392:	4b16      	ldr	r3, [pc, #88]	; (80003ec <MX_SPI2_Init+0x64>)
 8000394:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000398:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800039a:	4b14      	ldr	r3, [pc, #80]	; (80003ec <MX_SPI2_Init+0x64>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <MX_SPI2_Init+0x64>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003a6:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_SPI2_Init+0x64>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_SPI2_Init+0x64>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_SPI2_Init+0x64>)
 80003b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_SPI2_Init+0x64>)
 80003bc:	2210      	movs	r2, #16
 80003be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003c0:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <MX_SPI2_Init+0x64>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_SPI2_Init+0x64>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <MX_SPI2_Init+0x64>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_SPI2_Init+0x64>)
 80003d4:	220a      	movs	r2, #10
 80003d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003d8:	4804      	ldr	r0, [pc, #16]	; (80003ec <MX_SPI2_Init+0x64>)
 80003da:	f002 facf 	bl	800297c <HAL_SPI_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80003e4:	f000 fae0 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000098 	.word	0x20000098
 80003f0:	40003800 	.word	0x40003800

080003f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b09a      	sub	sp, #104	; 0x68
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fe:	2224      	movs	r2, #36	; 0x24
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f003 fe40 	bl	8004088 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000408:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000412:	f107 0320 	add.w	r3, r7, #32
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
 8000420:	611a      	str	r2, [r3, #16]
 8000422:	615a      	str	r2, [r3, #20]
 8000424:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000426:	463b      	mov	r3, r7
 8000428:	2220      	movs	r2, #32
 800042a:	2100      	movs	r1, #0
 800042c:	4618      	mov	r0, r3
 800042e:	f003 fe2b 	bl	8004088 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000432:	4b48      	ldr	r3, [pc, #288]	; (8000554 <MX_TIM1_Init+0x160>)
 8000434:	4a48      	ldr	r2, [pc, #288]	; (8000558 <MX_TIM1_Init+0x164>)
 8000436:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000438:	4b46      	ldr	r3, [pc, #280]	; (8000554 <MX_TIM1_Init+0x160>)
 800043a:	2200      	movs	r2, #0
 800043c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800043e:	4b45      	ldr	r3, [pc, #276]	; (8000554 <MX_TIM1_Init+0x160>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000444:	4b43      	ldr	r3, [pc, #268]	; (8000554 <MX_TIM1_Init+0x160>)
 8000446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800044a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800044c:	4b41      	ldr	r3, [pc, #260]	; (8000554 <MX_TIM1_Init+0x160>)
 800044e:	2200      	movs	r2, #0
 8000450:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000452:	4b40      	ldr	r3, [pc, #256]	; (8000554 <MX_TIM1_Init+0x160>)
 8000454:	2200      	movs	r2, #0
 8000456:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000458:	4b3e      	ldr	r3, [pc, #248]	; (8000554 <MX_TIM1_Init+0x160>)
 800045a:	2200      	movs	r2, #0
 800045c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800045e:	483d      	ldr	r0, [pc, #244]	; (8000554 <MX_TIM1_Init+0x160>)
 8000460:	f003 f847 	bl	80034f2 <HAL_TIM_PWM_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800046a:	f000 fa9d 	bl	80009a8 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800046e:	2301      	movs	r3, #1
 8000470:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000472:	2300      	movs	r3, #0
 8000474:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000476:	2301      	movs	r3, #1
 8000478:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000482:	2300      	movs	r3, #0
 8000484:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000486:	2301      	movs	r3, #1
 8000488:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000492:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000496:	4619      	mov	r1, r3
 8000498:	482e      	ldr	r0, [pc, #184]	; (8000554 <MX_TIM1_Init+0x160>)
 800049a:	f003 f879 	bl	8003590 <HAL_TIM_Encoder_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80004a4:	f000 fa80 	bl	80009a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a8:	2300      	movs	r3, #0
 80004aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ac:	2300      	movs	r3, #0
 80004ae:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004b4:	4619      	mov	r1, r3
 80004b6:	4827      	ldr	r0, [pc, #156]	; (8000554 <MX_TIM1_Init+0x160>)
 80004b8:	f003 fd0c 	bl	8003ed4 <HAL_TIMEx_MasterConfigSynchronization>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80004c2:	f000 fa71 	bl	80009a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004c6:	2360      	movs	r3, #96	; 0x60
 80004c8:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ce:	2300      	movs	r3, #0
 80004d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004d2:	2300      	movs	r3, #0
 80004d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004da:	2300      	movs	r3, #0
 80004dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004de:	2300      	movs	r3, #0
 80004e0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004e2:	f107 0320 	add.w	r3, r7, #32
 80004e6:	2208      	movs	r2, #8
 80004e8:	4619      	mov	r1, r3
 80004ea:	481a      	ldr	r0, [pc, #104]	; (8000554 <MX_TIM1_Init+0x160>)
 80004ec:	f003 f8fc 	bl	80036e8 <HAL_TIM_PWM_ConfigChannel>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80004f6:	f000 fa57 	bl	80009a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	220c      	movs	r2, #12
 8000500:	4619      	mov	r1, r3
 8000502:	4814      	ldr	r0, [pc, #80]	; (8000554 <MX_TIM1_Init+0x160>)
 8000504:	f003 f8f0 	bl	80036e8 <HAL_TIM_PWM_ConfigChannel>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 800050e:	f000 fa4b 	bl	80009a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000512:	2300      	movs	r3, #0
 8000514:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800051a:	2300      	movs	r3, #0
 800051c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000526:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800052a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800052c:	2300      	movs	r3, #0
 800052e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000530:	463b      	mov	r3, r7
 8000532:	4619      	mov	r1, r3
 8000534:	4807      	ldr	r0, [pc, #28]	; (8000554 <MX_TIM1_Init+0x160>)
 8000536:	f003 fd2b 	bl	8003f90 <HAL_TIMEx_ConfigBreakDeadTime>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000540:	f000 fa32 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000544:	4803      	ldr	r0, [pc, #12]	; (8000554 <MX_TIM1_Init+0x160>)
 8000546:	f001 f9e7 	bl	8001918 <HAL_TIM_MspPostInit>

}
 800054a:	bf00      	nop
 800054c:	3768      	adds	r7, #104	; 0x68
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000190 	.word	0x20000190
 8000558:	40012c00 	.word	0x40012c00

0800055c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b092      	sub	sp, #72	; 0x48
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000566:	2224      	movs	r2, #36	; 0x24
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fd8c 	bl	8004088 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000570:	f107 031c 	add.w	r3, r7, #28
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800057a:	463b      	mov	r3, r7
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
 8000588:	615a      	str	r2, [r3, #20]
 800058a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800058c:	4b36      	ldr	r3, [pc, #216]	; (8000668 <MX_TIM2_Init+0x10c>)
 800058e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000594:	4b34      	ldr	r3, [pc, #208]	; (8000668 <MX_TIM2_Init+0x10c>)
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059a:	4b33      	ldr	r3, [pc, #204]	; (8000668 <MX_TIM2_Init+0x10c>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005a0:	4b31      	ldr	r3, [pc, #196]	; (8000668 <MX_TIM2_Init+0x10c>)
 80005a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a8:	4b2f      	ldr	r3, [pc, #188]	; (8000668 <MX_TIM2_Init+0x10c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ae:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <MX_TIM2_Init+0x10c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005b4:	482c      	ldr	r0, [pc, #176]	; (8000668 <MX_TIM2_Init+0x10c>)
 80005b6:	f002 ff9c 	bl	80034f2 <HAL_TIM_PWM_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80005c0:	f000 f9f2 	bl	80009a8 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC1Filter = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005d8:	2300      	movs	r3, #0
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005dc:	2301      	movs	r3, #1
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.IC2Filter = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80005e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ec:	4619      	mov	r1, r3
 80005ee:	481e      	ldr	r0, [pc, #120]	; (8000668 <MX_TIM2_Init+0x10c>)
 80005f0:	f002 ffce 	bl	8003590 <HAL_TIM_Encoder_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80005fa:	f000 f9d5 	bl	80009a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000602:	2300      	movs	r3, #0
 8000604:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4619      	mov	r1, r3
 800060c:	4816      	ldr	r0, [pc, #88]	; (8000668 <MX_TIM2_Init+0x10c>)
 800060e:	f003 fc61 	bl	8003ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8000618:	f000 f9c6 	bl	80009a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800061c:	2360      	movs	r3, #96	; 0x60
 800061e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	2208      	movs	r2, #8
 8000630:	4619      	mov	r1, r3
 8000632:	480d      	ldr	r0, [pc, #52]	; (8000668 <MX_TIM2_Init+0x10c>)
 8000634:	f003 f858 	bl	80036e8 <HAL_TIM_PWM_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800063e:	f000 f9b3 	bl	80009a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	220c      	movs	r2, #12
 8000646:	4619      	mov	r1, r3
 8000648:	4807      	ldr	r0, [pc, #28]	; (8000668 <MX_TIM2_Init+0x10c>)
 800064a:	f003 f84d 	bl	80036e8 <HAL_TIM_PWM_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8000654:	f000 f9a8 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <MX_TIM2_Init+0x10c>)
 800065a:	f001 f95d 	bl	8001918 <HAL_TIM_MspPostInit>

}
 800065e:	bf00      	nop
 8000660:	3748      	adds	r7, #72	; 0x48
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200001d8 	.word	0x200001d8

0800066c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b092      	sub	sp, #72	; 0x48
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000676:	2224      	movs	r2, #36	; 0x24
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fd04 	bl	8004088 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800068a:	463b      	mov	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
 8000698:	615a      	str	r2, [r3, #20]
 800069a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800069c:	4b35      	ldr	r3, [pc, #212]	; (8000774 <MX_TIM3_Init+0x108>)
 800069e:	4a36      	ldr	r2, [pc, #216]	; (8000778 <MX_TIM3_Init+0x10c>)
 80006a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006a2:	4b34      	ldr	r3, [pc, #208]	; (8000774 <MX_TIM3_Init+0x108>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a8:	4b32      	ldr	r3, [pc, #200]	; (8000774 <MX_TIM3_Init+0x108>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006ae:	4b31      	ldr	r3, [pc, #196]	; (8000774 <MX_TIM3_Init+0x108>)
 80006b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b6:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <MX_TIM3_Init+0x108>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006bc:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <MX_TIM3_Init+0x108>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006c2:	482c      	ldr	r0, [pc, #176]	; (8000774 <MX_TIM3_Init+0x108>)
 80006c4:	f002 ff15 	bl	80034f2 <HAL_TIM_PWM_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80006ce:	f000 f96b 	bl	80009a8 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006d6:	2300      	movs	r3, #0
 80006d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006da:	2301      	movs	r3, #1
 80006dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC1Filter = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006e6:	2300      	movs	r3, #0
 80006e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006ea:	2301      	movs	r3, #1
 80006ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.IC2Filter = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80006f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fa:	4619      	mov	r1, r3
 80006fc:	481d      	ldr	r0, [pc, #116]	; (8000774 <MX_TIM3_Init+0x108>)
 80006fe:	f002 ff47 	bl	8003590 <HAL_TIM_Encoder_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000708:	f000 f94e 	bl	80009a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4619      	mov	r1, r3
 800071a:	4816      	ldr	r0, [pc, #88]	; (8000774 <MX_TIM3_Init+0x108>)
 800071c:	f003 fbda 	bl	8003ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8000726:	f000 f93f 	bl	80009a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800072a:	2360      	movs	r3, #96	; 0x60
 800072c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	2208      	movs	r2, #8
 800073e:	4619      	mov	r1, r3
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <MX_TIM3_Init+0x108>)
 8000742:	f002 ffd1 	bl	80036e8 <HAL_TIM_PWM_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800074c:	f000 f92c 	bl	80009a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	220c      	movs	r2, #12
 8000754:	4619      	mov	r1, r3
 8000756:	4807      	ldr	r0, [pc, #28]	; (8000774 <MX_TIM3_Init+0x108>)
 8000758:	f002 ffc6 	bl	80036e8 <HAL_TIM_PWM_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8000762:	f000 f921 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000766:	4803      	ldr	r0, [pc, #12]	; (8000774 <MX_TIM3_Init+0x108>)
 8000768:	f001 f8d6 	bl	8001918 <HAL_TIM_MspPostInit>

}
 800076c:	bf00      	nop
 800076e:	3748      	adds	r7, #72	; 0x48
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000148 	.word	0x20000148
 8000778:	40000400 	.word	0x40000400

0800077c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08e      	sub	sp, #56	; 0x38
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]
 80007aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007ac:	4b3d      	ldr	r3, [pc, #244]	; (80008a4 <MX_TIM4_Init+0x128>)
 80007ae:	4a3e      	ldr	r2, [pc, #248]	; (80008a8 <MX_TIM4_Init+0x12c>)
 80007b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80007b2:	4b3c      	ldr	r3, [pc, #240]	; (80008a4 <MX_TIM4_Init+0x128>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b3a      	ldr	r3, [pc, #232]	; (80008a4 <MX_TIM4_Init+0x128>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80007be:	4b39      	ldr	r3, [pc, #228]	; (80008a4 <MX_TIM4_Init+0x128>)
 80007c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b37      	ldr	r3, [pc, #220]	; (80008a4 <MX_TIM4_Init+0x128>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007cc:	4b35      	ldr	r3, [pc, #212]	; (80008a4 <MX_TIM4_Init+0x128>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007d2:	4834      	ldr	r0, [pc, #208]	; (80008a4 <MX_TIM4_Init+0x128>)
 80007d4:	f002 fe3e 	bl	8003454 <HAL_TIM_Base_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80007de:	f000 f8e3 	bl	80009a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ec:	4619      	mov	r1, r3
 80007ee:	482d      	ldr	r0, [pc, #180]	; (80008a4 <MX_TIM4_Init+0x128>)
 80007f0:	f003 f838 	bl	8003864 <HAL_TIM_ConfigClockSource>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80007fa:	f000 f8d5 	bl	80009a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007fe:	4829      	ldr	r0, [pc, #164]	; (80008a4 <MX_TIM4_Init+0x128>)
 8000800:	f002 fe77 	bl	80034f2 <HAL_TIM_PWM_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800080a:	f000 f8cd 	bl	80009a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	4619      	mov	r1, r3
 800081c:	4821      	ldr	r0, [pc, #132]	; (80008a4 <MX_TIM4_Init+0x128>)
 800081e:	f003 fb59 	bl	8003ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000828:	f000 f8be 	bl	80009a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082c:	2360      	movs	r3, #96	; 0x60
 800082e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	4619      	mov	r1, r3
 8000842:	4818      	ldr	r0, [pc, #96]	; (80008a4 <MX_TIM4_Init+0x128>)
 8000844:	f002 ff50 	bl	80036e8 <HAL_TIM_PWM_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800084e:	f000 f8ab 	bl	80009a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2204      	movs	r2, #4
 8000856:	4619      	mov	r1, r3
 8000858:	4812      	ldr	r0, [pc, #72]	; (80008a4 <MX_TIM4_Init+0x128>)
 800085a:	f002 ff45 	bl	80036e8 <HAL_TIM_PWM_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000864:	f000 f8a0 	bl	80009a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2208      	movs	r2, #8
 800086c:	4619      	mov	r1, r3
 800086e:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_TIM4_Init+0x128>)
 8000870:	f002 ff3a 	bl	80036e8 <HAL_TIM_PWM_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800087a:	f000 f895 	bl	80009a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	220c      	movs	r2, #12
 8000882:	4619      	mov	r1, r3
 8000884:	4807      	ldr	r0, [pc, #28]	; (80008a4 <MX_TIM4_Init+0x128>)
 8000886:	f002 ff2f 	bl	80036e8 <HAL_TIM_PWM_ConfigChannel>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000890:	f000 f88a 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <MX_TIM4_Init+0x128>)
 8000896:	f001 f83f 	bl	8001918 <HAL_TIM_MspPostInit>

}
 800089a:	bf00      	nop
 800089c:	3738      	adds	r7, #56	; 0x38
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000fc 	.word	0x200000fc
 80008a8:	40000800 	.word	0x40000800

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c0:	4b36      	ldr	r3, [pc, #216]	; (800099c <MX_GPIO_Init+0xf0>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a35      	ldr	r2, [pc, #212]	; (800099c <MX_GPIO_Init+0xf0>)
 80008c6:	f043 0320 	orr.w	r3, r3, #32
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b33      	ldr	r3, [pc, #204]	; (800099c <MX_GPIO_Init+0xf0>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0320 	and.w	r3, r3, #32
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b30      	ldr	r3, [pc, #192]	; (800099c <MX_GPIO_Init+0xf0>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a2f      	ldr	r2, [pc, #188]	; (800099c <MX_GPIO_Init+0xf0>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b2d      	ldr	r3, [pc, #180]	; (800099c <MX_GPIO_Init+0xf0>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f0:	4b2a      	ldr	r3, [pc, #168]	; (800099c <MX_GPIO_Init+0xf0>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a29      	ldr	r2, [pc, #164]	; (800099c <MX_GPIO_Init+0xf0>)
 80008f6:	f043 0308 	orr.w	r3, r3, #8
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b27      	ldr	r3, [pc, #156]	; (800099c <MX_GPIO_Init+0xf0>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0308 	and.w	r3, r3, #8
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay_Pin|GPIO_PIN_12|Stepper2_DIR_Pin|Stepper2_PULB5_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f241 4130 	movw	r1, #5168	; 0x1430
 800090e:	4824      	ldr	r0, [pc, #144]	; (80009a0 <MX_GPIO_Init+0xf4>)
 8000910:	f001 fc32 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Stepper2_PUL_GPIO_Port, Stepper2_PUL_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800091a:	4822      	ldr	r0, [pc, #136]	; (80009a4 <MX_GPIO_Init+0xf8>)
 800091c:	f001 fc2c 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Host_INT_Pin */
  GPIO_InitStruct.Pin = Host_INT_Pin;
 8000920:	2310      	movs	r3, #16
 8000922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000928:	2301      	movs	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Host_INT_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	4619      	mov	r1, r3
 8000932:	481c      	ldr	r0, [pc, #112]	; (80009a4 <MX_GPIO_Init+0xf8>)
 8000934:	f001 fac6 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_Pin Stepper2_DIR_Pin Stepper2_PULB5_Pin */
  GPIO_InitStruct.Pin = Relay_Pin|Stepper2_DIR_Pin|Stepper2_PULB5_Pin;
 8000938:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2302      	movs	r3, #2
 8000948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	4619      	mov	r1, r3
 8000950:	4813      	ldr	r0, [pc, #76]	; (80009a0 <MX_GPIO_Init+0xf4>)
 8000952:	f001 fab7 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000960:	2301      	movs	r3, #1
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2302      	movs	r3, #2
 8000966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	4619      	mov	r1, r3
 800096e:	480c      	ldr	r0, [pc, #48]	; (80009a0 <MX_GPIO_Init+0xf4>)
 8000970:	f001 faa8 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stepper2_PUL_Pin */
  GPIO_InitStruct.Pin = Stepper2_PUL_Pin;
 8000974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2302      	movs	r3, #2
 8000984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stepper2_PUL_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_GPIO_Init+0xf8>)
 800098e:	f001 fa99 	bl	8001ec4 <HAL_GPIO_Init>

}
 8000992:	bf00      	nop
 8000994:	3720      	adds	r7, #32
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010c00 	.word	0x40010c00
 80009a4:	40010800 	.word	0x40010800

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <regWr>:
//RedGear XBOXUSB
#define MAX_PACKET_SIZE 40

//Write a register
void regWr(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t data)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	70fb      	strb	r3, [r7, #3]
 80009c0:	4613      	mov	r3, r2
 80009c2:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ca:	4812      	ldr	r0, [pc, #72]	; (8000a14 <regWr+0x60>)
 80009cc:	f001 fbd4 	bl	8002178 <HAL_GPIO_WritePin>
	uint8_t txData = reg | 0x02;
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, &txData, 1, HAL_MAX_DELAY);
 80009da:	f107 010f 	add.w	r1, r7, #15
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	2201      	movs	r2, #1
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f002 f84d 	bl	8002a84 <HAL_SPI_Transmit>
	txData = data;
 80009ea:	78bb      	ldrb	r3, [r7, #2]
 80009ec:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, &txData, 1, HAL_MAX_DELAY);
 80009ee:	f107 010f 	add.w	r1, r7, #15
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	2201      	movs	r2, #1
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f002 f843 	bl	8002a84 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a04:	4803      	ldr	r0, [pc, #12]	; (8000a14 <regWr+0x60>)
 8000a06:	f001 fbb7 	bl	8002178 <HAL_GPIO_WritePin>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <regWrN>:

//Write nbytes to a register
void regWrN(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t *data, int nbytes)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	460b      	mov	r3, r1
 8000a26:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2e:	4811      	ldr	r0, [pc, #68]	; (8000a74 <regWrN+0x5c>)
 8000a30:	f001 fba2 	bl	8002178 <HAL_GPIO_WritePin>
	uint8_t txData = reg | 0x02;
 8000a34:	7afb      	ldrb	r3, [r7, #11]
 8000a36:	f043 0302 	orr.w	r3, r3, #2
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &txData, 1, HAL_MAX_DELAY);
 8000a3e:	f107 0117 	add.w	r1, r7, #23
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	2201      	movs	r2, #1
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f002 f81b 	bl	8002a84 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, data, nbytes, HAL_MAX_DELAY);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f002 f813 	bl	8002a84 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a64:	4803      	ldr	r0, [pc, #12]	; (8000a74 <regWrN+0x5c>)
 8000a66:	f001 fb87 	bl	8002178 <HAL_GPIO_WritePin>
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40010c00 	.word	0x40010c00

08000a78 <regRd>:

//read a byte from a register
uint8_t regRd(SPI_HandleTypeDef *hspi, uint8_t reg)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8a:	4810      	ldr	r0, [pc, #64]	; (8000acc <regRd+0x54>)
 8000a8c:	f001 fb74 	bl	8002178 <HAL_GPIO_WritePin>
	//register to read
	uint8_t rxData = reg;
 8000a90:	78fb      	ldrb	r3, [r7, #3]
 8000a92:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(hspi, &rxData, 1, HAL_MAX_DELAY);
 8000a94:	f107 010f 	add.w	r1, r7, #15
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f001 fff0 	bl	8002a84 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &rxData, 1, HAL_MAX_DELAY);
 8000aa4:	f107 010f 	add.w	r1, r7, #15
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	2201      	movs	r2, #1
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f002 f924 	bl	8002cfc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aba:	4804      	ldr	r0, [pc, #16]	; (8000acc <regRd+0x54>)
 8000abc:	f001 fb5c 	bl	8002178 <HAL_GPIO_WritePin>

	return rxData;
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40010c00 	.word	0x40010c00

08000ad0 <regRdN>:

void regRdN(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t* data, int nbytes){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	460b      	mov	r3, r1
 8000ade:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae6:	480f      	ldr	r0, [pc, #60]	; (8000b24 <regRdN+0x54>)
 8000ae8:	f001 fb46 	bl	8002178 <HAL_GPIO_WritePin>
	//register to read
	uint8_t rxData = reg;
 8000aec:	7afb      	ldrb	r3, [r7, #11]
 8000aee:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &rxData, 1, HAL_MAX_DELAY);
 8000af0:	f107 0117 	add.w	r1, r7, #23
 8000af4:	f04f 33ff 	mov.w	r3, #4294967295
 8000af8:	2201      	movs	r2, #1
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f001 ffc2 	bl	8002a84 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, data, nbytes, HAL_MAX_DELAY);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f002 f8f6 	bl	8002cfc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b16:	4803      	ldr	r0, [pc, #12]	; (8000b24 <regRdN+0x54>)
 8000b18:	f001 fb2e 	bl	8002178 <HAL_GPIO_WritePin>
}
 8000b1c:	bf00      	nop
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40010c00 	.word	0x40010c00

08000b28 <maxReset>:
	regWr(hspi, rPINCTL, bmFDUPSPI | bmINTLEVEL | bmGPXA);
	return regRd(hspi, rREVISION); //Read-Only revision register
}

uint16_t maxReset(SPI_HandleTypeDef *hspi)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	81fb      	strh	r3, [r7, #14]
	regWr(hspi, 0x78, 0x20);
 8000b34:	2220      	movs	r2, #32
 8000b36:	2178      	movs	r1, #120	; 0x78
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff3b 	bl	80009b4 <regWr>
	regWr(hspi, 0x78, 0x00);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2178      	movs	r1, #120	; 0x78
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff36 	bl	80009b4 <regWr>
	while(++i)
 8000b48:	e008      	b.n	8000b5c <maxReset+0x34>
	{
		if(regRd(hspi,0x68) & 0x01)
 8000b4a:	2168      	movs	r1, #104	; 0x68
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff93 	bl	8000a78 <regRd>
 8000b52:	4603      	mov	r3, r0
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d106      	bne.n	8000b6a <maxReset+0x42>
	while(++i)
 8000b5c:	89fb      	ldrh	r3, [r7, #14]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	81fb      	strh	r3, [r7, #14]
 8000b62:	89fb      	ldrh	r3, [r7, #14]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1f0      	bne.n	8000b4a <maxReset+0x22>
 8000b68:	e000      	b.n	8000b6c <maxReset+0x44>
		{
			break;
 8000b6a:	bf00      	nop
		}
	}
	return i;
 8000b6c:	89fb      	ldrh	r3, [r7, #14]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <maxInit>:

//returns -1 on failure 0 on success
uint8_t maxInit(SPI_HandleTypeDef *hspi)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	//set host shield in full duplex spi mode and verify
	regWr(hspi, rPINCTL, bmFDUPSPI | bmINTLEVEL | bmGPXA);
 8000b80:	2219      	movs	r2, #25
 8000b82:	2188      	movs	r1, #136	; 0x88
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff15 	bl	80009b4 <regWr>
	if (0x13 == regRd(hspi, rREVISION))
 8000b8a:	2190      	movs	r1, #144	; 0x90
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff73 	bl	8000a78 <regRd>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b13      	cmp	r3, #19
 8000b96:	d13d      	bne.n	8000c14 <maxInit+0x9c>
		//set host shield in host mode and pull ups
		// regWr(hspi, 0xd8, 0xc1);

//		return maxReset(hspi);

        if(maxReset(hspi) == 0) { //OSCOKIRQ hasn't asserted in time
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ffc5 	bl	8000b28 <maxReset>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <maxInit+0x30>
                return 0xfc;
 8000ba4:	23fc      	movs	r3, #252	; 0xfc
 8000ba6:	e036      	b.n	8000c16 <maxInit+0x9e>
        }

		//set host shield in host mode and pull ups
		regWr(hspi, 0xd8, 0xc1);
 8000ba8:	22c1      	movs	r2, #193	; 0xc1
 8000baa:	21d8      	movs	r1, #216	; 0xd8
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff01 	bl	80009b4 <regWr>
		
		//detect connection
		regWr(hspi, 0xd0, 0x60);
 8000bb2:	2260      	movs	r2, #96	; 0x60
 8000bb4:	21d0      	movs	r1, #208	; 0xd0
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff fefc 	bl	80009b4 <regWr>

		regWr(hspi, 0xe8, 0x04);
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	21e8      	movs	r1, #232	; 0xe8
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff fef7 	bl	80009b4 <regWr>
		int i = regRd(hspi, 0xe8) & 0x04;
 8000bc6:	21e8      	movs	r1, #232	; 0xe8
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ff55 	bl	8000a78 <regRd>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	60fb      	str	r3, [r7, #12]
		while (!i){
 8000bd6:	e00b      	b.n	8000bf0 <maxInit+0x78>
			i = regRd(hspi, 0xe8) & 0x04;
 8000bd8:	21e8      	movs	r1, #232	; 0xe8
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ff4c 	bl	8000a78 <regRd>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	60fb      	str	r3, [r7, #12]
			printf("i = %x\n",i);
 8000be8:	68f9      	ldr	r1, [r7, #12]
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <maxInit+0xa8>)
 8000bec:	f003 fa54 	bl	8004098 <iprintf>
		while (!i){
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0f0      	beq.n	8000bd8 <maxInit+0x60>
		}

		//busprobe();
		maxBusprobe(hspi);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 f814 	bl	8000c24 <maxBusprobe>
		//busprobe will read j and k status set speed depending on this

		//clear connection detect interrupt
		regWr(hspi,rHCTL,bmCONDENTIRQ);
 8000bfc:	2220      	movs	r2, #32
 8000bfe:	21e8      	movs	r1, #232	; 0xe8
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff fed7 	bl	80009b4 <regWr>
		//enable interrupt pin
		regWr(hspi,rCPUCTL, 0x01);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff fed2 	bl	80009b4 <regWr>

		//busprobe fails if switch is connected, feels irrelevant, what is a switch
		//regWr(hspi,rPINCTL, (bmFDUPSPI | bmINTLEVEL));

		return (0);
 8000c10:	2300      	movs	r3, #0
 8000c12:	e000      	b.n	8000c16 <maxInit+0x9e>
	}
	else
	{
		return 0xde;
 8000c14:	23de      	movs	r3, #222	; 0xde
	}
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	08004fa8 	.word	0x08004fa8

08000c24 <maxBusprobe>:

uint8_t maxBusprobe(SPI_HandleTypeDef *hspi)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	uint8_t HRSL = regRd(hspi, rHRSL);
 8000c2c:	21f8      	movs	r1, #248	; 0xf8
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ff22 	bl	8000a78 <regRd>
 8000c34:	4603      	mov	r3, r0
 8000c36:	73fb      	strb	r3, [r7, #15]
	HRSL &= 0xc0; //make everything except J-K 0
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c3e:	73fb      	strb	r3, [r7, #15]
	HRSL = HRSL >> 6; //shift bits to LSB
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	099b      	lsrs	r3, r3, #6
 8000c44:	73fb      	strb	r3, [r7, #15]
	switch(HRSL) {
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d860      	bhi.n	8000d0e <maxBusprobe+0xea>
 8000c4c:	a201      	add	r2, pc, #4	; (adr r2, 8000c54 <maxBusprobe+0x30>)
 8000c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c52:	bf00      	nop
 8000c54:	08000c65 	.word	0x08000c65
 8000c58:	08000c73 	.word	0x08000c73
 8000c5c:	08000cbf 	.word	0x08000cbf
 8000c60:	08000d0b 	.word	0x08000d0b
		case 0x00:
            regWr(hspi,rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 8000c64:	22d1      	movs	r2, #209	; 0xd1
 8000c66:	21d8      	movs	r1, #216	; 0xd8
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff fea3 	bl	80009b4 <regWr>
			return 0xfd;
 8000c6e:	23fd      	movs	r3, #253	; 0xfd
 8000c70:	e04e      	b.n	8000d10 <maxBusprobe+0xec>
			// break;
		case 0x01:
			// k state
			if(regRd(hspi,rMODE) & bmLOWSPEED){
 8000c72:	21d8      	movs	r1, #216	; 0xd8
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff feff 	bl	8000a78 <regRd>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d011      	beq.n	8000ca8 <maxBusprobe+0x84>
				//full speed
				regWr(hspi, rMODE, 0x80|0x40|0x08|0x01);
 8000c84:	22c9      	movs	r2, #201	; 0xc9
 8000c86:	21d8      	movs	r1, #216	; 0xd8
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff fe93 	bl	80009b4 <regWr>
				vbusState = 2;
 8000c8e:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <maxBusprobe+0xf4>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	601a      	str	r2, [r3, #0]
				printf("D+ high and D- low: %x\n",regRd(hspi,rMODE));
 8000c94:	21d8      	movs	r1, #216	; 0xd8
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff feee 	bl	8000a78 <regRd>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	481e      	ldr	r0, [pc, #120]	; (8000d1c <maxBusprobe+0xf8>)
 8000ca2:	f003 f9f9 	bl	8004098 <iprintf>
 8000ca6:	e008      	b.n	8000cba <maxBusprobe+0x96>
			}
			else {
				//low speed
				printf("D+ low and D- high: %x\n",regRd(hspi,rMODE));
 8000ca8:	21d8      	movs	r1, #216	; 0xd8
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fee4 	bl	8000a78 <regRd>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481a      	ldr	r0, [pc, #104]	; (8000d20 <maxBusprobe+0xfc>)
 8000cb6:	f003 f9ef 	bl	8004098 <iprintf>
			}
			return 0x02;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	e028      	b.n	8000d10 <maxBusprobe+0xec>
			// break;
		case 0x02:
			//j state
			if(regRd(hspi,rMODE) & bmLOWSPEED){
 8000cbe:	21d8      	movs	r1, #216	; 0xd8
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff fed9 	bl	8000a78 <regRd>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d009      	beq.n	8000ce4 <maxBusprobe+0xc0>
				//low speed
				printf("D+ low and D- high: %x\n",regRd(hspi,rMODE));
 8000cd0:	21d8      	movs	r1, #216	; 0xd8
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fed0 	bl	8000a78 <regRd>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4810      	ldr	r0, [pc, #64]	; (8000d20 <maxBusprobe+0xfc>)
 8000cde:	f003 f9db 	bl	8004098 <iprintf>
 8000ce2:	e010      	b.n	8000d06 <maxBusprobe+0xe2>
			}
			else {
				//full speed
				vbusState = 2;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <maxBusprobe+0xf4>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	601a      	str	r2, [r3, #0]
				regWr(hspi, rMODE, 0x80|0x40|0x08|0x01);
 8000cea:	22c9      	movs	r2, #201	; 0xc9
 8000cec:	21d8      	movs	r1, #216	; 0xd8
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fe60 	bl	80009b4 <regWr>
				printf("D+ high and D- low: %x\n",regRd(hspi,rMODE));
 8000cf4:	21d8      	movs	r1, #216	; 0xd8
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff febe 	bl	8000a78 <regRd>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4806      	ldr	r0, [pc, #24]	; (8000d1c <maxBusprobe+0xf8>)
 8000d02:	f003 f9c9 	bl	8004098 <iprintf>
			}
			return 0x03;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e002      	b.n	8000d10 <maxBusprobe+0xec>
			// break;
		case 0x03:
			return 0x04;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	e000      	b.n	8000d10 <maxBusprobe+0xec>
			// break;
		default:
			return 0xbc;
 8000d0e:	23bc      	movs	r3, #188	; 0xbc
	}
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000144 	.word	0x20000144
 8000d1c:	08004fb0 	.word	0x08004fb0
 8000d20:	08004fc8 	.word	0x08004fc8

08000d24 <setAllEp>:
//RedGear XBOXUSB
#define MAX_PACKET_SIZE 40

uint8_t setupPacket[8] = {0,0,0,0,0,0,0,0};

void setAllEp(){
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
	allEp[0].epAddr = 0x00;
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <setAllEp+0x88>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
	allEp[0].maxPktSize = 0x40;
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <setAllEp+0x88>)
 8000d30:	2240      	movs	r2, #64	; 0x40
 8000d32:	705a      	strb	r2, [r3, #1]
	allEp[0].bmNakPower = 0x0e;
 8000d34:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <setAllEp+0x88>)
 8000d36:	7893      	ldrb	r3, [r2, #2]
 8000d38:	210e      	movs	r1, #14
 8000d3a:	f361 0387 	bfi	r3, r1, #2, #6
 8000d3e:	7093      	strb	r3, [r2, #2]
	allEp[1].epAddr = 0x01;
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <setAllEp+0x88>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	70da      	strb	r2, [r3, #3]
	allEp[1].epAttribs = 0x03;
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <setAllEp+0x88>)
 8000d48:	2203      	movs	r2, #3
 8000d4a:	715a      	strb	r2, [r3, #5]
	allEp[1].bmSndToggle = 0x00;
 8000d4c:	4a17      	ldr	r2, [pc, #92]	; (8000dac <setAllEp+0x88>)
 8000d4e:	7953      	ldrb	r3, [r2, #5]
 8000d50:	f36f 0300 	bfc	r3, #0, #1
 8000d54:	7153      	strb	r3, [r2, #5]
	allEp[1].bmRcvToggle = 0x00;
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <setAllEp+0x88>)
 8000d58:	7953      	ldrb	r3, [r2, #5]
 8000d5a:	f36f 0341 	bfc	r3, #1, #1
 8000d5e:	7153      	strb	r3, [r2, #5]
	allEp[1].maxPktSize = 0x20;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <setAllEp+0x88>)
 8000d62:	2220      	movs	r2, #32
 8000d64:	711a      	strb	r2, [r3, #4]
	allEp[1].bmNakPower = 0x01;
 8000d66:	4a11      	ldr	r2, [pc, #68]	; (8000dac <setAllEp+0x88>)
 8000d68:	7953      	ldrb	r3, [r2, #5]
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	f361 0387 	bfi	r3, r1, #2, #6
 8000d70:	7153      	strb	r3, [r2, #5]
	allEp[2].epAddr = 0x02;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <setAllEp+0x88>)
 8000d74:	2202      	movs	r2, #2
 8000d76:	719a      	strb	r2, [r3, #6]
	allEp[2].epAttribs = 0x03;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <setAllEp+0x88>)
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	721a      	strb	r2, [r3, #8]
	allEp[2].bmSndToggle = 0x00;
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <setAllEp+0x88>)
 8000d80:	7a13      	ldrb	r3, [r2, #8]
 8000d82:	f36f 0300 	bfc	r3, #0, #1
 8000d86:	7213      	strb	r3, [r2, #8]
	allEp[2].bmRcvToggle = 0x00;
 8000d88:	4a08      	ldr	r2, [pc, #32]	; (8000dac <setAllEp+0x88>)
 8000d8a:	7a13      	ldrb	r3, [r2, #8]
 8000d8c:	f36f 0341 	bfc	r3, #1, #1
 8000d90:	7213      	strb	r3, [r2, #8]
	allEp[2].maxPktSize = 0x20;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <setAllEp+0x88>)
 8000d94:	2220      	movs	r2, #32
 8000d96:	71da      	strb	r2, [r3, #7]
	allEp[2].bmNakPower = 0x01;
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <setAllEp+0x88>)
 8000d9a:	7a13      	ldrb	r3, [r2, #8]
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	f361 0387 	bfi	r3, r1, #2, #6
 8000da2:	7213      	strb	r3, [r2, #8]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	200000f0 	.word	0x200000f0

08000db0 <USBdispatchPacket>:
	allEp[2].bmNakPower = 0x01;

	return 0;
}

uint8_t USBdispatchPacket(SPI_HandleTypeDef *hspi, uint8_t token, uint8_t ep, uint16_t naks){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	4608      	mov	r0, r1
 8000dba:	4611      	mov	r1, r2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	70fb      	strb	r3, [r7, #3]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	70bb      	strb	r3, [r7, #2]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	803b      	strh	r3, [r7, #0]
	uint32_t timeout = HAL_GetTick() + 5000;
 8000dca:	f000 ff6b 	bl	8001ca4 <HAL_GetTick>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000dd4:	3308      	adds	r3, #8
 8000dd6:	60fb      	str	r3, [r7, #12]
	uint8_t tmpdata;
	uint8_t rcode = 0x00;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	72fb      	strb	r3, [r7, #11]
	uint8_t retry_count = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	72bb      	strb	r3, [r7, #10]
	uint16_t nak_count = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	813b      	strh	r3, [r7, #8]

	while((int32_t)((HAL_GetTick() - timeout) < 0L)){
 8000de4:	bf00      	nop
 8000de6:	f000 ff5d 	bl	8001ca4 <HAL_GetTick>
			default:
				return rcode;
		}
	}

	return rcode;
 8000dea:	7afb      	ldrb	r3, [r7, #11]
// 		else if((regRd(hspi,rHRSL)&0x0f) == 0x04){
// 			naks--;
// 		}
// 	}
// 	return regRd(hspi,rHRSL)&0x0f;
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <USBgetDescriptor>:
	// 	}
	// }
	// return regRd(hspi,rHRSL);
}

uint8_t USBgetDescriptor(SPI_HandleTypeDef *hspi){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b090      	sub	sp, #64	; 0x40
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
		SETUP stage
	*/
	//send a setup packet
	//D0NE: find what 8 bytes constitute a setup packet data
	//1. write 8 bytes of setup data to SUDFIFO
	uint8_t setupPacket[8] = {
 8000dfc:	4a46      	ldr	r2, [pc, #280]	; (8000f18 <USBgetDescriptor+0x124>)
 8000dfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e06:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00,
			0x30, //lenght to be retrived
			0x00
	};

	regWrN(hspi,rSUDFIFO,setupPacket,8);
 8000e0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000e0e:	2308      	movs	r3, #8
 8000e10:	2120      	movs	r1, #32
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fe00 	bl	8000a18 <regWrN>
	//2. Load the HXFR register with 00010000 this will initiate the transfer
	regWr(hspi,rHXFR,0x10);
 8000e18:	2210      	movs	r2, #16
 8000e1a:	21f0      	movs	r1, #240	; 0xf0
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fdc9 	bl	80009b4 <regWr>
	HAL_Delay(1);
 8000e22:	2001      	movs	r0, #1
 8000e24:	f000 ff48 	bl	8001cb8 <HAL_Delay>
	//3. wait for HXFRDNIRQ bit to be set appx 18 bit times
	// printf("waiting for HXFRDNIRQ...\n");
	while(!(regRd(hspi,rHIRQ) & bmHXFRNDIRQ));
 8000e28:	bf00      	nop
 8000e2a:	21c8      	movs	r1, #200	; 0xc8
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff fe23 	bl	8000a78 <regRd>
 8000e32:	4603      	mov	r3, r0
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	daf7      	bge.n	8000e2a <USBgetDescriptor+0x36>
	//4. check the HRSLT[3:0] bits for result of transfer
	regRd(hspi,rHRSL);
 8000e3a:	21f8      	movs	r1, #248	; 0xf8
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff fe1b 	bl	8000a78 <regRd>
	/*
		DATA stage
	*/
	//send bulk-in request
	//send token
	USBdispatchPacket(hspi,0x00,0x00,50);
 8000e42:	2332      	movs	r3, #50	; 0x32
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ffb1 	bl	8000db0 <USBdispatchPacket>
//		 *
//		 *
//		 *
//		 */
//	}
	if(regRd(hspi,rHIRQ)&bmRCVDAVIRQ){
 8000e4e:	21c8      	movs	r1, #200	; 0xc8
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff fe11 	bl	8000a78 <regRd>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d02b      	beq.n	8000eb8 <USBgetDescriptor+0xc4>
		temp = regRd(hspi,rHIRQ);
 8000e60:	21c8      	movs	r1, #200	; 0xc8
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fe08 	bl	8000a78 <regRd>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		temp &= 0xfb; //We need to set the bmRCVDAVIRQ bit back to 0 after reading
 8000e6e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e72:	f023 0304 	bic.w	r3, r3, #4
 8000e76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		regWr(hspi,rHIRQ,temp);
 8000e7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e7e:	461a      	mov	r2, r3
 8000e80:	21c8      	movs	r1, #200	; 0xc8
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff fd96 	bl	80009b4 <regWr>
		RCVBC = regRd(hspi,rRCVBC);
 8000e88:	2130      	movs	r1, #48	; 0x30
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff fdf4 	bl	8000a78 <regRd>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		printf("RCVBC: %x\n",RCVBC);
 8000e96:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481f      	ldr	r0, [pc, #124]	; (8000f1c <USBgetDescriptor+0x128>)
 8000e9e:	f003 f8fb 	bl	8004098 <iprintf>
	else {
		return 0xff;
	}
	//Read RCVFIFO
	uint8_t DESC[40];
	regRdN(hspi,rRCVFIFO,DESC,RCVBC);
 8000ea2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000ea6:	f107 0208 	add.w	r2, r7, #8
 8000eaa:	2108      	movs	r1, #8
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff fe0f 	bl	8000ad0 <regRdN>
	for(int i = 0; i < RCVBC; i++){
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000eb6:	e00d      	b.n	8000ed4 <USBgetDescriptor+0xe0>
		return 0xff;
 8000eb8:	23ff      	movs	r3, #255	; 0xff
 8000eba:	e029      	b.n	8000f10 <USBgetDescriptor+0x11c>
		printf("%x\n",DESC[i]);
 8000ebc:	f107 0208 	add.w	r2, r7, #8
 8000ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ec2:	4413      	add	r3, r2
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4815      	ldr	r0, [pc, #84]	; (8000f20 <USBgetDescriptor+0x12c>)
 8000eca:	f003 f8e5 	bl	8004098 <iprintf>
	for(int i = 0; i < RCVBC; i++){
 8000ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ed4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000ed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000eda:	429a      	cmp	r2, r3
 8000edc:	dbee      	blt.n	8000ebc <USBgetDescriptor+0xc8>
//	printf("bNumConfigurations: %x\n",DESC[17]);
	/*
		STATUS stage
	*/
	//send HS-OUT
	regWr(hspi,rHXFR,0xA0);
 8000ede:	22a0      	movs	r2, #160	; 0xa0
 8000ee0:	21f0      	movs	r1, #240	; 0xf0
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff fd66 	bl	80009b4 <regWr>
	HAL_Delay(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f000 fee5 	bl	8001cb8 <HAL_Delay>
	// printf("waiting for HXFRDNIRQ...\n");
	while(!(regRd(hspi,rHIRQ) & bmHXFRNDIRQ));
 8000eee:	bf00      	nop
 8000ef0:	21c8      	movs	r1, #200	; 0xc8
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fdc0 	bl	8000a78 <regRd>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	daf7      	bge.n	8000ef0 <USBgetDescriptor+0xfc>

	return regRd(hspi,rHRSL)&0x0F;
 8000f00:	21f8      	movs	r1, #248	; 0xf8
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff fdb8 	bl	8000a78 <regRd>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	b2db      	uxtb	r3, r3
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3740      	adds	r7, #64	; 0x40
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	08004ff0 	.word	0x08004ff0
 8000f1c:	08004fe0 	.word	0x08004fe0
 8000f20:	08004fec 	.word	0x08004fec

08000f24 <USBgetEpInfoEntry>:

	return USBdispatchPacket(hspi,0x80,0x00,naks);
}


EpInfo* USBgetEpInfoEntry(uint8_t ep){
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	EpInfo *pep = allEp;
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <USBgetEpInfoEntry+0x40>)
 8000f30:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 3; i++){
 8000f32:	2300      	movs	r3, #0
 8000f34:	72fb      	strb	r3, [r7, #11]
 8000f36:	e00c      	b.n	8000f52 <USBgetEpInfoEntry+0x2e>
		if((pep)->epAddr == ep)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	79fa      	ldrb	r2, [r7, #7]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d101      	bne.n	8000f46 <USBgetEpInfoEntry+0x22>
			return pep;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	e009      	b.n	8000f5a <USBgetEpInfoEntry+0x36>
		pep++;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3303      	adds	r3, #3
 8000f4a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 3; i++){
 8000f4c:	7afb      	ldrb	r3, [r7, #11]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	72fb      	strb	r3, [r7, #11]
 8000f52:	7afb      	ldrb	r3, [r7, #11]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d9ef      	bls.n	8000f38 <USBgetEpInfoEntry+0x14>
	}
	return NULL;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	200000f0 	.word	0x200000f0

08000f68 <maxSetAddress>:


uint8_t maxSetAddress(SPI_HandleTypeDef *hspi, uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *naks){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	72fb      	strb	r3, [r7, #11]
 8000f76:	4613      	mov	r3, r2
 8000f78:	72bb      	strb	r3, [r7, #10]
	*(ppep) = USBgetEpInfoEntry(ep);
 8000f7a:	7abb      	ldrb	r3, [r7, #10]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ffd1 	bl	8000f24 <USBgetEpInfoEntry>
 8000f82:	4602      	mov	r2, r0
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	601a      	str	r2, [r3, #0]

	if(!*ppep){
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <maxSetAddress+0x2c>
		return 0xdb;
 8000f90:	23db      	movs	r3, #219	; 0xdb
 8000f92:	e01c      	b.n	8000fce <maxSetAddress+0x66>
	}

	*naks = (0x0001UL << (((*ppep)->bmNakPower > 15) ? 15 : (*ppep)->bmNakPower));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	789b      	ldrb	r3, [r3, #2]
 8000f9a:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	bf28      	it	cs
 8000fa4:	230f      	movcs	r3, #15
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	2301      	movs	r3, #1
 8000fac:	4093      	lsls	r3, r2
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	801a      	strh	r2, [r3, #0]
	(*naks)--;
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	801a      	strh	r2, [r3, #0]

	regWr(hspi, rPERADDR, addr);
 8000fc0:	7afb      	ldrb	r3, [r7, #11]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	21e0      	movs	r1, #224	; 0xe0
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f7ff fcf4 	bl	80009b4 <regWr>

	return 0x00;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <USBctrlReq>:

uint8_t USBctrlReq(SPI_HandleTypeDef *hspi, uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi, uint8_t wIndLo, uint8_t wIndHi, uint8_t wLenLo, uint8_t wLenHi, uint16_t nbytes, uint8_t* dataptr){
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b08c      	sub	sp, #48	; 0x30
 8000fda:	af02      	add	r7, sp, #8
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	4608      	mov	r0, r1
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	70fb      	strb	r3, [r7, #3]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70bb      	strb	r3, [r7, #2]
 8000fec:	4613      	mov	r3, r2
 8000fee:	707b      	strb	r3, [r7, #1]
	uint8_t rcode;
	SETUP_PKT setup_pkt;
	uint16_t naks = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	82fb      	strh	r3, [r7, #22]
	bool direction = false;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t total = 0x0000; 
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	843b      	strh	r3, [r7, #32]
	total |= wLenHi;
 8000ffe:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001002:	b29a      	uxth	r2, r3
 8001004:	8c3b      	ldrh	r3, [r7, #32]
 8001006:	4313      	orrs	r3, r2
 8001008:	843b      	strh	r3, [r7, #32]
	total = total << 8;
 800100a:	8c3b      	ldrh	r3, [r7, #32]
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	843b      	strh	r3, [r7, #32]
	total |= wLenLo;
 8001010:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001014:	b29a      	uxth	r2, r3
 8001016:	8c3b      	ldrh	r3, [r7, #32]
 8001018:	4313      	orrs	r3, r2
 800101a:	843b      	strh	r3, [r7, #32]
	EpInfo *pep = NULL;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]

	rcode = maxSetAddress(hspi, addr, ep, &pep, &naks);
 8001020:	f107 0010 	add.w	r0, r7, #16
 8001024:	78ba      	ldrb	r2, [r7, #2]
 8001026:	78f9      	ldrb	r1, [r7, #3]
 8001028:	f107 0316 	add.w	r3, r7, #22
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	4603      	mov	r3, r0
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff99 	bl	8000f68 <maxSetAddress>
 8001036:	4603      	mov	r3, r0
 8001038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	regWr(hspi, rPERADDR, addr);
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	461a      	mov	r2, r3
 8001040:	21e0      	movs	r1, #224	; 0xe0
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fcb6 	bl	80009b4 <regWr>

	direction = ((bmReqType & 0x80) > 0);
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104e:	2b00      	cmp	r3, #0
 8001050:	bfcc      	ite	gt
 8001052:	2301      	movgt	r3, #1
 8001054:	2300      	movle	r3, #0
 8001056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	setup_pkt.bmRequestType = bmReqType;
 800105a:	787b      	ldrb	r3, [r7, #1]
 800105c:	763b      	strb	r3, [r7, #24]
	setup_pkt.bRequest = bRequest;
 800105e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001062:	767b      	strb	r3, [r7, #25]
	setup_pkt.wValueLo = wValLo;
 8001064:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001068:	76bb      	strb	r3, [r7, #26]
	setup_pkt.wValueHi = wValHi;
 800106a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800106e:	76fb      	strb	r3, [r7, #27]
	setup_pkt.wIndexLo = wIndLo;
 8001070:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001074:	773b      	strb	r3, [r7, #28]
	setup_pkt.wIndexHi = wIndHi;
 8001076:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800107a:	777b      	strb	r3, [r7, #29]
	setup_pkt.wLengthLo = wLenLo;
 800107c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001080:	77bb      	strb	r3, [r7, #30]
	setup_pkt.wLengthHi = wLenHi;
 8001082:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001086:	77fb      	strb	r3, [r7, #31]

	regWrN(hspi, rSUDFIFO, (uint8_t*) &setup_pkt, 8);
 8001088:	f107 0218 	add.w	r2, r7, #24
 800108c:	2308      	movs	r3, #8
 800108e:	2120      	movs	r1, #32
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff fcc1 	bl	8000a18 <regWrN>

	rcode = USBdispatchPacket(hspi, 0x10, ep, naks);
 8001096:	8afb      	ldrh	r3, [r7, #22]
 8001098:	78ba      	ldrb	r2, [r7, #2]
 800109a:	2110      	movs	r1, #16
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff fe87 	bl	8000db0 <USBdispatchPacket>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(rcode)
 80010a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <USBctrlReq+0xe0>
		return rcode;
 80010b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010b4:	e072      	b.n	800119c <USBctrlReq+0x1c6>
	//data stage
	if(dataptr != NULL){
 80010b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d062      	beq.n	8001182 <USBctrlReq+0x1ac>
		if(direction){
 80010bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d043      	beq.n	800114c <USBctrlReq+0x176>
			uint16_t left = total;
 80010c4:	8c3b      	ldrh	r3, [r7, #32]
 80010c6:	84bb      	strh	r3, [r7, #36]	; 0x24
			
			pep->bmRcvToggle = 1;
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	7893      	ldrb	r3, [r2, #2]
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	7093      	strb	r3, [r2, #2]

			while(left) {
 80010d2:	e037      	b.n	8001144 <USBctrlReq+0x16e>
				uint16_t read = nbytes;
 80010d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80010d8:	81fb      	strh	r3, [r7, #14]
				rcode = USBinTransfer(hspi,pep,naks,&read,dataptr,0);
 80010da:	6939      	ldr	r1, [r7, #16]
 80010dc:	8afa      	ldrh	r2, [r7, #22]
 80010de:	f107 000e 	add.w	r0, r7, #14
 80010e2:	2300      	movs	r3, #0
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	4603      	mov	r3, r0
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f859 	bl	80011a4 <USBinTransfer>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if(rcode == 0x06) {
 80010f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010fc:	2b06      	cmp	r3, #6
 80010fe:	d111      	bne.n	8001124 <USBctrlReq+0x14e>
					pep->bmRcvToggle = (regRd(hspi,rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8001100:	21f8      	movs	r1, #248	; 0xf8
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fcb8 	bl	8000a78 <regRd>
 8001108:	4603      	mov	r3, r0
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	2b00      	cmp	r3, #0
 8001112:	bf0c      	ite	eq
 8001114:	2301      	moveq	r3, #1
 8001116:	2300      	movne	r3, #0
 8001118:	b2d9      	uxtb	r1, r3
 800111a:	7893      	ldrb	r3, [r2, #2]
 800111c:	f361 0341 	bfi	r3, r1, #1, #1
 8001120:	7093      	strb	r3, [r2, #2]
 8001122:	e00f      	b.n	8001144 <USBctrlReq+0x16e>
					continue;
				}
				if(rcode)
 8001124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <USBctrlReq+0x15c>
					return rcode;
 800112c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001130:	e034      	b.n	800119c <USBctrlReq+0x1c6>
				left -= read;
 8001132:	89fb      	ldrh	r3, [r7, #14]
 8001134:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	84bb      	strh	r3, [r7, #36]	; 0x24

				if(read<nbytes)
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001140:	429a      	cmp	r2, r3
 8001142:	d816      	bhi.n	8001172 <USBctrlReq+0x19c>
			while(left) {
 8001144:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1c4      	bne.n	80010d4 <USBctrlReq+0xfe>
 800114a:	e013      	b.n	8001174 <USBctrlReq+0x19e>
					break;
			}
		}
		else{
			pep->bmSndToggle = 1;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	7893      	ldrb	r3, [r2, #2]
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	7093      	strb	r3, [r2, #2]
			rcode = USBoutTransfer(hspi,pep,naks,nbytes,dataptr);
 8001156:	6939      	ldr	r1, [r7, #16]
 8001158:	8afa      	ldrh	r2, [r7, #22]
 800115a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800115e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	4603      	mov	r3, r0
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f8e3 	bl	8001330 <USBoutTransfer>
 800116a:	4603      	mov	r3, r0
 800116c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001170:	e000      	b.n	8001174 <USBctrlReq+0x19e>
					break;
 8001172:	bf00      	nop
		}
		if(rcode)
 8001174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <USBctrlReq+0x1ac>
			return rcode;
 800117c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001180:	e00c      	b.n	800119c <USBctrlReq+0x1c6>
	}
	return USBdispatchPacket(hspi,(direction)?0xa0:0x80,ep,naks);
 8001182:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <USBctrlReq+0x1b8>
 800118a:	21a0      	movs	r1, #160	; 0xa0
 800118c:	e000      	b.n	8001190 <USBctrlReq+0x1ba>
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	8afb      	ldrh	r3, [r7, #22]
 8001192:	78ba      	ldrb	r2, [r7, #2]
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff fe0b 	bl	8000db0 <USBdispatchPacket>
 800119a:	4603      	mov	r3, r0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <USBinTransfer>:


uint8_t USBinTransfer(SPI_HandleTypeDef *hspi, EpInfo *pep, uint16_t naks, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	4613      	mov	r3, r2
 80011b2:	80fb      	strh	r3, [r7, #6]
	uint8_t rcode = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	75fb      	strb	r3, [r7, #23]
	uint8_t pktsize;
	uint16_t nbytes = *nbytesptr;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	827b      	strh	r3, [r7, #18]
	uint8_t maxpktsize = pep->maxPktSize;
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	785b      	ldrb	r3, [r3, #1]
 80011c2:	747b      	strb	r3, [r7, #17]

	*nbytesptr = 0;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2200      	movs	r2, #0
 80011c8:	801a      	strh	r2, [r3, #0]
	regWr(hspi, rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0);
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	789b      	ldrb	r3, [r3, #2]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <USBinTransfer+0x38>
 80011d8:	2320      	movs	r3, #32
 80011da:	e000      	b.n	80011de <USBinTransfer+0x3a>
 80011dc:	2310      	movs	r3, #16
 80011de:	461a      	mov	r2, r3
 80011e0:	21e8      	movs	r1, #232	; 0xe8
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f7ff fbe6 	bl	80009b4 <regWr>

	while(1) {
		rcode = USBdispatchPacket(hspi, 0x00, pep->epAddr, naks);
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	781a      	ldrb	r2, [r3, #0]
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	2100      	movs	r1, #0
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f7ff fddd 	bl	8000db0 <USBdispatchPacket>
 80011f6:	4603      	mov	r3, r0
 80011f8:	75fb      	strb	r3, [r7, #23]
		printf("epaddress: %x\n",pep->epAddr);
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	4619      	mov	r1, r3
 8001200:	4849      	ldr	r0, [pc, #292]	; (8001328 <USBinTransfer+0x184>)
 8001202:	f002 ff49 	bl	8004098 <iprintf>
		if(rcode == 0x06) {
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	2b06      	cmp	r3, #6
 800120a:	d114      	bne.n	8001236 <USBinTransfer+0x92>
			pep->bmRcvToggle = regRd(hspi, rHRSL & bmRCVTOGRD) ? 0 : 1;
 800120c:	2110      	movs	r1, #16
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f7ff fc32 	bl	8000a78 <regRd>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	bf0c      	ite	eq
 800121a:	2301      	moveq	r3, #1
 800121c:	2300      	movne	r3, #0
 800121e:	b2d9      	uxtb	r1, r3
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	7893      	ldrb	r3, [r2, #2]
 8001224:	f361 0341 	bfi	r3, r1, #1, #1
 8001228:	7093      	strb	r3, [r2, #2]
			regWr(hspi, rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG1);
 800122a:	2220      	movs	r2, #32
 800122c:	21e8      	movs	r1, #232	; 0xe8
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff fbc0 	bl	80009b4 <regWr>
			continue;
 8001234:	e071      	b.n	800131a <USBinTransfer+0x176>
		}
		if(rcode) {
 8001236:	7dfb      	ldrb	r3, [r7, #23]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d16f      	bne.n	800131c <USBinTransfer+0x178>
			break;
		}
		if((regRd(hspi, rHIRQ) & bmRCVDAVIRQ) == 0) {
 800123c:	21c8      	movs	r1, #200	; 0xc8
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff fc1a 	bl	8000a78 <regRd>
 8001244:	4603      	mov	r3, r0
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10b      	bne.n	8001266 <USBinTransfer+0xc2>
			printf("HIRQ: %x\n",regRd(hspi, rHIRQ));
 800124e:	21c8      	movs	r1, #200	; 0xc8
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f7ff fc11 	bl	8000a78 <regRd>
 8001256:	4603      	mov	r3, r0
 8001258:	4619      	mov	r1, r3
 800125a:	4834      	ldr	r0, [pc, #208]	; (800132c <USBinTransfer+0x188>)
 800125c:	f002 ff1c 	bl	8004098 <iprintf>
			rcode = 0xf0;
 8001260:	23f0      	movs	r3, #240	; 0xf0
 8001262:	75fb      	strb	r3, [r7, #23]
			break;
 8001264:	e05b      	b.n	800131e <USBinTransfer+0x17a>
		}
		pktsize = regRd(hspi, rRCVBC);
 8001266:	2130      	movs	r1, #48	; 0x30
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f7ff fc05 	bl	8000a78 <regRd>
 800126e:	4603      	mov	r3, r0
 8001270:	75bb      	strb	r3, [r7, #22]
		if(pktsize > nbytes) {
 8001272:	7dbb      	ldrb	r3, [r7, #22]
 8001274:	b29b      	uxth	r3, r3
 8001276:	8a7a      	ldrh	r2, [r7, #18]
 8001278:	429a      	cmp	r2, r3
 800127a:	d201      	bcs.n	8001280 <USBinTransfer+0xdc>
			pktsize = nbytes;
 800127c:	8a7b      	ldrh	r3, [r7, #18]
 800127e:	75bb      	strb	r3, [r7, #22]
		}

		int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001286:	b29b      	uxth	r3, r3
 8001288:	8a7a      	ldrh	r2, [r7, #18]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	b29b      	uxth	r3, r3
 800128e:	82bb      	strh	r3, [r7, #20]

		if(mem_left < 0)
 8001290:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001294:	2b00      	cmp	r3, #0
 8001296:	da01      	bge.n	800129c <USBinTransfer+0xf8>
			mem_left = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	82bb      	strh	r3, [r7, #20]
		
		regRdN(hspi,rRCVFIFO,data,((pktsize > mem_left) ? mem_left : pktsize));
 800129c:	7dba      	ldrb	r2, [r7, #22]
 800129e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012a2:	4293      	cmp	r3, r2
 80012a4:	bfa8      	it	ge
 80012a6:	4613      	movge	r3, r2
 80012a8:	6a3a      	ldr	r2, [r7, #32]
 80012aa:	2108      	movs	r1, #8
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f7ff fc0f 	bl	8000ad0 <regRdN>

		regWr(hspi, rHIRQ, bmRCVDAVIRQ);
 80012b2:	2204      	movs	r2, #4
 80012b4:	21c8      	movs	r1, #200	; 0xc8
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f7ff fb7c 	bl	80009b4 <regWr>
		*nbytesptr += pktsize;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	881a      	ldrh	r2, [r3, #0]
 80012c0:	7dbb      	ldrb	r3, [r7, #22]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4413      	add	r3, r2
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	801a      	strh	r2, [r3, #0]

		if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) {
 80012cc:	7dba      	ldrb	r2, [r7, #22]
 80012ce:	7c7b      	ldrb	r3, [r7, #17]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d304      	bcc.n	80012de <USBinTransfer+0x13a>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	8a7a      	ldrh	r2, [r7, #18]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d813      	bhi.n	8001306 <USBinTransfer+0x162>
			pep->bmRcvToggle = ((regRd(hspi, rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 80012de:	21f8      	movs	r1, #248	; 0xf8
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f7ff fbc9 	bl	8000a78 <regRd>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bf14      	ite	ne
 80012f0:	2301      	movne	r3, #1
 80012f2:	2300      	moveq	r3, #0
 80012f4:	b2d9      	uxtb	r1, r3
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	7893      	ldrb	r3, [r2, #2]
 80012fa:	f361 0341 	bfi	r3, r1, #1, #1
 80012fe:	7093      	strb	r3, [r2, #2]
			rcode = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	75fb      	strb	r3, [r7, #23]
			break;
 8001304:	e00b      	b.n	800131e <USBinTransfer+0x17a>
		}
		else if(bInterval > 0)
 8001306:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800130a:	2b00      	cmp	r3, #0
 800130c:	f43f af6c 	beq.w	80011e8 <USBinTransfer+0x44>
			HAL_Delay(bInterval);
 8001310:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fccf 	bl	8001cb8 <HAL_Delay>
	while(1) {
 800131a:	e765      	b.n	80011e8 <USBinTransfer+0x44>
			break;
 800131c:	bf00      	nop
	}
	return rcode;
 800131e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	08004ff8 	.word	0x08004ff8
 800132c:	08005008 	.word	0x08005008

08001330 <USBoutTransfer>:


uint8_t USBoutTransfer(SPI_HandleTypeDef *hspi, EpInfo *pep, uint16_t naks, uint16_t nbytes, uint8_t* data){
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	4611      	mov	r1, r2
 800133c:	461a      	mov	r2, r3
 800133e:	460b      	mov	r3, r1
 8001340:	80fb      	strh	r3, [r7, #6]
 8001342:	4613      	mov	r3, r2
 8001344:	80bb      	strh	r3, [r7, #4]
	uint8_t rcode  = 0x00, retry_count;
 8001346:	2300      	movs	r3, #0
 8001348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t *data_p = data;
 800134c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134e:	623b      	str	r3, [r7, #32]
	uint16_t bytes_tosend, nak_count;
	uint16_t bytes_left = nbytes;
 8001350:	88bb      	ldrh	r3, [r7, #4]
 8001352:	83bb      	strh	r3, [r7, #28]

	uint8_t maxpktsize = pep->maxPktSize;
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	785b      	ldrb	r3, [r3, #1]
 8001358:	76fb      	strb	r3, [r7, #27]

	if(maxpktsize < 1 || maxpktsize > 64)
 800135a:	7efb      	ldrb	r3, [r7, #27]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <USBoutTransfer+0x36>
 8001360:	7efb      	ldrb	r3, [r7, #27]
 8001362:	2b40      	cmp	r3, #64	; 0x40
 8001364:	d901      	bls.n	800136a <USBoutTransfer+0x3a>
		return 0xda;
 8001366:	23da      	movs	r3, #218	; 0xda
 8001368:	e0f3      	b.n	8001552 <USBoutTransfer+0x222>
	
	uint32_t timeout = HAL_GetTick() + 5000;
 800136a:	f000 fc9b 	bl	8001ca4 <HAL_GetTick>
 800136e:	4603      	mov	r3, r0
 8001370:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001374:	3308      	adds	r3, #8
 8001376:	617b      	str	r3, [r7, #20]

	regWr(hspi,rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0);
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	789b      	ldrb	r3, [r3, #2]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <USBoutTransfer+0x5a>
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	e000      	b.n	800138c <USBoutTransfer+0x5c>
 800138a:	2340      	movs	r3, #64	; 0x40
 800138c:	461a      	mov	r2, r3
 800138e:	21e8      	movs	r1, #232	; 0xe8
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f7ff fb0f 	bl	80009b4 <regWr>

	while(bytes_left) {
 8001396:	e0c4      	b.n	8001522 <USBoutTransfer+0x1f2>
		retry_count = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		nak_count = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	83fb      	strh	r3, [r7, #30]
		bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 80013a2:	7efb      	ldrb	r3, [r7, #27]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	8bba      	ldrh	r2, [r7, #28]
 80013a8:	4293      	cmp	r3, r2
 80013aa:	bf28      	it	cs
 80013ac:	4613      	movcs	r3, r2
 80013ae:	827b      	strh	r3, [r7, #18]
		regWrN(hspi, rSNDFIFO, data_p, bytes_tosend);
 80013b0:	8a7b      	ldrh	r3, [r7, #18]
 80013b2:	6a3a      	ldr	r2, [r7, #32]
 80013b4:	2110      	movs	r1, #16
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f7ff fb2e 	bl	8000a18 <regWrN>
		regWr(hspi, rSNDBC, bytes_tosend);
 80013bc:	8a7b      	ldrh	r3, [r7, #18]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	2138      	movs	r1, #56	; 0x38
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f7ff faf5 	bl	80009b4 <regWr>
		regWr(hspi, rHXFR, (0x20 | pep->epAddr));
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	f043 0320 	orr.w	r3, r3, #32
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	21f0      	movs	r1, #240	; 0xf0
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f7ff faeb 	bl	80009b4 <regWr>
		while(!(regRd(hspi, rHIRQ) & bmHXFRNDIRQ));
 80013de:	bf00      	nop
 80013e0:	21c8      	movs	r1, #200	; 0xc8
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f7ff fb48 	bl	8000a78 <regRd>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	daf7      	bge.n	80013e0 <USBoutTransfer+0xb0>
		regWr(hspi, rHIRQ, bmHXFRNDIRQ);
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	21c8      	movs	r1, #200	; 0xc8
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f7ff fadd 	bl	80009b4 <regWr>
		rcode = (regRd(hspi,rHRSL) & 0x0f);
 80013fa:	21f8      	movs	r1, #248	; 0xf8
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f7ff fb3b 	bl	8000a78 <regRd>
 8001402:	4603      	mov	r3, r0
 8001404:	f003 030f 	and.w	r3, r3, #15
 8001408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(rcode && ((int32_t)(HAL_GetTick() - timeout) < 0L)) {
 800140c:	e075      	b.n	80014fa <USBoutTransfer+0x1ca>
			switch(rcode) {
 800140e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001412:	2b06      	cmp	r3, #6
 8001414:	d019      	beq.n	800144a <USBoutTransfer+0x11a>
 8001416:	2b0e      	cmp	r3, #14
 8001418:	d00d      	beq.n	8001436 <USBoutTransfer+0x106>
 800141a:	2b04      	cmp	r3, #4
 800141c:	d000      	beq.n	8001420 <USBoutTransfer+0xf0>
				case 0x06:
					pep->bmSndToggle = (regRd(hspi, rHRSL) & bmSNDTOGRD) ? 0 : 1;
					regWr(hspi, rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0);
					break;
				default:
					goto breakout;
 800141e:	e085      	b.n	800152c <USBoutTransfer+0x1fc>
					nak_count++;
 8001420:	8bfb      	ldrh	r3, [r7, #30]
 8001422:	3301      	adds	r3, #1
 8001424:	83fb      	strh	r3, [r7, #30]
					if(naks && (nak_count == naks))
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d02f      	beq.n	800148c <USBoutTransfer+0x15c>
 800142c:	8bfa      	ldrh	r2, [r7, #30]
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	429a      	cmp	r2, r3
 8001432:	d12b      	bne.n	800148c <USBoutTransfer+0x15c>
						goto breakout;
 8001434:	e07a      	b.n	800152c <USBoutTransfer+0x1fc>
					retry_count++;
 8001436:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800143a:	3301      	adds	r3, #1
 800143c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(retry_count == 3)
 8001440:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001444:	2b03      	cmp	r3, #3
 8001446:	d123      	bne.n	8001490 <USBoutTransfer+0x160>
						goto breakout;
 8001448:	e070      	b.n	800152c <USBoutTransfer+0x1fc>
					pep->bmSndToggle = (regRd(hspi, rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800144a:	21f8      	movs	r1, #248	; 0xf8
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f7ff fb13 	bl	8000a78 <regRd>
 8001452:	4603      	mov	r3, r0
 8001454:	f003 0320 	and.w	r3, r3, #32
 8001458:	2b00      	cmp	r3, #0
 800145a:	bf0c      	ite	eq
 800145c:	2301      	moveq	r3, #1
 800145e:	2300      	movne	r3, #0
 8001460:	b2d9      	uxtb	r1, r3
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	7893      	ldrb	r3, [r2, #2]
 8001466:	f361 0300 	bfi	r3, r1, #0, #1
 800146a:	7093      	strb	r3, [r2, #2]
					regWr(hspi, rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0);
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	789b      	ldrb	r3, [r3, #2]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <USBoutTransfer+0x14e>
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	e000      	b.n	8001480 <USBoutTransfer+0x150>
 800147e:	2340      	movs	r3, #64	; 0x40
 8001480:	461a      	mov	r2, r3
 8001482:	21e8      	movs	r1, #232	; 0xe8
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff fa95 	bl	80009b4 <regWr>
					break;
 800148a:	e002      	b.n	8001492 <USBoutTransfer+0x162>
					break;
 800148c:	bf00      	nop
 800148e:	e000      	b.n	8001492 <USBoutTransfer+0x162>
					break;
 8001490:	bf00      	nop
			}

			regWr(hspi, rSNDBC, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2138      	movs	r1, #56	; 0x38
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f7ff fa8c 	bl	80009b4 <regWr>
			regWr(hspi, rSNDFIFO, *data_p);
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	2110      	movs	r1, #16
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7ff fa85 	bl	80009b4 <regWr>
			regWr(hspi, rSNDBC, bytes_tosend);
 80014aa:	8a7b      	ldrh	r3, [r7, #18]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	2138      	movs	r1, #56	; 0x38
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f7ff fa7e 	bl	80009b4 <regWr>
			regWr(hspi, rHXFR, (0x20 | pep->epAddr));
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f043 0320 	orr.w	r3, r3, #32
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	21f0      	movs	r1, #240	; 0xf0
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f7ff fa74 	bl	80009b4 <regWr>
			while(!(regRd(hspi, rHIRQ) & bmHXFRNDIRQ));
 80014cc:	bf00      	nop
 80014ce:	21c8      	movs	r1, #200	; 0xc8
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff fad1 	bl	8000a78 <regRd>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	daf7      	bge.n	80014ce <USBoutTransfer+0x19e>
			regWr(hspi, rHIRQ,bmHXFRNDIRQ);
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	21c8      	movs	r1, #200	; 0xc8
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7ff fa66 	bl	80009b4 <regWr>
			rcode = (regRd(hspi, rHRSL) & 0x0f);
 80014e8:	21f8      	movs	r1, #248	; 0xf8
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f7ff fac4 	bl	8000a78 <regRd>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(rcode && ((int32_t)(HAL_GetTick() - timeout) < 0L)) {
 80014fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <USBoutTransfer+0x1e2>
 8001502:	f000 fbcf 	bl	8001ca4 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	f6ff af7e 	blt.w	800140e <USBoutTransfer+0xde>
		}
		bytes_left -= bytes_tosend;
 8001512:	8bba      	ldrh	r2, [r7, #28]
 8001514:	8a7b      	ldrh	r3, [r7, #18]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	83bb      	strh	r3, [r7, #28]
		data_p += bytes_tosend;
 800151a:	8a7b      	ldrh	r3, [r7, #18]
 800151c:	6a3a      	ldr	r2, [r7, #32]
 800151e:	4413      	add	r3, r2
 8001520:	623b      	str	r3, [r7, #32]
	while(bytes_left) {
 8001522:	8bbb      	ldrh	r3, [r7, #28]
 8001524:	2b00      	cmp	r3, #0
 8001526:	f47f af37 	bne.w	8001398 <USBoutTransfer+0x68>
	}
breakout:
 800152a:	bf00      	nop
	pep->bmSndToggle = (regRd(hspi, rHRSL) & bmSNDTOGRD) ? 1 : 0;
 800152c:	21f8      	movs	r1, #248	; 0xf8
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f7ff faa2 	bl	8000a78 <regRd>
 8001534:	4603      	mov	r3, r0
 8001536:	f003 0320 	and.w	r3, r3, #32
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf14      	ite	ne
 800153e:	2301      	movne	r3, #1
 8001540:	2300      	moveq	r3, #0
 8001542:	b2d9      	uxtb	r1, r3
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	7893      	ldrb	r3, [r2, #2]
 8001548:	f361 0300 	bfi	r3, r1, #0, #1
 800154c:	7093      	strb	r3, [r2, #2]
	return rcode;
 800154e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001552:	4618      	mov	r0, r3
 8001554:	3728      	adds	r7, #40	; 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <USBin_Transfer>:

uint8_t USBin_Transfer(SPI_HandleTypeDef *hspi, uint8_t addr, uint8_t ep, uint16_t *nbytesptr,uint8_t* data, uint8_t bInterval) {
 800155a:	b580      	push	{r7, lr}
 800155c:	b08a      	sub	sp, #40	; 0x28
 800155e:	af02      	add	r7, sp, #8
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	72fb      	strb	r3, [r7, #11]
 8001568:	4613      	mov	r3, r2
 800156a:	72bb      	strb	r3, [r7, #10]
	EpInfo *pep = NULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
	uint16_t naks = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	82fb      	strh	r3, [r7, #22]

	uint8_t rcode = maxSetAddress(hspi,addr,ep,&pep,&naks);
 8001574:	f107 0018 	add.w	r0, r7, #24
 8001578:	7aba      	ldrb	r2, [r7, #10]
 800157a:	7af9      	ldrb	r1, [r7, #11]
 800157c:	f107 0316 	add.w	r3, r7, #22
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	4603      	mov	r3, r0
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f7ff fcef 	bl	8000f68 <maxSetAddress>
 800158a:	4603      	mov	r3, r0
 800158c:	77fb      	strb	r3, [r7, #31]

	if(rcode){
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <USBin_Transfer+0x3e>
		return rcode;
 8001594:	7ffb      	ldrb	r3, [r7, #31]
 8001596:	e00b      	b.n	80015b0 <USBin_Transfer+0x56>
	}
	return USBinTransfer(hspi,pep,naks,nbytesptr,data,bInterval);
 8001598:	69b9      	ldr	r1, [r7, #24]
 800159a:	8afa      	ldrh	r2, [r7, #22]
 800159c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7ff fdfb 	bl	80011a4 <USBinTransfer>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4618      	mov	r0, r3
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <RGpoll>:
	while(!(regRd(hspi,rHIRQ)&bmHXFRNDIRQ));

	return regRd(hspi,rHRSL)&0x0f;
}

uint8_t RGpoll(SPI_HandleTypeDef *hspi){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af02      	add	r7, sp, #8
 80015be:	6078      	str	r0, [r7, #4]
	uint16_t BUFFER_SIZE = 0x0020;
 80015c0:	2320      	movs	r3, #32
 80015c2:	81fb      	strh	r3, [r7, #14]
	return USBin_Transfer(hspi,0x01,0x01,&BUFFER_SIZE,readBuf,0x04);
 80015c4:	f107 020e 	add.w	r2, r7, #14
 80015c8:	2304      	movs	r3, #4
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <RGpoll+0x30>)
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	4613      	mov	r3, r2
 80015d2:	2201      	movs	r2, #1
 80015d4:	2101      	movs	r1, #1
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffbf 	bl	800155a <USBin_Transfer>
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000220 	.word	0x20000220

080015ec <RGinit>:

uint8_t RGinit(SPI_HandleTypeDef *hspi){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b094      	sub	sp, #80	; 0x50
 80015f0:	af0a      	add	r7, sp, #40	; 0x28
 80015f2:	6078      	str	r0, [r7, #4]
	uint8_t buf[0x14];
	uint8_t rcode;

	setAllEp();
 80015f4:	f7ff fb96 	bl	8000d24 <setAllEp>
	//get descriptor
	rcode = USBctrlReq(hspi,0x00,0x00,0x80,0x06,0x00,0x01,0x00,0x00,0x14,0x00,0x0014,buf);
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	9308      	str	r3, [sp, #32]
 80015fe:	2314      	movs	r3, #20
 8001600:	9307      	str	r3, [sp, #28]
 8001602:	2300      	movs	r3, #0
 8001604:	9306      	str	r3, [sp, #24]
 8001606:	2314      	movs	r3, #20
 8001608:	9305      	str	r3, [sp, #20]
 800160a:	2300      	movs	r3, #0
 800160c:	9304      	str	r3, [sp, #16]
 800160e:	2300      	movs	r3, #0
 8001610:	9303      	str	r3, [sp, #12]
 8001612:	2301      	movs	r3, #1
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	2300      	movs	r3, #0
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	2306      	movs	r3, #6
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fcd6 	bl	8000fd6 <USBctrlReq>
 800162a:	4603      	mov	r3, r0
 800162c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (rcode)
 8001630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <RGinit+0x52>
		return rcode;
 8001638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800163c:	e033      	b.n	80016a6 <RGinit+0xba>
	allEp[0].maxPktSize = 0x40;
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <RGinit+0xc4>)
 8001640:	2240      	movs	r2, #64	; 0x40
 8001642:	705a      	strb	r2, [r3, #1]
	EpInfo *pep = NULL;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
	uint16_t naks;
	//set address
	rcode = USBctrlReq(hspi,0x00,0x00,0x00,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0,NULL);
 8001648:	2300      	movs	r3, #0
 800164a:	9308      	str	r3, [sp, #32]
 800164c:	2300      	movs	r3, #0
 800164e:	9307      	str	r3, [sp, #28]
 8001650:	2300      	movs	r3, #0
 8001652:	9306      	str	r3, [sp, #24]
 8001654:	2300      	movs	r3, #0
 8001656:	9305      	str	r3, [sp, #20]
 8001658:	2300      	movs	r3, #0
 800165a:	9304      	str	r3, [sp, #16]
 800165c:	2300      	movs	r3, #0
 800165e:	9303      	str	r3, [sp, #12]
 8001660:	2300      	movs	r3, #0
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	2301      	movs	r3, #1
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2305      	movs	r3, #5
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2300      	movs	r3, #0
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fcaf 	bl	8000fd6 <USBctrlReq>
 8001678:	4603      	mov	r3, r0
 800167a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	maxSetAddress(hspi,0x01,0x00,&pep,&naks);
 800167e:	f107 020c 	add.w	r2, r7, #12
 8001682:	f107 030a 	add.w	r3, r7, #10
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	4613      	mov	r3, r2
 800168a:	2200      	movs	r2, #0
 800168c:	2101      	movs	r1, #1
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fc6a 	bl	8000f68 <maxSetAddress>
	if (rcode)
 8001694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <RGinit+0xb6>
		return rcode;
 800169c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016a0:	e001      	b.n	80016a6 <RGinit+0xba>

	return rcode;
 80016a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3728      	adds	r7, #40	; 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200000f0 	.word	0x200000f0

080016b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_MspInit+0x5c>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4a14      	ldr	r2, [pc, #80]	; (8001710 <HAL_MspInit+0x5c>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6193      	str	r3, [r2, #24]
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_MspInit+0x5c>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_MspInit+0x5c>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_MspInit+0x5c>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_MspInit+0x5c>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_MspInit+0x60>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <HAL_MspInit+0x60>)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	40021000 	.word	0x40021000
 8001714:	40010000 	.word	0x40010000

08001718 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <HAL_SPI_MspInit+0x8c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d131      	bne.n	800179c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_SPI_MspInit+0x90>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	4a1a      	ldr	r2, [pc, #104]	; (80017a8 <HAL_SPI_MspInit+0x90>)
 800173e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001742:	61d3      	str	r3, [r2, #28]
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_SPI_MspInit+0x90>)
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_SPI_MspInit+0x90>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <HAL_SPI_MspInit+0x90>)
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_SPI_MspInit+0x90>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001768:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800176c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001776:	f107 0310 	add.w	r3, r7, #16
 800177a:	4619      	mov	r1, r3
 800177c:	480b      	ldr	r0, [pc, #44]	; (80017ac <HAL_SPI_MspInit+0x94>)
 800177e:	f000 fba1 	bl	8001ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001782:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4619      	mov	r1, r3
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <HAL_SPI_MspInit+0x94>)
 8001798:	f000 fb94 	bl	8001ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800179c:	bf00      	nop
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40003800 	.word	0x40003800
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010c00 	.word	0x40010c00

080017b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	; 0x30
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0320 	add.w	r3, r7, #32
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a40      	ldr	r2, [pc, #256]	; (80018cc <HAL_TIM_PWM_MspInit+0x11c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d125      	bne.n	800181c <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017d0:	4b3f      	ldr	r3, [pc, #252]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a3e      	ldr	r2, [pc, #248]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 80017d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a38      	ldr	r2, [pc, #224]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
 80017fe:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder3_A_Pin|Encoder3_B_Pin;
 8001800:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	4619      	mov	r1, r3
 8001814:	482f      	ldr	r0, [pc, #188]	; (80018d4 <HAL_TIM_PWM_MspInit+0x124>)
 8001816:	f000 fb55 	bl	8001ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800181a:	e052      	b.n	80018c2 <HAL_TIM_PWM_MspInit+0x112>
  else if(htim_pwm->Instance==TIM2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001824:	d124      	bne.n	8001870 <HAL_TIM_PWM_MspInit+0xc0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001826:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	4a29      	ldr	r2, [pc, #164]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	61d3      	str	r3, [r2, #28]
 8001832:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6193      	str	r3, [r2, #24]
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 8001856:	2303      	movs	r3, #3
 8001858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 0320 	add.w	r3, r7, #32
 8001866:	4619      	mov	r1, r3
 8001868:	481a      	ldr	r0, [pc, #104]	; (80018d4 <HAL_TIM_PWM_MspInit+0x124>)
 800186a:	f000 fb2b 	bl	8001ec4 <HAL_GPIO_Init>
}
 800186e:	e028      	b.n	80018c2 <HAL_TIM_PWM_MspInit+0x112>
  else if(htim_pwm->Instance==TIM3)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a18      	ldr	r2, [pc, #96]	; (80018d8 <HAL_TIM_PWM_MspInit+0x128>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d123      	bne.n	80018c2 <HAL_TIM_PWM_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6193      	str	r3, [r2, #24]
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_TIM_PWM_MspInit+0x120>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 80018aa:	23c0      	movs	r3, #192	; 0xc0
 80018ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <HAL_TIM_PWM_MspInit+0x124>)
 80018be:	f000 fb01 	bl	8001ec4 <HAL_GPIO_Init>
}
 80018c2:	bf00      	nop
 80018c4:	3730      	adds	r7, #48	; 0x30
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40012c00 	.word	0x40012c00
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40010800 	.word	0x40010800
 80018d8:	40000400 	.word	0x40000400

080018dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_TIM_Base_MspInit+0x34>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10b      	bne.n	8001906 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_TIM_Base_MspInit+0x38>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_TIM_Base_MspInit+0x38>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	61d3      	str	r3, [r2, #28]
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_TIM_Base_MspInit+0x38>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	40000800 	.word	0x40000800
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0318 	add.w	r3, r7, #24
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a3d      	ldr	r2, [pc, #244]	; (8001a28 <HAL_TIM_MspPostInit+0x110>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d119      	bne.n	800196c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	4b3c      	ldr	r3, [pc, #240]	; (8001a2c <HAL_TIM_MspPostInit+0x114>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a3b      	ldr	r2, [pc, #236]	; (8001a2c <HAL_TIM_MspPostInit+0x114>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <HAL_TIM_MspPostInit+0x114>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Moror3_PWM_Pin|Motor3_DIR_Pin;
 8001950:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2302      	movs	r3, #2
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195e:	f107 0318 	add.w	r3, r7, #24
 8001962:	4619      	mov	r1, r3
 8001964:	4832      	ldr	r0, [pc, #200]	; (8001a30 <HAL_TIM_MspPostInit+0x118>)
 8001966:	f000 faad 	bl	8001ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800196a:	e059      	b.n	8001a20 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001974:	d118      	bne.n	80019a8 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <HAL_TIM_MspPostInit+0x114>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	4a2c      	ldr	r2, [pc, #176]	; (8001a2c <HAL_TIM_MspPostInit+0x114>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	6193      	str	r3, [r2, #24]
 8001982:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <HAL_TIM_MspPostInit+0x114>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Motor1_DIR_Pin|Motor1_PWM_Pin;
 800198e:	230c      	movs	r3, #12
 8001990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2302      	movs	r3, #2
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 0318 	add.w	r3, r7, #24
 800199e:	4619      	mov	r1, r3
 80019a0:	4823      	ldr	r0, [pc, #140]	; (8001a30 <HAL_TIM_MspPostInit+0x118>)
 80019a2:	f000 fa8f 	bl	8001ec4 <HAL_GPIO_Init>
}
 80019a6:	e03b      	b.n	8001a20 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM3)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a21      	ldr	r2, [pc, #132]	; (8001a34 <HAL_TIM_MspPostInit+0x11c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d118      	bne.n	80019e4 <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <HAL_TIM_MspPostInit+0x114>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_TIM_MspPostInit+0x114>)
 80019b8:	f043 0308 	orr.w	r3, r3, #8
 80019bc:	6193      	str	r3, [r2, #24]
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_TIM_MspPostInit+0x114>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor2_DIR_Pin|Motor2_PWM_Pin;
 80019ca:	2303      	movs	r3, #3
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2302      	movs	r3, #2
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d6:	f107 0318 	add.w	r3, r7, #24
 80019da:	4619      	mov	r1, r3
 80019dc:	4816      	ldr	r0, [pc, #88]	; (8001a38 <HAL_TIM_MspPostInit+0x120>)
 80019de:	f000 fa71 	bl	8001ec4 <HAL_GPIO_Init>
}
 80019e2:	e01d      	b.n	8001a20 <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM4)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <HAL_TIM_MspPostInit+0x124>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d118      	bne.n	8001a20 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_TIM_MspPostInit+0x114>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <HAL_TIM_MspPostInit+0x114>)
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	6193      	str	r3, [r2, #24]
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <HAL_TIM_MspPostInit+0x114>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Servo4_Pin|Servo3_Pin|Servo2_Pin|Servo1_Pin;
 8001a06:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2302      	movs	r3, #2
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	f107 0318 	add.w	r3, r7, #24
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <HAL_TIM_MspPostInit+0x120>)
 8001a1c:	f000 fa52 	bl	8001ec4 <HAL_GPIO_Init>
}
 8001a20:	bf00      	nop
 8001a22:	3728      	adds	r7, #40	; 0x28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40012c00 	.word	0x40012c00
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010800 	.word	0x40010800
 8001a34:	40000400 	.word	0x40000400
 8001a38:	40010c00 	.word	0x40010c00
 8001a3c:	40000800 	.word	0x40000800

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <HardFault_Handler+0x4>

08001a52 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <MemManage_Handler+0x4>

08001a58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <BusFault_Handler+0x4>

08001a5e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <UsageFault_Handler+0x4>

08001a64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8c:	f000 f8f8 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e00a      	b.n	8001abc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aa6:	f3af 8000 	nop.w
 8001aaa:	4601      	mov	r1, r0
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf0      	blt.n	8001aa6 <_read+0x12>
	}

return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af4:	605a      	str	r2, [r3, #4]
	return 0;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <_isatty>:

int _isatty(int file)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
	return 1;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
	return 0;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
	...

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f002 fa68 	bl	8004034 <__errno>
 8001b64:	4602      	mov	r2, r0
 8001b66:	230c      	movs	r3, #12
 8001b68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20005000 	.word	0x20005000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	2000008c 	.word	0x2000008c
 8001b98:	20000248 	.word	0x20000248

08001b9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ba8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001baa:	e003      	b.n	8001bb4 <LoopCopyDataInit>

08001bac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001bae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001bb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bb2:	3104      	adds	r1, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bb4:	480a      	ldr	r0, [pc, #40]	; (8001be0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bbc:	d3f6      	bcc.n	8001bac <CopyDataInit>
  ldr r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bc0:	e002      	b.n	8001bc8 <LoopFillZerobss>

08001bc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001bc4:	f842 3b04 	str.w	r3, [r2], #4

08001bc8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001bca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001bcc:	d3f9      	bcc.n	8001bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bce:	f7ff ffe5 	bl	8001b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f002 fa35 	bl	8004040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd6:	f7fe fafb 	bl	80001d0 <main>
  bx lr
 8001bda:	4770      	bx	lr
  ldr r3, =_sidata
 8001bdc:	080050d8 	.word	0x080050d8
  ldr r0, =_sdata
 8001be0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001be4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001be8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001bec:	20000248 	.word	0x20000248

08001bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_2_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_Init+0x28>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_Init+0x28>)
 8001bfe:	f043 0310 	orr.w	r3, r3, #16
 8001c02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 f929 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f000 f808 	bl	8001c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff fd50 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40022000 	.word	0x40022000

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_InitTick+0x54>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x58>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f933 	bl	8001eaa <HAL_SYSTICK_Config>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00e      	b.n	8001c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d80a      	bhi.n	8001c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f000 f909 	bl	8001e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c60:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <HAL_InitTick+0x5c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_IncTick+0x1c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a03      	ldr	r2, [pc, #12]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	20000240 	.word	0x20000240

08001ca4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca8:	4b02      	ldr	r3, [pc, #8]	; (8001cb4 <HAL_GetTick+0x10>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000240 	.word	0x20000240

08001cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff fff0 	bl	8001ca4 <HAL_GetTick>
 8001cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d005      	beq.n	8001cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_Delay+0x40>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cde:	bf00      	nop
 8001ce0:	f7ff ffe0 	bl	8001ca4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d8f7      	bhi.n	8001ce0 <HAL_Delay+0x28>
  {
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000008 	.word	0x20000008

08001cfc <__NVIC_SetPriorityGrouping>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_GetPriorityGrouping>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <__NVIC_GetPriorityGrouping+0x18>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	f003 0307 	and.w	r3, r3, #7
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_SetPriority>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <SysTick_Config>:
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e28:	d301      	bcc.n	8001e2e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00f      	b.n	8001e4e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <SysTick_Config+0x40>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e36:	210f      	movs	r1, #15
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f7ff ff90 	bl	8001d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <SysTick_Config+0x40>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <SysTick_Config+0x40>)
 8001e48:	2207      	movs	r2, #7
 8001e4a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	e000e010 	.word	0xe000e010

08001e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff49 	bl	8001cfc <__NVIC_SetPriorityGrouping>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e84:	f7ff ff5e 	bl	8001d44 <__NVIC_GetPriorityGrouping>
 8001e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f7ff ff90 	bl	8001db4 <NVIC_EncodePriority>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff5f 	bl	8001d60 <__NVIC_SetPriority>
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ffb0 	bl	8001e18 <SysTick_Config>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b08b      	sub	sp, #44	; 0x2c
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed6:	e127      	b.n	8002128 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f040 8116 	bne.w	8002122 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b12      	cmp	r3, #18
 8001efc:	d034      	beq.n	8001f68 <HAL_GPIO_Init+0xa4>
 8001efe:	2b12      	cmp	r3, #18
 8001f00:	d80d      	bhi.n	8001f1e <HAL_GPIO_Init+0x5a>
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d02b      	beq.n	8001f5e <HAL_GPIO_Init+0x9a>
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d804      	bhi.n	8001f14 <HAL_GPIO_Init+0x50>
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d031      	beq.n	8001f72 <HAL_GPIO_Init+0xae>
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d01c      	beq.n	8001f4c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f12:	e048      	b.n	8001fa6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d043      	beq.n	8001fa0 <HAL_GPIO_Init+0xdc>
 8001f18:	2b11      	cmp	r3, #17
 8001f1a:	d01b      	beq.n	8001f54 <HAL_GPIO_Init+0x90>
          break;
 8001f1c:	e043      	b.n	8001fa6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f1e:	4a89      	ldr	r2, [pc, #548]	; (8002144 <HAL_GPIO_Init+0x280>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d026      	beq.n	8001f72 <HAL_GPIO_Init+0xae>
 8001f24:	4a87      	ldr	r2, [pc, #540]	; (8002144 <HAL_GPIO_Init+0x280>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d806      	bhi.n	8001f38 <HAL_GPIO_Init+0x74>
 8001f2a:	4a87      	ldr	r2, [pc, #540]	; (8002148 <HAL_GPIO_Init+0x284>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d020      	beq.n	8001f72 <HAL_GPIO_Init+0xae>
 8001f30:	4a86      	ldr	r2, [pc, #536]	; (800214c <HAL_GPIO_Init+0x288>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01d      	beq.n	8001f72 <HAL_GPIO_Init+0xae>
          break;
 8001f36:	e036      	b.n	8001fa6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f38:	4a85      	ldr	r2, [pc, #532]	; (8002150 <HAL_GPIO_Init+0x28c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d019      	beq.n	8001f72 <HAL_GPIO_Init+0xae>
 8001f3e:	4a85      	ldr	r2, [pc, #532]	; (8002154 <HAL_GPIO_Init+0x290>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d016      	beq.n	8001f72 <HAL_GPIO_Init+0xae>
 8001f44:	4a84      	ldr	r2, [pc, #528]	; (8002158 <HAL_GPIO_Init+0x294>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_GPIO_Init+0xae>
          break;
 8001f4a:	e02c      	b.n	8001fa6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	623b      	str	r3, [r7, #32]
          break;
 8001f52:	e028      	b.n	8001fa6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	623b      	str	r3, [r7, #32]
          break;
 8001f5c:	e023      	b.n	8001fa6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	3308      	adds	r3, #8
 8001f64:	623b      	str	r3, [r7, #32]
          break;
 8001f66:	e01e      	b.n	8001fa6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	330c      	adds	r3, #12
 8001f6e:	623b      	str	r3, [r7, #32]
          break;
 8001f70:	e019      	b.n	8001fa6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d102      	bne.n	8001f80 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	623b      	str	r3, [r7, #32]
          break;
 8001f7e:	e012      	b.n	8001fa6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d105      	bne.n	8001f94 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f88:	2308      	movs	r3, #8
 8001f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	611a      	str	r2, [r3, #16]
          break;
 8001f92:	e008      	b.n	8001fa6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f94:	2308      	movs	r3, #8
 8001f96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	615a      	str	r2, [r3, #20]
          break;
 8001f9e:	e002      	b.n	8001fa6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
          break;
 8001fa4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	2bff      	cmp	r3, #255	; 0xff
 8001faa:	d801      	bhi.n	8001fb0 <HAL_GPIO_Init+0xec>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	e001      	b.n	8001fb4 <HAL_GPIO_Init+0xf0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	2bff      	cmp	r3, #255	; 0xff
 8001fba:	d802      	bhi.n	8001fc2 <HAL_GPIO_Init+0xfe>
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	e002      	b.n	8001fc8 <HAL_GPIO_Init+0x104>
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	3b08      	subs	r3, #8
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	210f      	movs	r1, #15
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	401a      	ands	r2, r3
 8001fda:	6a39      	ldr	r1, [r7, #32]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8096 	beq.w	8002122 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ff6:	4b59      	ldr	r3, [pc, #356]	; (800215c <HAL_GPIO_Init+0x298>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	4a58      	ldr	r2, [pc, #352]	; (800215c <HAL_GPIO_Init+0x298>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6193      	str	r3, [r2, #24]
 8002002:	4b56      	ldr	r3, [pc, #344]	; (800215c <HAL_GPIO_Init+0x298>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800200e:	4a54      	ldr	r2, [pc, #336]	; (8002160 <HAL_GPIO_Init+0x29c>)
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4013      	ands	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4b      	ldr	r2, [pc, #300]	; (8002164 <HAL_GPIO_Init+0x2a0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <HAL_GPIO_Init+0x19e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4a      	ldr	r2, [pc, #296]	; (8002168 <HAL_GPIO_Init+0x2a4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00d      	beq.n	800205e <HAL_GPIO_Init+0x19a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a49      	ldr	r2, [pc, #292]	; (800216c <HAL_GPIO_Init+0x2a8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d007      	beq.n	800205a <HAL_GPIO_Init+0x196>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a48      	ldr	r2, [pc, #288]	; (8002170 <HAL_GPIO_Init+0x2ac>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <HAL_GPIO_Init+0x192>
 8002052:	2303      	movs	r3, #3
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x1a0>
 8002056:	2304      	movs	r3, #4
 8002058:	e004      	b.n	8002064 <HAL_GPIO_Init+0x1a0>
 800205a:	2302      	movs	r3, #2
 800205c:	e002      	b.n	8002064 <HAL_GPIO_Init+0x1a0>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_GPIO_Init+0x1a0>
 8002062:	2300      	movs	r3, #0
 8002064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002066:	f002 0203 	and.w	r2, r2, #3
 800206a:	0092      	lsls	r2, r2, #2
 800206c:	4093      	lsls	r3, r2
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002074:	493a      	ldr	r1, [pc, #232]	; (8002160 <HAL_GPIO_Init+0x29c>)
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	3302      	adds	r3, #2
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800208e:	4b39      	ldr	r3, [pc, #228]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	4938      	ldr	r1, [pc, #224]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]
 800209a:	e006      	b.n	80020aa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800209c:	4b35      	ldr	r3, [pc, #212]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	4933      	ldr	r1, [pc, #204]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020b6:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	492e      	ldr	r1, [pc, #184]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
 80020c2:	e006      	b.n	80020d2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020c4:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	4929      	ldr	r1, [pc, #164]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020de:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	4924      	ldr	r1, [pc, #144]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
 80020ea:	e006      	b.n	80020fa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ec:	4b21      	ldr	r3, [pc, #132]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	491f      	ldr	r1, [pc, #124]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	491a      	ldr	r1, [pc, #104]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	60cb      	str	r3, [r1, #12]
 8002112:	e006      	b.n	8002122 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	43db      	mvns	r3, r3
 800211c:	4915      	ldr	r1, [pc, #84]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 800211e:	4013      	ands	r3, r2
 8002120:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	3301      	adds	r3, #1
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	fa22 f303 	lsr.w	r3, r2, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	f47f aed0 	bne.w	8001ed8 <HAL_GPIO_Init+0x14>
  }
}
 8002138:	bf00      	nop
 800213a:	372c      	adds	r7, #44	; 0x2c
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	10210000 	.word	0x10210000
 8002148:	10110000 	.word	0x10110000
 800214c:	10120000 	.word	0x10120000
 8002150:	10310000 	.word	0x10310000
 8002154:	10320000 	.word	0x10320000
 8002158:	10220000 	.word	0x10220000
 800215c:	40021000 	.word	0x40021000
 8002160:	40010000 	.word	0x40010000
 8002164:	40010800 	.word	0x40010800
 8002168:	40010c00 	.word	0x40010c00
 800216c:	40011000 	.word	0x40011000
 8002170:	40011400 	.word	0x40011400
 8002174:	40010400 	.word	0x40010400

08002178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002194:	e003      	b.n	800219e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	041a      	lsls	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	611a      	str	r2, [r3, #16]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e26c      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8087 	beq.w	80022d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c8:	4b92      	ldr	r3, [pc, #584]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d00c      	beq.n	80021ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021d4:	4b8f      	ldr	r3, [pc, #572]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d112      	bne.n	8002206 <HAL_RCC_OscConfig+0x5e>
 80021e0:	4b8c      	ldr	r3, [pc, #560]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ec:	d10b      	bne.n	8002206 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ee:	4b89      	ldr	r3, [pc, #548]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d06c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x12c>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d168      	bne.n	80022d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e246      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220e:	d106      	bne.n	800221e <HAL_RCC_OscConfig+0x76>
 8002210:	4b80      	ldr	r3, [pc, #512]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a7f      	ldr	r2, [pc, #508]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 8002216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	e02e      	b.n	800227c <HAL_RCC_OscConfig+0xd4>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0x98>
 8002226:	4b7b      	ldr	r3, [pc, #492]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a7a      	ldr	r2, [pc, #488]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 800222c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b78      	ldr	r3, [pc, #480]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a77      	ldr	r2, [pc, #476]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 8002238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e01d      	b.n	800227c <HAL_RCC_OscConfig+0xd4>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0xbc>
 800224a:	4b72      	ldr	r3, [pc, #456]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a71      	ldr	r2, [pc, #452]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 8002250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b6f      	ldr	r3, [pc, #444]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a6e      	ldr	r2, [pc, #440]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e00b      	b.n	800227c <HAL_RCC_OscConfig+0xd4>
 8002264:	4b6b      	ldr	r3, [pc, #428]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a6a      	ldr	r2, [pc, #424]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 800226a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4b68      	ldr	r3, [pc, #416]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a67      	ldr	r2, [pc, #412]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 8002276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d013      	beq.n	80022ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff fd0e 	bl	8001ca4 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228c:	f7ff fd0a 	bl	8001ca4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e1fa      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	4b5d      	ldr	r3, [pc, #372]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0xe4>
 80022aa:	e014      	b.n	80022d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff fcfa 	bl	8001ca4 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b4:	f7ff fcf6 	bl	8001ca4 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b64      	cmp	r3, #100	; 0x64
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e1e6      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x10c>
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d063      	beq.n	80023aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022e2:	4b4c      	ldr	r3, [pc, #304]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00b      	beq.n	8002306 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ee:	4b49      	ldr	r3, [pc, #292]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d11c      	bne.n	8002334 <HAL_RCC_OscConfig+0x18c>
 80022fa:	4b46      	ldr	r3, [pc, #280]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d116      	bne.n	8002334 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002306:	4b43      	ldr	r3, [pc, #268]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HAL_RCC_OscConfig+0x176>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d001      	beq.n	800231e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e1ba      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231e:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4939      	ldr	r1, [pc, #228]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002332:	e03a      	b.n	80023aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d020      	beq.n	800237e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800233c:	4b36      	ldr	r3, [pc, #216]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 800233e:	2201      	movs	r2, #1
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7ff fcaf 	bl	8001ca4 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234a:	f7ff fcab 	bl	8001ca4 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e19b      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4927      	ldr	r1, [pc, #156]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 8002378:	4313      	orrs	r3, r2
 800237a:	600b      	str	r3, [r1, #0]
 800237c:	e015      	b.n	80023aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800237e:	4b26      	ldr	r3, [pc, #152]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7ff fc8e 	bl	8001ca4 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238c:	f7ff fc8a 	bl	8001ca4 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e17a      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d03a      	beq.n	800242c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d019      	beq.n	80023f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023be:	4b17      	ldr	r3, [pc, #92]	; (800241c <HAL_RCC_OscConfig+0x274>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c4:	f7ff fc6e 	bl	8001ca4 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023cc:	f7ff fc6a 	bl	8001ca4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e15a      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023ea:	2001      	movs	r0, #1
 80023ec:	f000 faa8 	bl	8002940 <RCC_Delay>
 80023f0:	e01c      	b.n	800242c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <HAL_RCC_OscConfig+0x274>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f8:	f7ff fc54 	bl	8001ca4 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fe:	e00f      	b.n	8002420 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002400:	f7ff fc50 	bl	8001ca4 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d908      	bls.n	8002420 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e140      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	42420000 	.word	0x42420000
 800241c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002420:	4b9e      	ldr	r3, [pc, #632]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1e9      	bne.n	8002400 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80a6 	beq.w	8002586 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243e:	4b97      	ldr	r3, [pc, #604]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10d      	bne.n	8002466 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	4b94      	ldr	r3, [pc, #592]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	4a93      	ldr	r2, [pc, #588]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 8002450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002454:	61d3      	str	r3, [r2, #28]
 8002456:	4b91      	ldr	r3, [pc, #580]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002462:	2301      	movs	r3, #1
 8002464:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002466:	4b8e      	ldr	r3, [pc, #568]	; (80026a0 <HAL_RCC_OscConfig+0x4f8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d118      	bne.n	80024a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002472:	4b8b      	ldr	r3, [pc, #556]	; (80026a0 <HAL_RCC_OscConfig+0x4f8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a8a      	ldr	r2, [pc, #552]	; (80026a0 <HAL_RCC_OscConfig+0x4f8>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247e:	f7ff fc11 	bl	8001ca4 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002486:	f7ff fc0d 	bl	8001ca4 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b64      	cmp	r3, #100	; 0x64
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e0fd      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	4b81      	ldr	r3, [pc, #516]	; (80026a0 <HAL_RCC_OscConfig+0x4f8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d106      	bne.n	80024ba <HAL_RCC_OscConfig+0x312>
 80024ac:	4b7b      	ldr	r3, [pc, #492]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4a7a      	ldr	r2, [pc, #488]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6213      	str	r3, [r2, #32]
 80024b8:	e02d      	b.n	8002516 <HAL_RCC_OscConfig+0x36e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0x334>
 80024c2:	4b76      	ldr	r3, [pc, #472]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4a75      	ldr	r2, [pc, #468]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	6213      	str	r3, [r2, #32]
 80024ce:	4b73      	ldr	r3, [pc, #460]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4a72      	ldr	r2, [pc, #456]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	f023 0304 	bic.w	r3, r3, #4
 80024d8:	6213      	str	r3, [r2, #32]
 80024da:	e01c      	b.n	8002516 <HAL_RCC_OscConfig+0x36e>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d10c      	bne.n	80024fe <HAL_RCC_OscConfig+0x356>
 80024e4:	4b6d      	ldr	r3, [pc, #436]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4a6c      	ldr	r2, [pc, #432]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	6213      	str	r3, [r2, #32]
 80024f0:	4b6a      	ldr	r3, [pc, #424]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4a69      	ldr	r2, [pc, #420]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6213      	str	r3, [r2, #32]
 80024fc:	e00b      	b.n	8002516 <HAL_RCC_OscConfig+0x36e>
 80024fe:	4b67      	ldr	r3, [pc, #412]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a66      	ldr	r2, [pc, #408]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	6213      	str	r3, [r2, #32]
 800250a:	4b64      	ldr	r3, [pc, #400]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4a63      	ldr	r2, [pc, #396]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d015      	beq.n	800254a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251e:	f7ff fbc1 	bl	8001ca4 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7ff fbbd 	bl	8001ca4 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	; 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0ab      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253c:	4b57      	ldr	r3, [pc, #348]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0ee      	beq.n	8002526 <HAL_RCC_OscConfig+0x37e>
 8002548:	e014      	b.n	8002574 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254a:	f7ff fbab 	bl	8001ca4 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7ff fba7 	bl	8001ca4 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e095      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002568:	4b4c      	ldr	r3, [pc, #304]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1ee      	bne.n	8002552 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002574:	7dfb      	ldrb	r3, [r7, #23]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d105      	bne.n	8002586 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800257a:	4b48      	ldr	r3, [pc, #288]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4a47      	ldr	r2, [pc, #284]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 8002580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002584:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 8081 	beq.w	8002692 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002590:	4b42      	ldr	r3, [pc, #264]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 030c 	and.w	r3, r3, #12
 8002598:	2b08      	cmp	r3, #8
 800259a:	d061      	beq.n	8002660 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d146      	bne.n	8002632 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a4:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <HAL_RCC_OscConfig+0x4fc>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7ff fb7b 	bl	8001ca4 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b2:	f7ff fb77 	bl	8001ca4 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e067      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c4:	4b35      	ldr	r3, [pc, #212]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f0      	bne.n	80025b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d8:	d108      	bne.n	80025ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025da:	4b30      	ldr	r3, [pc, #192]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	492d      	ldr	r1, [pc, #180]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ec:	4b2b      	ldr	r3, [pc, #172]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a19      	ldr	r1, [r3, #32]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	430b      	orrs	r3, r1
 80025fe:	4927      	ldr	r1, [pc, #156]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002604:	4b27      	ldr	r3, [pc, #156]	; (80026a4 <HAL_RCC_OscConfig+0x4fc>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260a:	f7ff fb4b 	bl	8001ca4 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002612:	f7ff fb47 	bl	8001ca4 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e037      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002624:	4b1d      	ldr	r3, [pc, #116]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x46a>
 8002630:	e02f      	b.n	8002692 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002632:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <HAL_RCC_OscConfig+0x4fc>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7ff fb34 	bl	8001ca4 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002640:	f7ff fb30 	bl	8001ca4 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e020      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x498>
 800265e:	e018      	b.n	8002692 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e013      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_OscConfig+0x4f4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	429a      	cmp	r2, r3
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	40007000 	.word	0x40007000
 80026a4:	42420060 	.word	0x42420060

080026a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0d0      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026bc:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d910      	bls.n	80026ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b67      	ldr	r3, [pc, #412]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 0207 	bic.w	r2, r3, #7
 80026d2:	4965      	ldr	r1, [pc, #404]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b63      	ldr	r3, [pc, #396]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0b8      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002704:	4b59      	ldr	r3, [pc, #356]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a58      	ldr	r2, [pc, #352]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800270e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800271c:	4b53      	ldr	r3, [pc, #332]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002726:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002728:	4b50      	ldr	r3, [pc, #320]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	494d      	ldr	r1, [pc, #308]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d040      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d115      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e07f      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002766:	4b41      	ldr	r3, [pc, #260]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e073      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002776:	4b3d      	ldr	r3, [pc, #244]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e06b      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002786:	4b39      	ldr	r3, [pc, #228]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f023 0203 	bic.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4936      	ldr	r1, [pc, #216]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002798:	f7ff fa84 	bl	8001ca4 <HAL_GetTick>
 800279c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7ff fa80 	bl	8001ca4 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e053      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	4b2d      	ldr	r3, [pc, #180]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 020c 	and.w	r2, r3, #12
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1eb      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d210      	bcs.n	80027f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b24      	ldr	r3, [pc, #144]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 0207 	bic.w	r2, r3, #7
 80027de:	4922      	ldr	r1, [pc, #136]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e032      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4916      	ldr	r1, [pc, #88]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	490e      	ldr	r1, [pc, #56]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002836:	f000 f821 	bl	800287c <HAL_RCC_GetSysClockFreq>
 800283a:	4601      	mov	r1, r0
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_RCC_ClockConfig+0x1c8>)
 8002848:	5cd3      	ldrb	r3, [r2, r3]
 800284a:	fa21 f303 	lsr.w	r3, r1, r3
 800284e:	4a09      	ldr	r2, [pc, #36]	; (8002874 <HAL_RCC_ClockConfig+0x1cc>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_RCC_ClockConfig+0x1d0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f9e2 	bl	8001c20 <HAL_InitTick>

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40022000 	.word	0x40022000
 800286c:	40021000 	.word	0x40021000
 8002870:	08005028 	.word	0x08005028
 8002874:	20000000 	.word	0x20000000
 8002878:	20000004 	.word	0x20000004

0800287c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800287c:	b490      	push	{r4, r7}
 800287e:	b08a      	sub	sp, #40	; 0x28
 8002880:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002882:	4b2a      	ldr	r3, [pc, #168]	; (800292c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002884:	1d3c      	adds	r4, r7, #4
 8002886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800288c:	4b28      	ldr	r3, [pc, #160]	; (8002930 <HAL_RCC_GetSysClockFreq+0xb4>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028a6:	4b23      	ldr	r3, [pc, #140]	; (8002934 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d002      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x40>
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d003      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x46>
 80028ba:	e02d      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028bc:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028be:	623b      	str	r3, [r7, #32]
      break;
 80028c0:	e02d      	b.n	800291e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	0c9b      	lsrs	r3, r3, #18
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028ce:	4413      	add	r3, r2
 80028d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	0c5b      	lsrs	r3, r3, #17
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028ee:	4413      	add	r3, r2
 80028f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	4a0f      	ldr	r2, [pc, #60]	; (8002938 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028fa:	fb02 f203 	mul.w	r2, r2, r3
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
 8002906:	e004      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	4a0c      	ldr	r2, [pc, #48]	; (800293c <HAL_RCC_GetSysClockFreq+0xc0>)
 800290c:	fb02 f303 	mul.w	r3, r2, r3
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	623b      	str	r3, [r7, #32]
      break;
 8002916:	e002      	b.n	800291e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <HAL_RCC_GetSysClockFreq+0xbc>)
 800291a:	623b      	str	r3, [r7, #32]
      break;
 800291c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291e:	6a3b      	ldr	r3, [r7, #32]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3728      	adds	r7, #40	; 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	bc90      	pop	{r4, r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	08005014 	.word	0x08005014
 8002930:	08005024 	.word	0x08005024
 8002934:	40021000 	.word	0x40021000
 8002938:	007a1200 	.word	0x007a1200
 800293c:	003d0900 	.word	0x003d0900

08002940 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <RCC_Delay+0x34>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <RCC_Delay+0x38>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0a5b      	lsrs	r3, r3, #9
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800295c:	bf00      	nop
  }
  while (Delay --);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1e5a      	subs	r2, r3, #1
 8002962:	60fa      	str	r2, [r7, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f9      	bne.n	800295c <RCC_Delay+0x1c>
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000000 	.word	0x20000000
 8002978:	10624dd3 	.word	0x10624dd3

0800297c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e076      	b.n	8002a7c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	2b00      	cmp	r3, #0
 8002994:	d108      	bne.n	80029a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800299e:	d009      	beq.n	80029b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	61da      	str	r2, [r3, #28]
 80029a6:	e005      	b.n	80029b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fe fea2 	bl	8001718 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a38:	ea42 0103 	orr.w	r1, r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	0c1a      	lsrs	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f002 0204 	and.w	r2, r2, #4
 8002a5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_SPI_Transmit+0x22>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e126      	b.n	8002cf4 <HAL_SPI_Transmit+0x270>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aae:	f7ff f8f9 	bl	8001ca4 <HAL_GetTick>
 8002ab2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d002      	beq.n	8002aca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ac8:	e10b      	b.n	8002ce2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_SPI_Transmit+0x52>
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d102      	bne.n	8002adc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ada:	e102      	b.n	8002ce2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2203      	movs	r2, #3
 8002ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	88fa      	ldrh	r2, [r7, #6]
 8002af4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	88fa      	ldrh	r2, [r7, #6]
 8002afa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b22:	d10f      	bne.n	8002b44 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4e:	2b40      	cmp	r3, #64	; 0x40
 8002b50:	d007      	beq.n	8002b62 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b6a:	d14b      	bne.n	8002c04 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <HAL_SPI_Transmit+0xf6>
 8002b74:	8afb      	ldrh	r3, [r7, #22]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d13e      	bne.n	8002bf8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	881a      	ldrh	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	1c9a      	adds	r2, r3, #2
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b9e:	e02b      	b.n	8002bf8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d112      	bne.n	8002bd4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	881a      	ldrh	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	1c9a      	adds	r2, r3, #2
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bd2:	e011      	b.n	8002bf8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bd4:	f7ff f866 	bl	8001ca4 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d803      	bhi.n	8002bec <HAL_SPI_Transmit+0x168>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bea:	d102      	bne.n	8002bf2 <HAL_SPI_Transmit+0x16e>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d102      	bne.n	8002bf8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bf6:	e074      	b.n	8002ce2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1ce      	bne.n	8002ba0 <HAL_SPI_Transmit+0x11c>
 8002c02:	e04c      	b.n	8002c9e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_SPI_Transmit+0x18e>
 8002c0c:	8afb      	ldrh	r3, [r7, #22]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d140      	bne.n	8002c94 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	330c      	adds	r3, #12
 8002c1c:	7812      	ldrb	r2, [r2, #0]
 8002c1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c38:	e02c      	b.n	8002c94 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d113      	bne.n	8002c70 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	330c      	adds	r3, #12
 8002c52:	7812      	ldrb	r2, [r2, #0]
 8002c54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c6e:	e011      	b.n	8002c94 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c70:	f7ff f818 	bl	8001ca4 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d803      	bhi.n	8002c88 <HAL_SPI_Transmit+0x204>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c86:	d102      	bne.n	8002c8e <HAL_SPI_Transmit+0x20a>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d102      	bne.n	8002c94 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c92:	e026      	b.n	8002ce2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1cd      	bne.n	8002c3a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 fbb8 	bl	8003418 <SPI_EndRxTxTransaction>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	77fb      	strb	r3, [r7, #31]
 8002cde:	e000      	b.n	8002ce2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002ce0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cf2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d18:	d112      	bne.n	8002d40 <HAL_SPI_Receive+0x44>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10e      	bne.n	8002d40 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2204      	movs	r2, #4
 8002d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d2a:	88fa      	ldrh	r2, [r7, #6]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	4613      	mov	r3, r2
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f8f1 	bl	8002f1e <HAL_SPI_TransmitReceive>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	e0ea      	b.n	8002f16 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_SPI_Receive+0x52>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e0e3      	b.n	8002f16 <HAL_SPI_Receive+0x21a>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d56:	f7fe ffa5 	bl	8001ca4 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d002      	beq.n	8002d6e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d6c:	e0ca      	b.n	8002f04 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <HAL_SPI_Receive+0x7e>
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d7e:	e0c1      	b.n	8002f04 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2204      	movs	r2, #4
 8002d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	88fa      	ldrh	r2, [r7, #6]
 8002d98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	88fa      	ldrh	r2, [r7, #6]
 8002d9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc6:	d10f      	bne.n	8002de8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002de6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b40      	cmp	r3, #64	; 0x40
 8002df4:	d007      	beq.n	8002e06 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e04:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d162      	bne.n	8002ed4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e0e:	e02e      	b.n	8002e6e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d115      	bne.n	8002e4a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f103 020c 	add.w	r2, r3, #12
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	7812      	ldrb	r2, [r2, #0]
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e48:	e011      	b.n	8002e6e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e4a:	f7fe ff2b 	bl	8001ca4 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d803      	bhi.n	8002e62 <HAL_SPI_Receive+0x166>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d102      	bne.n	8002e68 <HAL_SPI_Receive+0x16c>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e6c:	e04a      	b.n	8002f04 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1cb      	bne.n	8002e10 <HAL_SPI_Receive+0x114>
 8002e78:	e031      	b.n	8002ede <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d113      	bne.n	8002eb0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	b292      	uxth	r2, r2
 8002e94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	1c9a      	adds	r2, r3, #2
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002eae:	e011      	b.n	8002ed4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eb0:	f7fe fef8 	bl	8001ca4 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d803      	bhi.n	8002ec8 <HAL_SPI_Receive+0x1cc>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d102      	bne.n	8002ece <HAL_SPI_Receive+0x1d2>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d102      	bne.n	8002ed4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ed2:	e017      	b.n	8002f04 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1cd      	bne.n	8002e7a <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	6839      	ldr	r1, [r7, #0]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 fa46 	bl	8003374 <SPI_EndRxTransaction>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	75fb      	strb	r3, [r7, #23]
 8002f00:	e000      	b.n	8002f04 <HAL_SPI_Receive+0x208>
  }

error :
 8002f02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b08c      	sub	sp, #48	; 0x30
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_SPI_TransmitReceive+0x26>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e18a      	b.n	800325a <HAL_SPI_TransmitReceive+0x33c>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f4c:	f7fe feaa 	bl	8001ca4 <HAL_GetTick>
 8002f50:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d00f      	beq.n	8002f8e <HAL_SPI_TransmitReceive+0x70>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f74:	d107      	bne.n	8002f86 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d103      	bne.n	8002f86 <HAL_SPI_TransmitReceive+0x68>
 8002f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d003      	beq.n	8002f8e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
 8002f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f8c:	e15b      	b.n	8003246 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_SPI_TransmitReceive+0x82>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_SPI_TransmitReceive+0x82>
 8002f9a:	887b      	ldrh	r3, [r7, #2]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d103      	bne.n	8002fa8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fa6:	e14e      	b.n	8003246 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d003      	beq.n	8002fbc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2205      	movs	r2, #5
 8002fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	887a      	ldrh	r2, [r7, #2]
 8002fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	887a      	ldrh	r2, [r7, #2]
 8002fd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	887a      	ldrh	r2, [r7, #2]
 8002fde:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	2b40      	cmp	r3, #64	; 0x40
 8002ffe:	d007      	beq.n	8003010 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800300e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003018:	d178      	bne.n	800310c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_SPI_TransmitReceive+0x10a>
 8003022:	8b7b      	ldrh	r3, [r7, #26]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d166      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	881a      	ldrh	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	1c9a      	adds	r2, r3, #2
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800304c:	e053      	b.n	80030f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b02      	cmp	r3, #2
 800305a:	d11b      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x176>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d016      	beq.n	8003094 <HAL_SPI_TransmitReceive+0x176>
 8003066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003068:	2b01      	cmp	r3, #1
 800306a:	d113      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	881a      	ldrh	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	1c9a      	adds	r2, r3, #2
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d119      	bne.n	80030d6 <HAL_SPI_TransmitReceive+0x1b8>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d014      	beq.n	80030d6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	b292      	uxth	r2, r2
 80030b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	1c9a      	adds	r2, r3, #2
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030d2:	2301      	movs	r3, #1
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030d6:	f7fe fde5 	bl	8001ca4 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d807      	bhi.n	80030f6 <HAL_SPI_TransmitReceive+0x1d8>
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d003      	beq.n	80030f6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030f4:	e0a7      	b.n	8003246 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1a6      	bne.n	800304e <HAL_SPI_TransmitReceive+0x130>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1a1      	bne.n	800304e <HAL_SPI_TransmitReceive+0x130>
 800310a:	e07c      	b.n	8003206 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_SPI_TransmitReceive+0x1fc>
 8003114:	8b7b      	ldrh	r3, [r7, #26]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d16b      	bne.n	80031f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	7812      	ldrb	r2, [r2, #0]
 8003126:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003140:	e057      	b.n	80031f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b02      	cmp	r3, #2
 800314e:	d11c      	bne.n	800318a <HAL_SPI_TransmitReceive+0x26c>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d017      	beq.n	800318a <HAL_SPI_TransmitReceive+0x26c>
 800315a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315c:	2b01      	cmp	r3, #1
 800315e:	d114      	bne.n	800318a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	7812      	ldrb	r2, [r2, #0]
 800316c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d119      	bne.n	80031cc <HAL_SPI_TransmitReceive+0x2ae>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d014      	beq.n	80031cc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031c8:	2301      	movs	r3, #1
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031cc:	f7fe fd6a 	bl	8001ca4 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031d8:	429a      	cmp	r2, r3
 80031da:	d803      	bhi.n	80031e4 <HAL_SPI_TransmitReceive+0x2c6>
 80031dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d102      	bne.n	80031ea <HAL_SPI_TransmitReceive+0x2cc>
 80031e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d103      	bne.n	80031f2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80031f0:	e029      	b.n	8003246 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1a2      	bne.n	8003142 <HAL_SPI_TransmitReceive+0x224>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d19d      	bne.n	8003142 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003208:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f904 	bl	8003418 <SPI_EndRxTxTransaction>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d006      	beq.n	8003224 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003222:	e010      	b.n	8003246 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10b      	bne.n	8003244 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	e000      	b.n	8003246 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003244:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003256:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800325a:	4618      	mov	r0, r3
 800325c:	3730      	adds	r7, #48	; 0x30
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	4613      	mov	r3, r2
 8003272:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003274:	f7fe fd16 	bl	8001ca4 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	4413      	add	r3, r2
 8003282:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003284:	f7fe fd0e 	bl	8001ca4 <HAL_GetTick>
 8003288:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800328a:	4b39      	ldr	r3, [pc, #228]	; (8003370 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	015b      	lsls	r3, r3, #5
 8003290:	0d1b      	lsrs	r3, r3, #20
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	fb02 f303 	mul.w	r3, r2, r3
 8003298:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800329a:	e054      	b.n	8003346 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a2:	d050      	beq.n	8003346 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032a4:	f7fe fcfe 	bl	8001ca4 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d902      	bls.n	80032ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d13d      	bne.n	8003336 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032d2:	d111      	bne.n	80032f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032dc:	d004      	beq.n	80032e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e6:	d107      	bne.n	80032f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003300:	d10f      	bne.n	8003322 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003320:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e017      	b.n	8003366 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	3b01      	subs	r3, #1
 8003344:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4013      	ands	r3, r2
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	bf0c      	ite	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	2300      	movne	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	461a      	mov	r2, r3
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	429a      	cmp	r2, r3
 8003362:	d19b      	bne.n	800329c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3720      	adds	r7, #32
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000000 	.word	0x20000000

08003374 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003388:	d111      	bne.n	80033ae <SPI_EndRxTransaction+0x3a>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003392:	d004      	beq.n	800339e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339c:	d107      	bne.n	80033ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ac:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033b6:	d117      	bne.n	80033e8 <SPI_EndRxTransaction+0x74>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c0:	d112      	bne.n	80033e8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2200      	movs	r2, #0
 80033ca:	2101      	movs	r1, #1
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7ff ff49 	bl	8003264 <SPI_WaitFlagStateUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01a      	beq.n	800340e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	f043 0220 	orr.w	r2, r3, #32
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e013      	b.n	8003410 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2200      	movs	r2, #0
 80033f0:	2180      	movs	r1, #128	; 0x80
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7ff ff36 	bl	8003264 <SPI_WaitFlagStateUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	f043 0220 	orr.w	r2, r3, #32
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e000      	b.n	8003410 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2200      	movs	r2, #0
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff ff18 	bl	8003264 <SPI_WaitFlagStateUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	f043 0220 	orr.w	r2, r3, #32
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e000      	b.n	800344c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e041      	b.n	80034ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fe fa2e 	bl	80018dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	4619      	mov	r1, r3
 8003492:	4610      	mov	r0, r2
 8003494:	f000 fa9e 	bl	80039d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e041      	b.n	8003588 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d106      	bne.n	800351e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7fe f949 	bl	80017b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2202      	movs	r2, #2
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3304      	adds	r3, #4
 800352e:	4619      	mov	r1, r3
 8003530:	4610      	mov	r0, r2
 8003532:	f000 fa4f 	bl	80039d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e093      	b.n	80036cc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d106      	bne.n	80035be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f88b 	bl	80036d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2202      	movs	r2, #2
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035d4:	f023 0307 	bic.w	r3, r3, #7
 80035d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3304      	adds	r3, #4
 80035e2:	4619      	mov	r1, r3
 80035e4:	4610      	mov	r0, r2
 80035e6:	f000 f9f5 	bl	80039d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	4313      	orrs	r3, r2
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003630:	f023 030c 	bic.w	r3, r3, #12
 8003634:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800363c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003640:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	4313      	orrs	r3, r2
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	011a      	lsls	r2, r3, #4
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	031b      	lsls	r3, r3, #12
 8003660:	4313      	orrs	r3, r2
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800366e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	4313      	orrs	r3, r2
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80036fe:	2302      	movs	r3, #2
 8003700:	e0ac      	b.n	800385c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b0c      	cmp	r3, #12
 800370e:	f200 809f 	bhi.w	8003850 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003712:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003718:	0800374d 	.word	0x0800374d
 800371c:	08003851 	.word	0x08003851
 8003720:	08003851 	.word	0x08003851
 8003724:	08003851 	.word	0x08003851
 8003728:	0800378d 	.word	0x0800378d
 800372c:	08003851 	.word	0x08003851
 8003730:	08003851 	.word	0x08003851
 8003734:	08003851 	.word	0x08003851
 8003738:	080037cf 	.word	0x080037cf
 800373c:	08003851 	.word	0x08003851
 8003740:	08003851 	.word	0x08003851
 8003744:	08003851 	.word	0x08003851
 8003748:	0800380f 	.word	0x0800380f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f9a0 	bl	8003a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0208 	orr.w	r2, r2, #8
 8003766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0204 	bic.w	r2, r2, #4
 8003776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6999      	ldr	r1, [r3, #24]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	619a      	str	r2, [r3, #24]
      break;
 800378a:	e062      	b.n	8003852 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	4618      	mov	r0, r3
 8003794:	f000 f9e6 	bl	8003b64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6999      	ldr	r1, [r3, #24]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	021a      	lsls	r2, r3, #8
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	619a      	str	r2, [r3, #24]
      break;
 80037cc:	e041      	b.n	8003852 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fa2f 	bl	8003c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69da      	ldr	r2, [r3, #28]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0208 	orr.w	r2, r2, #8
 80037e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0204 	bic.w	r2, r2, #4
 80037f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69d9      	ldr	r1, [r3, #28]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	61da      	str	r2, [r3, #28]
      break;
 800380c:	e021      	b.n	8003852 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fa79 	bl	8003d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69da      	ldr	r2, [r3, #28]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69da      	ldr	r2, [r3, #28]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69d9      	ldr	r1, [r3, #28]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	021a      	lsls	r2, r3, #8
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	61da      	str	r2, [r3, #28]
      break;
 800384e:	e000      	b.n	8003852 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003850:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_TIM_ConfigClockSource+0x18>
 8003878:	2302      	movs	r3, #2
 800387a:	e0a6      	b.n	80039ca <HAL_TIM_ConfigClockSource+0x166>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800389a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b40      	cmp	r3, #64	; 0x40
 80038b2:	d067      	beq.n	8003984 <HAL_TIM_ConfigClockSource+0x120>
 80038b4:	2b40      	cmp	r3, #64	; 0x40
 80038b6:	d80b      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x6c>
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d073      	beq.n	80039a4 <HAL_TIM_ConfigClockSource+0x140>
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d802      	bhi.n	80038c6 <HAL_TIM_ConfigClockSource+0x62>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d06f      	beq.n	80039a4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80038c4:	e078      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d06c      	beq.n	80039a4 <HAL_TIM_ConfigClockSource+0x140>
 80038ca:	2b30      	cmp	r3, #48	; 0x30
 80038cc:	d06a      	beq.n	80039a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80038ce:	e073      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038d0:	2b70      	cmp	r3, #112	; 0x70
 80038d2:	d00d      	beq.n	80038f0 <HAL_TIM_ConfigClockSource+0x8c>
 80038d4:	2b70      	cmp	r3, #112	; 0x70
 80038d6:	d804      	bhi.n	80038e2 <HAL_TIM_ConfigClockSource+0x7e>
 80038d8:	2b50      	cmp	r3, #80	; 0x50
 80038da:	d033      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0xe0>
 80038dc:	2b60      	cmp	r3, #96	; 0x60
 80038de:	d041      	beq.n	8003964 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80038e0:	e06a      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e6:	d066      	beq.n	80039b6 <HAL_TIM_ConfigClockSource+0x152>
 80038e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ec:	d017      	beq.n	800391e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80038ee:	e063      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6899      	ldr	r1, [r3, #8]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f000 fac9 	bl	8003e96 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003912:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	609a      	str	r2, [r3, #8]
      break;
 800391c:	e04c      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6899      	ldr	r1, [r3, #8]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f000 fab2 	bl	8003e96 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003940:	609a      	str	r2, [r3, #8]
      break;
 8003942:	e039      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	461a      	mov	r2, r3
 8003952:	f000 fa29 	bl	8003da8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2150      	movs	r1, #80	; 0x50
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fa80 	bl	8003e62 <TIM_ITRx_SetConfig>
      break;
 8003962:	e029      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6818      	ldr	r0, [r3, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	461a      	mov	r2, r3
 8003972:	f000 fa47 	bl	8003e04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2160      	movs	r1, #96	; 0x60
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fa70 	bl	8003e62 <TIM_ITRx_SetConfig>
      break;
 8003982:	e019      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	461a      	mov	r2, r3
 8003992:	f000 fa09 	bl	8003da8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2140      	movs	r1, #64	; 0x40
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fa60 	bl	8003e62 <TIM_ITRx_SetConfig>
      break;
 80039a2:	e009      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4619      	mov	r1, r3
 80039ae:	4610      	mov	r0, r2
 80039b0:	f000 fa57 	bl	8003e62 <TIM_ITRx_SetConfig>
        break;
 80039b4:	e000      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80039b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a29      	ldr	r2, [pc, #164]	; (8003a8c <TIM_Base_SetConfig+0xb8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d00b      	beq.n	8003a04 <TIM_Base_SetConfig+0x30>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f2:	d007      	beq.n	8003a04 <TIM_Base_SetConfig+0x30>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a26      	ldr	r2, [pc, #152]	; (8003a90 <TIM_Base_SetConfig+0xbc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_Base_SetConfig+0x30>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a25      	ldr	r2, [pc, #148]	; (8003a94 <TIM_Base_SetConfig+0xc0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d108      	bne.n	8003a16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a1c      	ldr	r2, [pc, #112]	; (8003a8c <TIM_Base_SetConfig+0xb8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00b      	beq.n	8003a36 <TIM_Base_SetConfig+0x62>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a24:	d007      	beq.n	8003a36 <TIM_Base_SetConfig+0x62>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a19      	ldr	r2, [pc, #100]	; (8003a90 <TIM_Base_SetConfig+0xbc>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d003      	beq.n	8003a36 <TIM_Base_SetConfig+0x62>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <TIM_Base_SetConfig+0xc0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d108      	bne.n	8003a48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a07      	ldr	r2, [pc, #28]	; (8003a8c <TIM_Base_SetConfig+0xb8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d103      	bne.n	8003a7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	615a      	str	r2, [r3, #20]
}
 8003a82:	bf00      	nop
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800

08003a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f023 0201 	bic.w	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0303 	bic.w	r3, r3, #3
 8003ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f023 0302 	bic.w	r3, r3, #2
 8003ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a1c      	ldr	r2, [pc, #112]	; (8003b60 <TIM_OC1_SetConfig+0xc8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d10c      	bne.n	8003b0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 0308 	bic.w	r3, r3, #8
 8003afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f023 0304 	bic.w	r3, r3, #4
 8003b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <TIM_OC1_SetConfig+0xc8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d111      	bne.n	8003b3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	621a      	str	r2, [r3, #32]
}
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40012c00 	.word	0x40012c00

08003b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f023 0210 	bic.w	r2, r3, #16
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f023 0320 	bic.w	r3, r3, #32
 8003bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <TIM_OC2_SetConfig+0xd0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d10d      	bne.n	8003be0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a14      	ldr	r2, [pc, #80]	; (8003c34 <TIM_OC2_SetConfig+0xd0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d113      	bne.n	8003c10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	621a      	str	r2, [r3, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	371c      	adds	r7, #28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	40012c00 	.word	0x40012c00

08003c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0303 	bic.w	r3, r3, #3
 8003c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a1d      	ldr	r2, [pc, #116]	; (8003d08 <TIM_OC3_SetConfig+0xd0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d10d      	bne.n	8003cb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a14      	ldr	r2, [pc, #80]	; (8003d08 <TIM_OC3_SetConfig+0xd0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d113      	bne.n	8003ce2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	621a      	str	r2, [r3, #32]
}
 8003cfc:	bf00      	nop
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40012c00 	.word	0x40012c00

08003d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	031b      	lsls	r3, r3, #12
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a0f      	ldr	r2, [pc, #60]	; (8003da4 <TIM_OC4_SetConfig+0x98>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d109      	bne.n	8003d80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	019b      	lsls	r3, r3, #6
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr
 8003da4:	40012c00 	.word	0x40012c00

08003da8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f023 0201 	bic.w	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f023 030a 	bic.w	r3, r3, #10
 8003de4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	621a      	str	r2, [r3, #32]
}
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f023 0210 	bic.w	r2, r3, #16
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	031b      	lsls	r3, r3, #12
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	621a      	str	r2, [r3, #32]
}
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr

08003e62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b085      	sub	sp, #20
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f043 0307 	orr.w	r3, r3, #7
 8003e84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	609a      	str	r2, [r3, #8]
}
 8003e8c:	bf00      	nop
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr

08003e96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b087      	sub	sp, #28
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	021a      	lsls	r2, r3, #8
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	609a      	str	r2, [r3, #8]
}
 8003eca:	bf00      	nop
 8003ecc:	371c      	adds	r7, #28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e046      	b.n	8003f7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a16      	ldr	r2, [pc, #88]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f38:	d009      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a12      	ldr	r2, [pc, #72]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a10      	ldr	r2, [pc, #64]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10c      	bne.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800

08003f90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e03d      	b.n	8004028 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr
	...

08004034 <__errno>:
 8004034:	4b01      	ldr	r3, [pc, #4]	; (800403c <__errno+0x8>)
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	2000000c 	.word	0x2000000c

08004040 <__libc_init_array>:
 8004040:	b570      	push	{r4, r5, r6, lr}
 8004042:	2500      	movs	r5, #0
 8004044:	4e0c      	ldr	r6, [pc, #48]	; (8004078 <__libc_init_array+0x38>)
 8004046:	4c0d      	ldr	r4, [pc, #52]	; (800407c <__libc_init_array+0x3c>)
 8004048:	1ba4      	subs	r4, r4, r6
 800404a:	10a4      	asrs	r4, r4, #2
 800404c:	42a5      	cmp	r5, r4
 800404e:	d109      	bne.n	8004064 <__libc_init_array+0x24>
 8004050:	f000 ff74 	bl	8004f3c <_init>
 8004054:	2500      	movs	r5, #0
 8004056:	4e0a      	ldr	r6, [pc, #40]	; (8004080 <__libc_init_array+0x40>)
 8004058:	4c0a      	ldr	r4, [pc, #40]	; (8004084 <__libc_init_array+0x44>)
 800405a:	1ba4      	subs	r4, r4, r6
 800405c:	10a4      	asrs	r4, r4, #2
 800405e:	42a5      	cmp	r5, r4
 8004060:	d105      	bne.n	800406e <__libc_init_array+0x2e>
 8004062:	bd70      	pop	{r4, r5, r6, pc}
 8004064:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004068:	4798      	blx	r3
 800406a:	3501      	adds	r5, #1
 800406c:	e7ee      	b.n	800404c <__libc_init_array+0xc>
 800406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004072:	4798      	blx	r3
 8004074:	3501      	adds	r5, #1
 8004076:	e7f2      	b.n	800405e <__libc_init_array+0x1e>
 8004078:	080050d0 	.word	0x080050d0
 800407c:	080050d0 	.word	0x080050d0
 8004080:	080050d0 	.word	0x080050d0
 8004084:	080050d4 	.word	0x080050d4

08004088 <memset>:
 8004088:	4603      	mov	r3, r0
 800408a:	4402      	add	r2, r0
 800408c:	4293      	cmp	r3, r2
 800408e:	d100      	bne.n	8004092 <memset+0xa>
 8004090:	4770      	bx	lr
 8004092:	f803 1b01 	strb.w	r1, [r3], #1
 8004096:	e7f9      	b.n	800408c <memset+0x4>

08004098 <iprintf>:
 8004098:	b40f      	push	{r0, r1, r2, r3}
 800409a:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <iprintf+0x2c>)
 800409c:	b513      	push	{r0, r1, r4, lr}
 800409e:	681c      	ldr	r4, [r3, #0]
 80040a0:	b124      	cbz	r4, 80040ac <iprintf+0x14>
 80040a2:	69a3      	ldr	r3, [r4, #24]
 80040a4:	b913      	cbnz	r3, 80040ac <iprintf+0x14>
 80040a6:	4620      	mov	r0, r4
 80040a8:	f000 fa22 	bl	80044f0 <__sinit>
 80040ac:	ab05      	add	r3, sp, #20
 80040ae:	9a04      	ldr	r2, [sp, #16]
 80040b0:	68a1      	ldr	r1, [r4, #8]
 80040b2:	4620      	mov	r0, r4
 80040b4:	9301      	str	r3, [sp, #4]
 80040b6:	f000 fbd7 	bl	8004868 <_vfiprintf_r>
 80040ba:	b002      	add	sp, #8
 80040bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040c0:	b004      	add	sp, #16
 80040c2:	4770      	bx	lr
 80040c4:	2000000c 	.word	0x2000000c

080040c8 <_puts_r>:
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	460e      	mov	r6, r1
 80040cc:	4605      	mov	r5, r0
 80040ce:	b118      	cbz	r0, 80040d8 <_puts_r+0x10>
 80040d0:	6983      	ldr	r3, [r0, #24]
 80040d2:	b90b      	cbnz	r3, 80040d8 <_puts_r+0x10>
 80040d4:	f000 fa0c 	bl	80044f0 <__sinit>
 80040d8:	69ab      	ldr	r3, [r5, #24]
 80040da:	68ac      	ldr	r4, [r5, #8]
 80040dc:	b913      	cbnz	r3, 80040e4 <_puts_r+0x1c>
 80040de:	4628      	mov	r0, r5
 80040e0:	f000 fa06 	bl	80044f0 <__sinit>
 80040e4:	4b23      	ldr	r3, [pc, #140]	; (8004174 <_puts_r+0xac>)
 80040e6:	429c      	cmp	r4, r3
 80040e8:	d117      	bne.n	800411a <_puts_r+0x52>
 80040ea:	686c      	ldr	r4, [r5, #4]
 80040ec:	89a3      	ldrh	r3, [r4, #12]
 80040ee:	071b      	lsls	r3, r3, #28
 80040f0:	d51d      	bpl.n	800412e <_puts_r+0x66>
 80040f2:	6923      	ldr	r3, [r4, #16]
 80040f4:	b1db      	cbz	r3, 800412e <_puts_r+0x66>
 80040f6:	3e01      	subs	r6, #1
 80040f8:	68a3      	ldr	r3, [r4, #8]
 80040fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040fe:	3b01      	subs	r3, #1
 8004100:	60a3      	str	r3, [r4, #8]
 8004102:	b9e9      	cbnz	r1, 8004140 <_puts_r+0x78>
 8004104:	2b00      	cmp	r3, #0
 8004106:	da2e      	bge.n	8004166 <_puts_r+0x9e>
 8004108:	4622      	mov	r2, r4
 800410a:	210a      	movs	r1, #10
 800410c:	4628      	mov	r0, r5
 800410e:	f000 f83f 	bl	8004190 <__swbuf_r>
 8004112:	3001      	adds	r0, #1
 8004114:	d011      	beq.n	800413a <_puts_r+0x72>
 8004116:	200a      	movs	r0, #10
 8004118:	e011      	b.n	800413e <_puts_r+0x76>
 800411a:	4b17      	ldr	r3, [pc, #92]	; (8004178 <_puts_r+0xb0>)
 800411c:	429c      	cmp	r4, r3
 800411e:	d101      	bne.n	8004124 <_puts_r+0x5c>
 8004120:	68ac      	ldr	r4, [r5, #8]
 8004122:	e7e3      	b.n	80040ec <_puts_r+0x24>
 8004124:	4b15      	ldr	r3, [pc, #84]	; (800417c <_puts_r+0xb4>)
 8004126:	429c      	cmp	r4, r3
 8004128:	bf08      	it	eq
 800412a:	68ec      	ldreq	r4, [r5, #12]
 800412c:	e7de      	b.n	80040ec <_puts_r+0x24>
 800412e:	4621      	mov	r1, r4
 8004130:	4628      	mov	r0, r5
 8004132:	f000 f87f 	bl	8004234 <__swsetup_r>
 8004136:	2800      	cmp	r0, #0
 8004138:	d0dd      	beq.n	80040f6 <_puts_r+0x2e>
 800413a:	f04f 30ff 	mov.w	r0, #4294967295
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	2b00      	cmp	r3, #0
 8004142:	da04      	bge.n	800414e <_puts_r+0x86>
 8004144:	69a2      	ldr	r2, [r4, #24]
 8004146:	429a      	cmp	r2, r3
 8004148:	dc06      	bgt.n	8004158 <_puts_r+0x90>
 800414a:	290a      	cmp	r1, #10
 800414c:	d004      	beq.n	8004158 <_puts_r+0x90>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	6022      	str	r2, [r4, #0]
 8004154:	7019      	strb	r1, [r3, #0]
 8004156:	e7cf      	b.n	80040f8 <_puts_r+0x30>
 8004158:	4622      	mov	r2, r4
 800415a:	4628      	mov	r0, r5
 800415c:	f000 f818 	bl	8004190 <__swbuf_r>
 8004160:	3001      	adds	r0, #1
 8004162:	d1c9      	bne.n	80040f8 <_puts_r+0x30>
 8004164:	e7e9      	b.n	800413a <_puts_r+0x72>
 8004166:	200a      	movs	r0, #10
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	6022      	str	r2, [r4, #0]
 800416e:	7018      	strb	r0, [r3, #0]
 8004170:	e7e5      	b.n	800413e <_puts_r+0x76>
 8004172:	bf00      	nop
 8004174:	0800505c 	.word	0x0800505c
 8004178:	0800507c 	.word	0x0800507c
 800417c:	0800503c 	.word	0x0800503c

08004180 <puts>:
 8004180:	4b02      	ldr	r3, [pc, #8]	; (800418c <puts+0xc>)
 8004182:	4601      	mov	r1, r0
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	f7ff bf9f 	b.w	80040c8 <_puts_r>
 800418a:	bf00      	nop
 800418c:	2000000c 	.word	0x2000000c

08004190 <__swbuf_r>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	460e      	mov	r6, r1
 8004194:	4614      	mov	r4, r2
 8004196:	4605      	mov	r5, r0
 8004198:	b118      	cbz	r0, 80041a2 <__swbuf_r+0x12>
 800419a:	6983      	ldr	r3, [r0, #24]
 800419c:	b90b      	cbnz	r3, 80041a2 <__swbuf_r+0x12>
 800419e:	f000 f9a7 	bl	80044f0 <__sinit>
 80041a2:	4b21      	ldr	r3, [pc, #132]	; (8004228 <__swbuf_r+0x98>)
 80041a4:	429c      	cmp	r4, r3
 80041a6:	d12a      	bne.n	80041fe <__swbuf_r+0x6e>
 80041a8:	686c      	ldr	r4, [r5, #4]
 80041aa:	69a3      	ldr	r3, [r4, #24]
 80041ac:	60a3      	str	r3, [r4, #8]
 80041ae:	89a3      	ldrh	r3, [r4, #12]
 80041b0:	071a      	lsls	r2, r3, #28
 80041b2:	d52e      	bpl.n	8004212 <__swbuf_r+0x82>
 80041b4:	6923      	ldr	r3, [r4, #16]
 80041b6:	b363      	cbz	r3, 8004212 <__swbuf_r+0x82>
 80041b8:	6923      	ldr	r3, [r4, #16]
 80041ba:	6820      	ldr	r0, [r4, #0]
 80041bc:	b2f6      	uxtb	r6, r6
 80041be:	1ac0      	subs	r0, r0, r3
 80041c0:	6963      	ldr	r3, [r4, #20]
 80041c2:	4637      	mov	r7, r6
 80041c4:	4283      	cmp	r3, r0
 80041c6:	dc04      	bgt.n	80041d2 <__swbuf_r+0x42>
 80041c8:	4621      	mov	r1, r4
 80041ca:	4628      	mov	r0, r5
 80041cc:	f000 f926 	bl	800441c <_fflush_r>
 80041d0:	bb28      	cbnz	r0, 800421e <__swbuf_r+0x8e>
 80041d2:	68a3      	ldr	r3, [r4, #8]
 80041d4:	3001      	adds	r0, #1
 80041d6:	3b01      	subs	r3, #1
 80041d8:	60a3      	str	r3, [r4, #8]
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	6022      	str	r2, [r4, #0]
 80041e0:	701e      	strb	r6, [r3, #0]
 80041e2:	6963      	ldr	r3, [r4, #20]
 80041e4:	4283      	cmp	r3, r0
 80041e6:	d004      	beq.n	80041f2 <__swbuf_r+0x62>
 80041e8:	89a3      	ldrh	r3, [r4, #12]
 80041ea:	07db      	lsls	r3, r3, #31
 80041ec:	d519      	bpl.n	8004222 <__swbuf_r+0x92>
 80041ee:	2e0a      	cmp	r6, #10
 80041f0:	d117      	bne.n	8004222 <__swbuf_r+0x92>
 80041f2:	4621      	mov	r1, r4
 80041f4:	4628      	mov	r0, r5
 80041f6:	f000 f911 	bl	800441c <_fflush_r>
 80041fa:	b190      	cbz	r0, 8004222 <__swbuf_r+0x92>
 80041fc:	e00f      	b.n	800421e <__swbuf_r+0x8e>
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <__swbuf_r+0x9c>)
 8004200:	429c      	cmp	r4, r3
 8004202:	d101      	bne.n	8004208 <__swbuf_r+0x78>
 8004204:	68ac      	ldr	r4, [r5, #8]
 8004206:	e7d0      	b.n	80041aa <__swbuf_r+0x1a>
 8004208:	4b09      	ldr	r3, [pc, #36]	; (8004230 <__swbuf_r+0xa0>)
 800420a:	429c      	cmp	r4, r3
 800420c:	bf08      	it	eq
 800420e:	68ec      	ldreq	r4, [r5, #12]
 8004210:	e7cb      	b.n	80041aa <__swbuf_r+0x1a>
 8004212:	4621      	mov	r1, r4
 8004214:	4628      	mov	r0, r5
 8004216:	f000 f80d 	bl	8004234 <__swsetup_r>
 800421a:	2800      	cmp	r0, #0
 800421c:	d0cc      	beq.n	80041b8 <__swbuf_r+0x28>
 800421e:	f04f 37ff 	mov.w	r7, #4294967295
 8004222:	4638      	mov	r0, r7
 8004224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004226:	bf00      	nop
 8004228:	0800505c 	.word	0x0800505c
 800422c:	0800507c 	.word	0x0800507c
 8004230:	0800503c 	.word	0x0800503c

08004234 <__swsetup_r>:
 8004234:	4b32      	ldr	r3, [pc, #200]	; (8004300 <__swsetup_r+0xcc>)
 8004236:	b570      	push	{r4, r5, r6, lr}
 8004238:	681d      	ldr	r5, [r3, #0]
 800423a:	4606      	mov	r6, r0
 800423c:	460c      	mov	r4, r1
 800423e:	b125      	cbz	r5, 800424a <__swsetup_r+0x16>
 8004240:	69ab      	ldr	r3, [r5, #24]
 8004242:	b913      	cbnz	r3, 800424a <__swsetup_r+0x16>
 8004244:	4628      	mov	r0, r5
 8004246:	f000 f953 	bl	80044f0 <__sinit>
 800424a:	4b2e      	ldr	r3, [pc, #184]	; (8004304 <__swsetup_r+0xd0>)
 800424c:	429c      	cmp	r4, r3
 800424e:	d10f      	bne.n	8004270 <__swsetup_r+0x3c>
 8004250:	686c      	ldr	r4, [r5, #4]
 8004252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004256:	b29a      	uxth	r2, r3
 8004258:	0715      	lsls	r5, r2, #28
 800425a:	d42c      	bmi.n	80042b6 <__swsetup_r+0x82>
 800425c:	06d0      	lsls	r0, r2, #27
 800425e:	d411      	bmi.n	8004284 <__swsetup_r+0x50>
 8004260:	2209      	movs	r2, #9
 8004262:	6032      	str	r2, [r6, #0]
 8004264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	f04f 30ff 	mov.w	r0, #4294967295
 800426e:	e03e      	b.n	80042ee <__swsetup_r+0xba>
 8004270:	4b25      	ldr	r3, [pc, #148]	; (8004308 <__swsetup_r+0xd4>)
 8004272:	429c      	cmp	r4, r3
 8004274:	d101      	bne.n	800427a <__swsetup_r+0x46>
 8004276:	68ac      	ldr	r4, [r5, #8]
 8004278:	e7eb      	b.n	8004252 <__swsetup_r+0x1e>
 800427a:	4b24      	ldr	r3, [pc, #144]	; (800430c <__swsetup_r+0xd8>)
 800427c:	429c      	cmp	r4, r3
 800427e:	bf08      	it	eq
 8004280:	68ec      	ldreq	r4, [r5, #12]
 8004282:	e7e6      	b.n	8004252 <__swsetup_r+0x1e>
 8004284:	0751      	lsls	r1, r2, #29
 8004286:	d512      	bpl.n	80042ae <__swsetup_r+0x7a>
 8004288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800428a:	b141      	cbz	r1, 800429e <__swsetup_r+0x6a>
 800428c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004290:	4299      	cmp	r1, r3
 8004292:	d002      	beq.n	800429a <__swsetup_r+0x66>
 8004294:	4630      	mov	r0, r6
 8004296:	f000 fa19 	bl	80046cc <_free_r>
 800429a:	2300      	movs	r3, #0
 800429c:	6363      	str	r3, [r4, #52]	; 0x34
 800429e:	89a3      	ldrh	r3, [r4, #12]
 80042a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042a4:	81a3      	strh	r3, [r4, #12]
 80042a6:	2300      	movs	r3, #0
 80042a8:	6063      	str	r3, [r4, #4]
 80042aa:	6923      	ldr	r3, [r4, #16]
 80042ac:	6023      	str	r3, [r4, #0]
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	f043 0308 	orr.w	r3, r3, #8
 80042b4:	81a3      	strh	r3, [r4, #12]
 80042b6:	6923      	ldr	r3, [r4, #16]
 80042b8:	b94b      	cbnz	r3, 80042ce <__swsetup_r+0x9a>
 80042ba:	89a3      	ldrh	r3, [r4, #12]
 80042bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c4:	d003      	beq.n	80042ce <__swsetup_r+0x9a>
 80042c6:	4621      	mov	r1, r4
 80042c8:	4630      	mov	r0, r6
 80042ca:	f000 f9bf 	bl	800464c <__smakebuf_r>
 80042ce:	89a2      	ldrh	r2, [r4, #12]
 80042d0:	f012 0301 	ands.w	r3, r2, #1
 80042d4:	d00c      	beq.n	80042f0 <__swsetup_r+0xbc>
 80042d6:	2300      	movs	r3, #0
 80042d8:	60a3      	str	r3, [r4, #8]
 80042da:	6963      	ldr	r3, [r4, #20]
 80042dc:	425b      	negs	r3, r3
 80042de:	61a3      	str	r3, [r4, #24]
 80042e0:	6923      	ldr	r3, [r4, #16]
 80042e2:	b953      	cbnz	r3, 80042fa <__swsetup_r+0xc6>
 80042e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80042ec:	d1ba      	bne.n	8004264 <__swsetup_r+0x30>
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	0792      	lsls	r2, r2, #30
 80042f2:	bf58      	it	pl
 80042f4:	6963      	ldrpl	r3, [r4, #20]
 80042f6:	60a3      	str	r3, [r4, #8]
 80042f8:	e7f2      	b.n	80042e0 <__swsetup_r+0xac>
 80042fa:	2000      	movs	r0, #0
 80042fc:	e7f7      	b.n	80042ee <__swsetup_r+0xba>
 80042fe:	bf00      	nop
 8004300:	2000000c 	.word	0x2000000c
 8004304:	0800505c 	.word	0x0800505c
 8004308:	0800507c 	.word	0x0800507c
 800430c:	0800503c 	.word	0x0800503c

08004310 <__sflush_r>:
 8004310:	898a      	ldrh	r2, [r1, #12]
 8004312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004316:	4605      	mov	r5, r0
 8004318:	0710      	lsls	r0, r2, #28
 800431a:	460c      	mov	r4, r1
 800431c:	d458      	bmi.n	80043d0 <__sflush_r+0xc0>
 800431e:	684b      	ldr	r3, [r1, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	dc05      	bgt.n	8004330 <__sflush_r+0x20>
 8004324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	dc02      	bgt.n	8004330 <__sflush_r+0x20>
 800432a:	2000      	movs	r0, #0
 800432c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004332:	2e00      	cmp	r6, #0
 8004334:	d0f9      	beq.n	800432a <__sflush_r+0x1a>
 8004336:	2300      	movs	r3, #0
 8004338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800433c:	682f      	ldr	r7, [r5, #0]
 800433e:	6a21      	ldr	r1, [r4, #32]
 8004340:	602b      	str	r3, [r5, #0]
 8004342:	d032      	beq.n	80043aa <__sflush_r+0x9a>
 8004344:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	075a      	lsls	r2, r3, #29
 800434a:	d505      	bpl.n	8004358 <__sflush_r+0x48>
 800434c:	6863      	ldr	r3, [r4, #4]
 800434e:	1ac0      	subs	r0, r0, r3
 8004350:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004352:	b10b      	cbz	r3, 8004358 <__sflush_r+0x48>
 8004354:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004356:	1ac0      	subs	r0, r0, r3
 8004358:	2300      	movs	r3, #0
 800435a:	4602      	mov	r2, r0
 800435c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800435e:	6a21      	ldr	r1, [r4, #32]
 8004360:	4628      	mov	r0, r5
 8004362:	47b0      	blx	r6
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	89a3      	ldrh	r3, [r4, #12]
 8004368:	d106      	bne.n	8004378 <__sflush_r+0x68>
 800436a:	6829      	ldr	r1, [r5, #0]
 800436c:	291d      	cmp	r1, #29
 800436e:	d848      	bhi.n	8004402 <__sflush_r+0xf2>
 8004370:	4a29      	ldr	r2, [pc, #164]	; (8004418 <__sflush_r+0x108>)
 8004372:	40ca      	lsrs	r2, r1
 8004374:	07d6      	lsls	r6, r2, #31
 8004376:	d544      	bpl.n	8004402 <__sflush_r+0xf2>
 8004378:	2200      	movs	r2, #0
 800437a:	6062      	str	r2, [r4, #4]
 800437c:	6922      	ldr	r2, [r4, #16]
 800437e:	04d9      	lsls	r1, r3, #19
 8004380:	6022      	str	r2, [r4, #0]
 8004382:	d504      	bpl.n	800438e <__sflush_r+0x7e>
 8004384:	1c42      	adds	r2, r0, #1
 8004386:	d101      	bne.n	800438c <__sflush_r+0x7c>
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	b903      	cbnz	r3, 800438e <__sflush_r+0x7e>
 800438c:	6560      	str	r0, [r4, #84]	; 0x54
 800438e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004390:	602f      	str	r7, [r5, #0]
 8004392:	2900      	cmp	r1, #0
 8004394:	d0c9      	beq.n	800432a <__sflush_r+0x1a>
 8004396:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800439a:	4299      	cmp	r1, r3
 800439c:	d002      	beq.n	80043a4 <__sflush_r+0x94>
 800439e:	4628      	mov	r0, r5
 80043a0:	f000 f994 	bl	80046cc <_free_r>
 80043a4:	2000      	movs	r0, #0
 80043a6:	6360      	str	r0, [r4, #52]	; 0x34
 80043a8:	e7c0      	b.n	800432c <__sflush_r+0x1c>
 80043aa:	2301      	movs	r3, #1
 80043ac:	4628      	mov	r0, r5
 80043ae:	47b0      	blx	r6
 80043b0:	1c41      	adds	r1, r0, #1
 80043b2:	d1c8      	bne.n	8004346 <__sflush_r+0x36>
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0c5      	beq.n	8004346 <__sflush_r+0x36>
 80043ba:	2b1d      	cmp	r3, #29
 80043bc:	d001      	beq.n	80043c2 <__sflush_r+0xb2>
 80043be:	2b16      	cmp	r3, #22
 80043c0:	d101      	bne.n	80043c6 <__sflush_r+0xb6>
 80043c2:	602f      	str	r7, [r5, #0]
 80043c4:	e7b1      	b.n	800432a <__sflush_r+0x1a>
 80043c6:	89a3      	ldrh	r3, [r4, #12]
 80043c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043cc:	81a3      	strh	r3, [r4, #12]
 80043ce:	e7ad      	b.n	800432c <__sflush_r+0x1c>
 80043d0:	690f      	ldr	r7, [r1, #16]
 80043d2:	2f00      	cmp	r7, #0
 80043d4:	d0a9      	beq.n	800432a <__sflush_r+0x1a>
 80043d6:	0793      	lsls	r3, r2, #30
 80043d8:	bf18      	it	ne
 80043da:	2300      	movne	r3, #0
 80043dc:	680e      	ldr	r6, [r1, #0]
 80043de:	bf08      	it	eq
 80043e0:	694b      	ldreq	r3, [r1, #20]
 80043e2:	eba6 0807 	sub.w	r8, r6, r7
 80043e6:	600f      	str	r7, [r1, #0]
 80043e8:	608b      	str	r3, [r1, #8]
 80043ea:	f1b8 0f00 	cmp.w	r8, #0
 80043ee:	dd9c      	ble.n	800432a <__sflush_r+0x1a>
 80043f0:	4643      	mov	r3, r8
 80043f2:	463a      	mov	r2, r7
 80043f4:	6a21      	ldr	r1, [r4, #32]
 80043f6:	4628      	mov	r0, r5
 80043f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80043fa:	47b0      	blx	r6
 80043fc:	2800      	cmp	r0, #0
 80043fe:	dc06      	bgt.n	800440e <__sflush_r+0xfe>
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004406:	81a3      	strh	r3, [r4, #12]
 8004408:	f04f 30ff 	mov.w	r0, #4294967295
 800440c:	e78e      	b.n	800432c <__sflush_r+0x1c>
 800440e:	4407      	add	r7, r0
 8004410:	eba8 0800 	sub.w	r8, r8, r0
 8004414:	e7e9      	b.n	80043ea <__sflush_r+0xda>
 8004416:	bf00      	nop
 8004418:	20400001 	.word	0x20400001

0800441c <_fflush_r>:
 800441c:	b538      	push	{r3, r4, r5, lr}
 800441e:	690b      	ldr	r3, [r1, #16]
 8004420:	4605      	mov	r5, r0
 8004422:	460c      	mov	r4, r1
 8004424:	b1db      	cbz	r3, 800445e <_fflush_r+0x42>
 8004426:	b118      	cbz	r0, 8004430 <_fflush_r+0x14>
 8004428:	6983      	ldr	r3, [r0, #24]
 800442a:	b90b      	cbnz	r3, 8004430 <_fflush_r+0x14>
 800442c:	f000 f860 	bl	80044f0 <__sinit>
 8004430:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <_fflush_r+0x48>)
 8004432:	429c      	cmp	r4, r3
 8004434:	d109      	bne.n	800444a <_fflush_r+0x2e>
 8004436:	686c      	ldr	r4, [r5, #4]
 8004438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800443c:	b17b      	cbz	r3, 800445e <_fflush_r+0x42>
 800443e:	4621      	mov	r1, r4
 8004440:	4628      	mov	r0, r5
 8004442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004446:	f7ff bf63 	b.w	8004310 <__sflush_r>
 800444a:	4b07      	ldr	r3, [pc, #28]	; (8004468 <_fflush_r+0x4c>)
 800444c:	429c      	cmp	r4, r3
 800444e:	d101      	bne.n	8004454 <_fflush_r+0x38>
 8004450:	68ac      	ldr	r4, [r5, #8]
 8004452:	e7f1      	b.n	8004438 <_fflush_r+0x1c>
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <_fflush_r+0x50>)
 8004456:	429c      	cmp	r4, r3
 8004458:	bf08      	it	eq
 800445a:	68ec      	ldreq	r4, [r5, #12]
 800445c:	e7ec      	b.n	8004438 <_fflush_r+0x1c>
 800445e:	2000      	movs	r0, #0
 8004460:	bd38      	pop	{r3, r4, r5, pc}
 8004462:	bf00      	nop
 8004464:	0800505c 	.word	0x0800505c
 8004468:	0800507c 	.word	0x0800507c
 800446c:	0800503c 	.word	0x0800503c

08004470 <std>:
 8004470:	2300      	movs	r3, #0
 8004472:	b510      	push	{r4, lr}
 8004474:	4604      	mov	r4, r0
 8004476:	e9c0 3300 	strd	r3, r3, [r0]
 800447a:	6083      	str	r3, [r0, #8]
 800447c:	8181      	strh	r1, [r0, #12]
 800447e:	6643      	str	r3, [r0, #100]	; 0x64
 8004480:	81c2      	strh	r2, [r0, #14]
 8004482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004486:	6183      	str	r3, [r0, #24]
 8004488:	4619      	mov	r1, r3
 800448a:	2208      	movs	r2, #8
 800448c:	305c      	adds	r0, #92	; 0x5c
 800448e:	f7ff fdfb 	bl	8004088 <memset>
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <std+0x38>)
 8004494:	6224      	str	r4, [r4, #32]
 8004496:	6263      	str	r3, [r4, #36]	; 0x24
 8004498:	4b04      	ldr	r3, [pc, #16]	; (80044ac <std+0x3c>)
 800449a:	62a3      	str	r3, [r4, #40]	; 0x28
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <std+0x40>)
 800449e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044a0:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <std+0x44>)
 80044a2:	6323      	str	r3, [r4, #48]	; 0x30
 80044a4:	bd10      	pop	{r4, pc}
 80044a6:	bf00      	nop
 80044a8:	08004dc5 	.word	0x08004dc5
 80044ac:	08004de7 	.word	0x08004de7
 80044b0:	08004e1f 	.word	0x08004e1f
 80044b4:	08004e43 	.word	0x08004e43

080044b8 <_cleanup_r>:
 80044b8:	4901      	ldr	r1, [pc, #4]	; (80044c0 <_cleanup_r+0x8>)
 80044ba:	f000 b885 	b.w	80045c8 <_fwalk_reent>
 80044be:	bf00      	nop
 80044c0:	0800441d 	.word	0x0800441d

080044c4 <__sfmoreglue>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	2568      	movs	r5, #104	; 0x68
 80044c8:	1e4a      	subs	r2, r1, #1
 80044ca:	4355      	muls	r5, r2
 80044cc:	460e      	mov	r6, r1
 80044ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80044d2:	f000 f947 	bl	8004764 <_malloc_r>
 80044d6:	4604      	mov	r4, r0
 80044d8:	b140      	cbz	r0, 80044ec <__sfmoreglue+0x28>
 80044da:	2100      	movs	r1, #0
 80044dc:	e9c0 1600 	strd	r1, r6, [r0]
 80044e0:	300c      	adds	r0, #12
 80044e2:	60a0      	str	r0, [r4, #8]
 80044e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80044e8:	f7ff fdce 	bl	8004088 <memset>
 80044ec:	4620      	mov	r0, r4
 80044ee:	bd70      	pop	{r4, r5, r6, pc}

080044f0 <__sinit>:
 80044f0:	6983      	ldr	r3, [r0, #24]
 80044f2:	b510      	push	{r4, lr}
 80044f4:	4604      	mov	r4, r0
 80044f6:	bb33      	cbnz	r3, 8004546 <__sinit+0x56>
 80044f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80044fc:	6503      	str	r3, [r0, #80]	; 0x50
 80044fe:	4b12      	ldr	r3, [pc, #72]	; (8004548 <__sinit+0x58>)
 8004500:	4a12      	ldr	r2, [pc, #72]	; (800454c <__sinit+0x5c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6282      	str	r2, [r0, #40]	; 0x28
 8004506:	4298      	cmp	r0, r3
 8004508:	bf04      	itt	eq
 800450a:	2301      	moveq	r3, #1
 800450c:	6183      	streq	r3, [r0, #24]
 800450e:	f000 f81f 	bl	8004550 <__sfp>
 8004512:	6060      	str	r0, [r4, #4]
 8004514:	4620      	mov	r0, r4
 8004516:	f000 f81b 	bl	8004550 <__sfp>
 800451a:	60a0      	str	r0, [r4, #8]
 800451c:	4620      	mov	r0, r4
 800451e:	f000 f817 	bl	8004550 <__sfp>
 8004522:	2200      	movs	r2, #0
 8004524:	60e0      	str	r0, [r4, #12]
 8004526:	2104      	movs	r1, #4
 8004528:	6860      	ldr	r0, [r4, #4]
 800452a:	f7ff ffa1 	bl	8004470 <std>
 800452e:	2201      	movs	r2, #1
 8004530:	2109      	movs	r1, #9
 8004532:	68a0      	ldr	r0, [r4, #8]
 8004534:	f7ff ff9c 	bl	8004470 <std>
 8004538:	2202      	movs	r2, #2
 800453a:	2112      	movs	r1, #18
 800453c:	68e0      	ldr	r0, [r4, #12]
 800453e:	f7ff ff97 	bl	8004470 <std>
 8004542:	2301      	movs	r3, #1
 8004544:	61a3      	str	r3, [r4, #24]
 8004546:	bd10      	pop	{r4, pc}
 8004548:	08005038 	.word	0x08005038
 800454c:	080044b9 	.word	0x080044b9

08004550 <__sfp>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <__sfp+0x70>)
 8004554:	4607      	mov	r7, r0
 8004556:	681e      	ldr	r6, [r3, #0]
 8004558:	69b3      	ldr	r3, [r6, #24]
 800455a:	b913      	cbnz	r3, 8004562 <__sfp+0x12>
 800455c:	4630      	mov	r0, r6
 800455e:	f7ff ffc7 	bl	80044f0 <__sinit>
 8004562:	3648      	adds	r6, #72	; 0x48
 8004564:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004568:	3b01      	subs	r3, #1
 800456a:	d503      	bpl.n	8004574 <__sfp+0x24>
 800456c:	6833      	ldr	r3, [r6, #0]
 800456e:	b133      	cbz	r3, 800457e <__sfp+0x2e>
 8004570:	6836      	ldr	r6, [r6, #0]
 8004572:	e7f7      	b.n	8004564 <__sfp+0x14>
 8004574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004578:	b16d      	cbz	r5, 8004596 <__sfp+0x46>
 800457a:	3468      	adds	r4, #104	; 0x68
 800457c:	e7f4      	b.n	8004568 <__sfp+0x18>
 800457e:	2104      	movs	r1, #4
 8004580:	4638      	mov	r0, r7
 8004582:	f7ff ff9f 	bl	80044c4 <__sfmoreglue>
 8004586:	6030      	str	r0, [r6, #0]
 8004588:	2800      	cmp	r0, #0
 800458a:	d1f1      	bne.n	8004570 <__sfp+0x20>
 800458c:	230c      	movs	r3, #12
 800458e:	4604      	mov	r4, r0
 8004590:	603b      	str	r3, [r7, #0]
 8004592:	4620      	mov	r0, r4
 8004594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <__sfp+0x74>)
 8004598:	6665      	str	r5, [r4, #100]	; 0x64
 800459a:	e9c4 5500 	strd	r5, r5, [r4]
 800459e:	60a5      	str	r5, [r4, #8]
 80045a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80045a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80045a8:	2208      	movs	r2, #8
 80045aa:	4629      	mov	r1, r5
 80045ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80045b0:	f7ff fd6a 	bl	8004088 <memset>
 80045b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80045b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80045bc:	e7e9      	b.n	8004592 <__sfp+0x42>
 80045be:	bf00      	nop
 80045c0:	08005038 	.word	0x08005038
 80045c4:	ffff0001 	.word	0xffff0001

080045c8 <_fwalk_reent>:
 80045c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045cc:	4680      	mov	r8, r0
 80045ce:	4689      	mov	r9, r1
 80045d0:	2600      	movs	r6, #0
 80045d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045d6:	b914      	cbnz	r4, 80045de <_fwalk_reent+0x16>
 80045d8:	4630      	mov	r0, r6
 80045da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80045e2:	3f01      	subs	r7, #1
 80045e4:	d501      	bpl.n	80045ea <_fwalk_reent+0x22>
 80045e6:	6824      	ldr	r4, [r4, #0]
 80045e8:	e7f5      	b.n	80045d6 <_fwalk_reent+0xe>
 80045ea:	89ab      	ldrh	r3, [r5, #12]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d907      	bls.n	8004600 <_fwalk_reent+0x38>
 80045f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045f4:	3301      	adds	r3, #1
 80045f6:	d003      	beq.n	8004600 <_fwalk_reent+0x38>
 80045f8:	4629      	mov	r1, r5
 80045fa:	4640      	mov	r0, r8
 80045fc:	47c8      	blx	r9
 80045fe:	4306      	orrs	r6, r0
 8004600:	3568      	adds	r5, #104	; 0x68
 8004602:	e7ee      	b.n	80045e2 <_fwalk_reent+0x1a>

08004604 <__swhatbuf_r>:
 8004604:	b570      	push	{r4, r5, r6, lr}
 8004606:	460e      	mov	r6, r1
 8004608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800460c:	b096      	sub	sp, #88	; 0x58
 800460e:	2900      	cmp	r1, #0
 8004610:	4614      	mov	r4, r2
 8004612:	461d      	mov	r5, r3
 8004614:	da07      	bge.n	8004626 <__swhatbuf_r+0x22>
 8004616:	2300      	movs	r3, #0
 8004618:	602b      	str	r3, [r5, #0]
 800461a:	89b3      	ldrh	r3, [r6, #12]
 800461c:	061a      	lsls	r2, r3, #24
 800461e:	d410      	bmi.n	8004642 <__swhatbuf_r+0x3e>
 8004620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004624:	e00e      	b.n	8004644 <__swhatbuf_r+0x40>
 8004626:	466a      	mov	r2, sp
 8004628:	f000 fc32 	bl	8004e90 <_fstat_r>
 800462c:	2800      	cmp	r0, #0
 800462e:	dbf2      	blt.n	8004616 <__swhatbuf_r+0x12>
 8004630:	9a01      	ldr	r2, [sp, #4]
 8004632:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004636:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800463a:	425a      	negs	r2, r3
 800463c:	415a      	adcs	r2, r3
 800463e:	602a      	str	r2, [r5, #0]
 8004640:	e7ee      	b.n	8004620 <__swhatbuf_r+0x1c>
 8004642:	2340      	movs	r3, #64	; 0x40
 8004644:	2000      	movs	r0, #0
 8004646:	6023      	str	r3, [r4, #0]
 8004648:	b016      	add	sp, #88	; 0x58
 800464a:	bd70      	pop	{r4, r5, r6, pc}

0800464c <__smakebuf_r>:
 800464c:	898b      	ldrh	r3, [r1, #12]
 800464e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004650:	079d      	lsls	r5, r3, #30
 8004652:	4606      	mov	r6, r0
 8004654:	460c      	mov	r4, r1
 8004656:	d507      	bpl.n	8004668 <__smakebuf_r+0x1c>
 8004658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	6123      	str	r3, [r4, #16]
 8004660:	2301      	movs	r3, #1
 8004662:	6163      	str	r3, [r4, #20]
 8004664:	b002      	add	sp, #8
 8004666:	bd70      	pop	{r4, r5, r6, pc}
 8004668:	ab01      	add	r3, sp, #4
 800466a:	466a      	mov	r2, sp
 800466c:	f7ff ffca 	bl	8004604 <__swhatbuf_r>
 8004670:	9900      	ldr	r1, [sp, #0]
 8004672:	4605      	mov	r5, r0
 8004674:	4630      	mov	r0, r6
 8004676:	f000 f875 	bl	8004764 <_malloc_r>
 800467a:	b948      	cbnz	r0, 8004690 <__smakebuf_r+0x44>
 800467c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004680:	059a      	lsls	r2, r3, #22
 8004682:	d4ef      	bmi.n	8004664 <__smakebuf_r+0x18>
 8004684:	f023 0303 	bic.w	r3, r3, #3
 8004688:	f043 0302 	orr.w	r3, r3, #2
 800468c:	81a3      	strh	r3, [r4, #12]
 800468e:	e7e3      	b.n	8004658 <__smakebuf_r+0xc>
 8004690:	4b0d      	ldr	r3, [pc, #52]	; (80046c8 <__smakebuf_r+0x7c>)
 8004692:	62b3      	str	r3, [r6, #40]	; 0x28
 8004694:	89a3      	ldrh	r3, [r4, #12]
 8004696:	6020      	str	r0, [r4, #0]
 8004698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469c:	81a3      	strh	r3, [r4, #12]
 800469e:	9b00      	ldr	r3, [sp, #0]
 80046a0:	6120      	str	r0, [r4, #16]
 80046a2:	6163      	str	r3, [r4, #20]
 80046a4:	9b01      	ldr	r3, [sp, #4]
 80046a6:	b15b      	cbz	r3, 80046c0 <__smakebuf_r+0x74>
 80046a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ac:	4630      	mov	r0, r6
 80046ae:	f000 fc01 	bl	8004eb4 <_isatty_r>
 80046b2:	b128      	cbz	r0, 80046c0 <__smakebuf_r+0x74>
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	f023 0303 	bic.w	r3, r3, #3
 80046ba:	f043 0301 	orr.w	r3, r3, #1
 80046be:	81a3      	strh	r3, [r4, #12]
 80046c0:	89a3      	ldrh	r3, [r4, #12]
 80046c2:	431d      	orrs	r5, r3
 80046c4:	81a5      	strh	r5, [r4, #12]
 80046c6:	e7cd      	b.n	8004664 <__smakebuf_r+0x18>
 80046c8:	080044b9 	.word	0x080044b9

080046cc <_free_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	4605      	mov	r5, r0
 80046d0:	2900      	cmp	r1, #0
 80046d2:	d043      	beq.n	800475c <_free_r+0x90>
 80046d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046d8:	1f0c      	subs	r4, r1, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	bfb8      	it	lt
 80046de:	18e4      	addlt	r4, r4, r3
 80046e0:	f000 fc18 	bl	8004f14 <__malloc_lock>
 80046e4:	4a1e      	ldr	r2, [pc, #120]	; (8004760 <_free_r+0x94>)
 80046e6:	6813      	ldr	r3, [r2, #0]
 80046e8:	4610      	mov	r0, r2
 80046ea:	b933      	cbnz	r3, 80046fa <_free_r+0x2e>
 80046ec:	6063      	str	r3, [r4, #4]
 80046ee:	6014      	str	r4, [r2, #0]
 80046f0:	4628      	mov	r0, r5
 80046f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046f6:	f000 bc0e 	b.w	8004f16 <__malloc_unlock>
 80046fa:	42a3      	cmp	r3, r4
 80046fc:	d90b      	bls.n	8004716 <_free_r+0x4a>
 80046fe:	6821      	ldr	r1, [r4, #0]
 8004700:	1862      	adds	r2, r4, r1
 8004702:	4293      	cmp	r3, r2
 8004704:	bf01      	itttt	eq
 8004706:	681a      	ldreq	r2, [r3, #0]
 8004708:	685b      	ldreq	r3, [r3, #4]
 800470a:	1852      	addeq	r2, r2, r1
 800470c:	6022      	streq	r2, [r4, #0]
 800470e:	6063      	str	r3, [r4, #4]
 8004710:	6004      	str	r4, [r0, #0]
 8004712:	e7ed      	b.n	80046f0 <_free_r+0x24>
 8004714:	4613      	mov	r3, r2
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	b10a      	cbz	r2, 800471e <_free_r+0x52>
 800471a:	42a2      	cmp	r2, r4
 800471c:	d9fa      	bls.n	8004714 <_free_r+0x48>
 800471e:	6819      	ldr	r1, [r3, #0]
 8004720:	1858      	adds	r0, r3, r1
 8004722:	42a0      	cmp	r0, r4
 8004724:	d10b      	bne.n	800473e <_free_r+0x72>
 8004726:	6820      	ldr	r0, [r4, #0]
 8004728:	4401      	add	r1, r0
 800472a:	1858      	adds	r0, r3, r1
 800472c:	4282      	cmp	r2, r0
 800472e:	6019      	str	r1, [r3, #0]
 8004730:	d1de      	bne.n	80046f0 <_free_r+0x24>
 8004732:	6810      	ldr	r0, [r2, #0]
 8004734:	6852      	ldr	r2, [r2, #4]
 8004736:	4401      	add	r1, r0
 8004738:	6019      	str	r1, [r3, #0]
 800473a:	605a      	str	r2, [r3, #4]
 800473c:	e7d8      	b.n	80046f0 <_free_r+0x24>
 800473e:	d902      	bls.n	8004746 <_free_r+0x7a>
 8004740:	230c      	movs	r3, #12
 8004742:	602b      	str	r3, [r5, #0]
 8004744:	e7d4      	b.n	80046f0 <_free_r+0x24>
 8004746:	6820      	ldr	r0, [r4, #0]
 8004748:	1821      	adds	r1, r4, r0
 800474a:	428a      	cmp	r2, r1
 800474c:	bf01      	itttt	eq
 800474e:	6811      	ldreq	r1, [r2, #0]
 8004750:	6852      	ldreq	r2, [r2, #4]
 8004752:	1809      	addeq	r1, r1, r0
 8004754:	6021      	streq	r1, [r4, #0]
 8004756:	6062      	str	r2, [r4, #4]
 8004758:	605c      	str	r4, [r3, #4]
 800475a:	e7c9      	b.n	80046f0 <_free_r+0x24>
 800475c:	bd38      	pop	{r3, r4, r5, pc}
 800475e:	bf00      	nop
 8004760:	20000090 	.word	0x20000090

08004764 <_malloc_r>:
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	1ccd      	adds	r5, r1, #3
 8004768:	f025 0503 	bic.w	r5, r5, #3
 800476c:	3508      	adds	r5, #8
 800476e:	2d0c      	cmp	r5, #12
 8004770:	bf38      	it	cc
 8004772:	250c      	movcc	r5, #12
 8004774:	2d00      	cmp	r5, #0
 8004776:	4606      	mov	r6, r0
 8004778:	db01      	blt.n	800477e <_malloc_r+0x1a>
 800477a:	42a9      	cmp	r1, r5
 800477c:	d903      	bls.n	8004786 <_malloc_r+0x22>
 800477e:	230c      	movs	r3, #12
 8004780:	6033      	str	r3, [r6, #0]
 8004782:	2000      	movs	r0, #0
 8004784:	bd70      	pop	{r4, r5, r6, pc}
 8004786:	f000 fbc5 	bl	8004f14 <__malloc_lock>
 800478a:	4a21      	ldr	r2, [pc, #132]	; (8004810 <_malloc_r+0xac>)
 800478c:	6814      	ldr	r4, [r2, #0]
 800478e:	4621      	mov	r1, r4
 8004790:	b991      	cbnz	r1, 80047b8 <_malloc_r+0x54>
 8004792:	4c20      	ldr	r4, [pc, #128]	; (8004814 <_malloc_r+0xb0>)
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	b91b      	cbnz	r3, 80047a0 <_malloc_r+0x3c>
 8004798:	4630      	mov	r0, r6
 800479a:	f000 fb03 	bl	8004da4 <_sbrk_r>
 800479e:	6020      	str	r0, [r4, #0]
 80047a0:	4629      	mov	r1, r5
 80047a2:	4630      	mov	r0, r6
 80047a4:	f000 fafe 	bl	8004da4 <_sbrk_r>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	d124      	bne.n	80047f6 <_malloc_r+0x92>
 80047ac:	230c      	movs	r3, #12
 80047ae:	4630      	mov	r0, r6
 80047b0:	6033      	str	r3, [r6, #0]
 80047b2:	f000 fbb0 	bl	8004f16 <__malloc_unlock>
 80047b6:	e7e4      	b.n	8004782 <_malloc_r+0x1e>
 80047b8:	680b      	ldr	r3, [r1, #0]
 80047ba:	1b5b      	subs	r3, r3, r5
 80047bc:	d418      	bmi.n	80047f0 <_malloc_r+0x8c>
 80047be:	2b0b      	cmp	r3, #11
 80047c0:	d90f      	bls.n	80047e2 <_malloc_r+0x7e>
 80047c2:	600b      	str	r3, [r1, #0]
 80047c4:	18cc      	adds	r4, r1, r3
 80047c6:	50cd      	str	r5, [r1, r3]
 80047c8:	4630      	mov	r0, r6
 80047ca:	f000 fba4 	bl	8004f16 <__malloc_unlock>
 80047ce:	f104 000b 	add.w	r0, r4, #11
 80047d2:	1d23      	adds	r3, r4, #4
 80047d4:	f020 0007 	bic.w	r0, r0, #7
 80047d8:	1ac3      	subs	r3, r0, r3
 80047da:	d0d3      	beq.n	8004784 <_malloc_r+0x20>
 80047dc:	425a      	negs	r2, r3
 80047de:	50e2      	str	r2, [r4, r3]
 80047e0:	e7d0      	b.n	8004784 <_malloc_r+0x20>
 80047e2:	684b      	ldr	r3, [r1, #4]
 80047e4:	428c      	cmp	r4, r1
 80047e6:	bf16      	itet	ne
 80047e8:	6063      	strne	r3, [r4, #4]
 80047ea:	6013      	streq	r3, [r2, #0]
 80047ec:	460c      	movne	r4, r1
 80047ee:	e7eb      	b.n	80047c8 <_malloc_r+0x64>
 80047f0:	460c      	mov	r4, r1
 80047f2:	6849      	ldr	r1, [r1, #4]
 80047f4:	e7cc      	b.n	8004790 <_malloc_r+0x2c>
 80047f6:	1cc4      	adds	r4, r0, #3
 80047f8:	f024 0403 	bic.w	r4, r4, #3
 80047fc:	42a0      	cmp	r0, r4
 80047fe:	d005      	beq.n	800480c <_malloc_r+0xa8>
 8004800:	1a21      	subs	r1, r4, r0
 8004802:	4630      	mov	r0, r6
 8004804:	f000 face 	bl	8004da4 <_sbrk_r>
 8004808:	3001      	adds	r0, #1
 800480a:	d0cf      	beq.n	80047ac <_malloc_r+0x48>
 800480c:	6025      	str	r5, [r4, #0]
 800480e:	e7db      	b.n	80047c8 <_malloc_r+0x64>
 8004810:	20000090 	.word	0x20000090
 8004814:	20000094 	.word	0x20000094

08004818 <__sfputc_r>:
 8004818:	6893      	ldr	r3, [r2, #8]
 800481a:	b410      	push	{r4}
 800481c:	3b01      	subs	r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	6093      	str	r3, [r2, #8]
 8004822:	da07      	bge.n	8004834 <__sfputc_r+0x1c>
 8004824:	6994      	ldr	r4, [r2, #24]
 8004826:	42a3      	cmp	r3, r4
 8004828:	db01      	blt.n	800482e <__sfputc_r+0x16>
 800482a:	290a      	cmp	r1, #10
 800482c:	d102      	bne.n	8004834 <__sfputc_r+0x1c>
 800482e:	bc10      	pop	{r4}
 8004830:	f7ff bcae 	b.w	8004190 <__swbuf_r>
 8004834:	6813      	ldr	r3, [r2, #0]
 8004836:	1c58      	adds	r0, r3, #1
 8004838:	6010      	str	r0, [r2, #0]
 800483a:	7019      	strb	r1, [r3, #0]
 800483c:	4608      	mov	r0, r1
 800483e:	bc10      	pop	{r4}
 8004840:	4770      	bx	lr

08004842 <__sfputs_r>:
 8004842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004844:	4606      	mov	r6, r0
 8004846:	460f      	mov	r7, r1
 8004848:	4614      	mov	r4, r2
 800484a:	18d5      	adds	r5, r2, r3
 800484c:	42ac      	cmp	r4, r5
 800484e:	d101      	bne.n	8004854 <__sfputs_r+0x12>
 8004850:	2000      	movs	r0, #0
 8004852:	e007      	b.n	8004864 <__sfputs_r+0x22>
 8004854:	463a      	mov	r2, r7
 8004856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800485a:	4630      	mov	r0, r6
 800485c:	f7ff ffdc 	bl	8004818 <__sfputc_r>
 8004860:	1c43      	adds	r3, r0, #1
 8004862:	d1f3      	bne.n	800484c <__sfputs_r+0xa>
 8004864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004868 <_vfiprintf_r>:
 8004868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486c:	460c      	mov	r4, r1
 800486e:	b09d      	sub	sp, #116	; 0x74
 8004870:	4617      	mov	r7, r2
 8004872:	461d      	mov	r5, r3
 8004874:	4606      	mov	r6, r0
 8004876:	b118      	cbz	r0, 8004880 <_vfiprintf_r+0x18>
 8004878:	6983      	ldr	r3, [r0, #24]
 800487a:	b90b      	cbnz	r3, 8004880 <_vfiprintf_r+0x18>
 800487c:	f7ff fe38 	bl	80044f0 <__sinit>
 8004880:	4b7c      	ldr	r3, [pc, #496]	; (8004a74 <_vfiprintf_r+0x20c>)
 8004882:	429c      	cmp	r4, r3
 8004884:	d158      	bne.n	8004938 <_vfiprintf_r+0xd0>
 8004886:	6874      	ldr	r4, [r6, #4]
 8004888:	89a3      	ldrh	r3, [r4, #12]
 800488a:	0718      	lsls	r0, r3, #28
 800488c:	d55e      	bpl.n	800494c <_vfiprintf_r+0xe4>
 800488e:	6923      	ldr	r3, [r4, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d05b      	beq.n	800494c <_vfiprintf_r+0xe4>
 8004894:	2300      	movs	r3, #0
 8004896:	9309      	str	r3, [sp, #36]	; 0x24
 8004898:	2320      	movs	r3, #32
 800489a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800489e:	2330      	movs	r3, #48	; 0x30
 80048a0:	f04f 0b01 	mov.w	fp, #1
 80048a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048a8:	9503      	str	r5, [sp, #12]
 80048aa:	46b8      	mov	r8, r7
 80048ac:	4645      	mov	r5, r8
 80048ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80048b2:	b10b      	cbz	r3, 80048b8 <_vfiprintf_r+0x50>
 80048b4:	2b25      	cmp	r3, #37	; 0x25
 80048b6:	d154      	bne.n	8004962 <_vfiprintf_r+0xfa>
 80048b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80048bc:	d00b      	beq.n	80048d6 <_vfiprintf_r+0x6e>
 80048be:	4653      	mov	r3, sl
 80048c0:	463a      	mov	r2, r7
 80048c2:	4621      	mov	r1, r4
 80048c4:	4630      	mov	r0, r6
 80048c6:	f7ff ffbc 	bl	8004842 <__sfputs_r>
 80048ca:	3001      	adds	r0, #1
 80048cc:	f000 80c2 	beq.w	8004a54 <_vfiprintf_r+0x1ec>
 80048d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d2:	4453      	add	r3, sl
 80048d4:	9309      	str	r3, [sp, #36]	; 0x24
 80048d6:	f898 3000 	ldrb.w	r3, [r8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 80ba 	beq.w	8004a54 <_vfiprintf_r+0x1ec>
 80048e0:	2300      	movs	r3, #0
 80048e2:	f04f 32ff 	mov.w	r2, #4294967295
 80048e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048ea:	9304      	str	r3, [sp, #16]
 80048ec:	9307      	str	r3, [sp, #28]
 80048ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048f2:	931a      	str	r3, [sp, #104]	; 0x68
 80048f4:	46a8      	mov	r8, r5
 80048f6:	2205      	movs	r2, #5
 80048f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80048fc:	485e      	ldr	r0, [pc, #376]	; (8004a78 <_vfiprintf_r+0x210>)
 80048fe:	f000 fafb 	bl	8004ef8 <memchr>
 8004902:	9b04      	ldr	r3, [sp, #16]
 8004904:	bb78      	cbnz	r0, 8004966 <_vfiprintf_r+0xfe>
 8004906:	06d9      	lsls	r1, r3, #27
 8004908:	bf44      	itt	mi
 800490a:	2220      	movmi	r2, #32
 800490c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004910:	071a      	lsls	r2, r3, #28
 8004912:	bf44      	itt	mi
 8004914:	222b      	movmi	r2, #43	; 0x2b
 8004916:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800491a:	782a      	ldrb	r2, [r5, #0]
 800491c:	2a2a      	cmp	r2, #42	; 0x2a
 800491e:	d02a      	beq.n	8004976 <_vfiprintf_r+0x10e>
 8004920:	46a8      	mov	r8, r5
 8004922:	2000      	movs	r0, #0
 8004924:	250a      	movs	r5, #10
 8004926:	9a07      	ldr	r2, [sp, #28]
 8004928:	4641      	mov	r1, r8
 800492a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800492e:	3b30      	subs	r3, #48	; 0x30
 8004930:	2b09      	cmp	r3, #9
 8004932:	d969      	bls.n	8004a08 <_vfiprintf_r+0x1a0>
 8004934:	b360      	cbz	r0, 8004990 <_vfiprintf_r+0x128>
 8004936:	e024      	b.n	8004982 <_vfiprintf_r+0x11a>
 8004938:	4b50      	ldr	r3, [pc, #320]	; (8004a7c <_vfiprintf_r+0x214>)
 800493a:	429c      	cmp	r4, r3
 800493c:	d101      	bne.n	8004942 <_vfiprintf_r+0xda>
 800493e:	68b4      	ldr	r4, [r6, #8]
 8004940:	e7a2      	b.n	8004888 <_vfiprintf_r+0x20>
 8004942:	4b4f      	ldr	r3, [pc, #316]	; (8004a80 <_vfiprintf_r+0x218>)
 8004944:	429c      	cmp	r4, r3
 8004946:	bf08      	it	eq
 8004948:	68f4      	ldreq	r4, [r6, #12]
 800494a:	e79d      	b.n	8004888 <_vfiprintf_r+0x20>
 800494c:	4621      	mov	r1, r4
 800494e:	4630      	mov	r0, r6
 8004950:	f7ff fc70 	bl	8004234 <__swsetup_r>
 8004954:	2800      	cmp	r0, #0
 8004956:	d09d      	beq.n	8004894 <_vfiprintf_r+0x2c>
 8004958:	f04f 30ff 	mov.w	r0, #4294967295
 800495c:	b01d      	add	sp, #116	; 0x74
 800495e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004962:	46a8      	mov	r8, r5
 8004964:	e7a2      	b.n	80048ac <_vfiprintf_r+0x44>
 8004966:	4a44      	ldr	r2, [pc, #272]	; (8004a78 <_vfiprintf_r+0x210>)
 8004968:	4645      	mov	r5, r8
 800496a:	1a80      	subs	r0, r0, r2
 800496c:	fa0b f000 	lsl.w	r0, fp, r0
 8004970:	4318      	orrs	r0, r3
 8004972:	9004      	str	r0, [sp, #16]
 8004974:	e7be      	b.n	80048f4 <_vfiprintf_r+0x8c>
 8004976:	9a03      	ldr	r2, [sp, #12]
 8004978:	1d11      	adds	r1, r2, #4
 800497a:	6812      	ldr	r2, [r2, #0]
 800497c:	9103      	str	r1, [sp, #12]
 800497e:	2a00      	cmp	r2, #0
 8004980:	db01      	blt.n	8004986 <_vfiprintf_r+0x11e>
 8004982:	9207      	str	r2, [sp, #28]
 8004984:	e004      	b.n	8004990 <_vfiprintf_r+0x128>
 8004986:	4252      	negs	r2, r2
 8004988:	f043 0302 	orr.w	r3, r3, #2
 800498c:	9207      	str	r2, [sp, #28]
 800498e:	9304      	str	r3, [sp, #16]
 8004990:	f898 3000 	ldrb.w	r3, [r8]
 8004994:	2b2e      	cmp	r3, #46	; 0x2e
 8004996:	d10e      	bne.n	80049b6 <_vfiprintf_r+0x14e>
 8004998:	f898 3001 	ldrb.w	r3, [r8, #1]
 800499c:	2b2a      	cmp	r3, #42	; 0x2a
 800499e:	d138      	bne.n	8004a12 <_vfiprintf_r+0x1aa>
 80049a0:	9b03      	ldr	r3, [sp, #12]
 80049a2:	f108 0802 	add.w	r8, r8, #2
 80049a6:	1d1a      	adds	r2, r3, #4
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	9203      	str	r2, [sp, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bfb8      	it	lt
 80049b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80049b4:	9305      	str	r3, [sp, #20]
 80049b6:	4d33      	ldr	r5, [pc, #204]	; (8004a84 <_vfiprintf_r+0x21c>)
 80049b8:	2203      	movs	r2, #3
 80049ba:	f898 1000 	ldrb.w	r1, [r8]
 80049be:	4628      	mov	r0, r5
 80049c0:	f000 fa9a 	bl	8004ef8 <memchr>
 80049c4:	b140      	cbz	r0, 80049d8 <_vfiprintf_r+0x170>
 80049c6:	2340      	movs	r3, #64	; 0x40
 80049c8:	1b40      	subs	r0, r0, r5
 80049ca:	fa03 f000 	lsl.w	r0, r3, r0
 80049ce:	9b04      	ldr	r3, [sp, #16]
 80049d0:	f108 0801 	add.w	r8, r8, #1
 80049d4:	4303      	orrs	r3, r0
 80049d6:	9304      	str	r3, [sp, #16]
 80049d8:	f898 1000 	ldrb.w	r1, [r8]
 80049dc:	2206      	movs	r2, #6
 80049de:	482a      	ldr	r0, [pc, #168]	; (8004a88 <_vfiprintf_r+0x220>)
 80049e0:	f108 0701 	add.w	r7, r8, #1
 80049e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049e8:	f000 fa86 	bl	8004ef8 <memchr>
 80049ec:	2800      	cmp	r0, #0
 80049ee:	d037      	beq.n	8004a60 <_vfiprintf_r+0x1f8>
 80049f0:	4b26      	ldr	r3, [pc, #152]	; (8004a8c <_vfiprintf_r+0x224>)
 80049f2:	bb1b      	cbnz	r3, 8004a3c <_vfiprintf_r+0x1d4>
 80049f4:	9b03      	ldr	r3, [sp, #12]
 80049f6:	3307      	adds	r3, #7
 80049f8:	f023 0307 	bic.w	r3, r3, #7
 80049fc:	3308      	adds	r3, #8
 80049fe:	9303      	str	r3, [sp, #12]
 8004a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a02:	444b      	add	r3, r9
 8004a04:	9309      	str	r3, [sp, #36]	; 0x24
 8004a06:	e750      	b.n	80048aa <_vfiprintf_r+0x42>
 8004a08:	fb05 3202 	mla	r2, r5, r2, r3
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	4688      	mov	r8, r1
 8004a10:	e78a      	b.n	8004928 <_vfiprintf_r+0xc0>
 8004a12:	2300      	movs	r3, #0
 8004a14:	250a      	movs	r5, #10
 8004a16:	4619      	mov	r1, r3
 8004a18:	f108 0801 	add.w	r8, r8, #1
 8004a1c:	9305      	str	r3, [sp, #20]
 8004a1e:	4640      	mov	r0, r8
 8004a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a24:	3a30      	subs	r2, #48	; 0x30
 8004a26:	2a09      	cmp	r2, #9
 8004a28:	d903      	bls.n	8004a32 <_vfiprintf_r+0x1ca>
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0c3      	beq.n	80049b6 <_vfiprintf_r+0x14e>
 8004a2e:	9105      	str	r1, [sp, #20]
 8004a30:	e7c1      	b.n	80049b6 <_vfiprintf_r+0x14e>
 8004a32:	fb05 2101 	mla	r1, r5, r1, r2
 8004a36:	2301      	movs	r3, #1
 8004a38:	4680      	mov	r8, r0
 8004a3a:	e7f0      	b.n	8004a1e <_vfiprintf_r+0x1b6>
 8004a3c:	ab03      	add	r3, sp, #12
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	4622      	mov	r2, r4
 8004a42:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <_vfiprintf_r+0x228>)
 8004a44:	a904      	add	r1, sp, #16
 8004a46:	4630      	mov	r0, r6
 8004a48:	f3af 8000 	nop.w
 8004a4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004a50:	4681      	mov	r9, r0
 8004a52:	d1d5      	bne.n	8004a00 <_vfiprintf_r+0x198>
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	065b      	lsls	r3, r3, #25
 8004a58:	f53f af7e 	bmi.w	8004958 <_vfiprintf_r+0xf0>
 8004a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a5e:	e77d      	b.n	800495c <_vfiprintf_r+0xf4>
 8004a60:	ab03      	add	r3, sp, #12
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	4622      	mov	r2, r4
 8004a66:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <_vfiprintf_r+0x228>)
 8004a68:	a904      	add	r1, sp, #16
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	f000 f888 	bl	8004b80 <_printf_i>
 8004a70:	e7ec      	b.n	8004a4c <_vfiprintf_r+0x1e4>
 8004a72:	bf00      	nop
 8004a74:	0800505c 	.word	0x0800505c
 8004a78:	0800509c 	.word	0x0800509c
 8004a7c:	0800507c 	.word	0x0800507c
 8004a80:	0800503c 	.word	0x0800503c
 8004a84:	080050a2 	.word	0x080050a2
 8004a88:	080050a6 	.word	0x080050a6
 8004a8c:	00000000 	.word	0x00000000
 8004a90:	08004843 	.word	0x08004843

08004a94 <_printf_common>:
 8004a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a98:	4691      	mov	r9, r2
 8004a9a:	461f      	mov	r7, r3
 8004a9c:	688a      	ldr	r2, [r1, #8]
 8004a9e:	690b      	ldr	r3, [r1, #16]
 8004aa0:	4606      	mov	r6, r0
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	bfb8      	it	lt
 8004aa6:	4613      	movlt	r3, r2
 8004aa8:	f8c9 3000 	str.w	r3, [r9]
 8004aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ab6:	b112      	cbz	r2, 8004abe <_printf_common+0x2a>
 8004ab8:	3301      	adds	r3, #1
 8004aba:	f8c9 3000 	str.w	r3, [r9]
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	0699      	lsls	r1, r3, #26
 8004ac2:	bf42      	ittt	mi
 8004ac4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ac8:	3302      	addmi	r3, #2
 8004aca:	f8c9 3000 	strmi.w	r3, [r9]
 8004ace:	6825      	ldr	r5, [r4, #0]
 8004ad0:	f015 0506 	ands.w	r5, r5, #6
 8004ad4:	d107      	bne.n	8004ae6 <_printf_common+0x52>
 8004ad6:	f104 0a19 	add.w	sl, r4, #25
 8004ada:	68e3      	ldr	r3, [r4, #12]
 8004adc:	f8d9 2000 	ldr.w	r2, [r9]
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	42ab      	cmp	r3, r5
 8004ae4:	dc29      	bgt.n	8004b3a <_printf_common+0xa6>
 8004ae6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	3300      	adds	r3, #0
 8004aee:	bf18      	it	ne
 8004af0:	2301      	movne	r3, #1
 8004af2:	0692      	lsls	r2, r2, #26
 8004af4:	d42e      	bmi.n	8004b54 <_printf_common+0xc0>
 8004af6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004afa:	4639      	mov	r1, r7
 8004afc:	4630      	mov	r0, r6
 8004afe:	47c0      	blx	r8
 8004b00:	3001      	adds	r0, #1
 8004b02:	d021      	beq.n	8004b48 <_printf_common+0xb4>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	68e5      	ldr	r5, [r4, #12]
 8004b08:	f003 0306 	and.w	r3, r3, #6
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	bf18      	it	ne
 8004b10:	2500      	movne	r5, #0
 8004b12:	f8d9 2000 	ldr.w	r2, [r9]
 8004b16:	f04f 0900 	mov.w	r9, #0
 8004b1a:	bf08      	it	eq
 8004b1c:	1aad      	subeq	r5, r5, r2
 8004b1e:	68a3      	ldr	r3, [r4, #8]
 8004b20:	6922      	ldr	r2, [r4, #16]
 8004b22:	bf08      	it	eq
 8004b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	bfc4      	itt	gt
 8004b2c:	1a9b      	subgt	r3, r3, r2
 8004b2e:	18ed      	addgt	r5, r5, r3
 8004b30:	341a      	adds	r4, #26
 8004b32:	454d      	cmp	r5, r9
 8004b34:	d11a      	bne.n	8004b6c <_printf_common+0xd8>
 8004b36:	2000      	movs	r0, #0
 8004b38:	e008      	b.n	8004b4c <_printf_common+0xb8>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	4652      	mov	r2, sl
 8004b3e:	4639      	mov	r1, r7
 8004b40:	4630      	mov	r0, r6
 8004b42:	47c0      	blx	r8
 8004b44:	3001      	adds	r0, #1
 8004b46:	d103      	bne.n	8004b50 <_printf_common+0xbc>
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b50:	3501      	adds	r5, #1
 8004b52:	e7c2      	b.n	8004ada <_printf_common+0x46>
 8004b54:	2030      	movs	r0, #48	; 0x30
 8004b56:	18e1      	adds	r1, r4, r3
 8004b58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b62:	4422      	add	r2, r4
 8004b64:	3302      	adds	r3, #2
 8004b66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b6a:	e7c4      	b.n	8004af6 <_printf_common+0x62>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	4622      	mov	r2, r4
 8004b70:	4639      	mov	r1, r7
 8004b72:	4630      	mov	r0, r6
 8004b74:	47c0      	blx	r8
 8004b76:	3001      	adds	r0, #1
 8004b78:	d0e6      	beq.n	8004b48 <_printf_common+0xb4>
 8004b7a:	f109 0901 	add.w	r9, r9, #1
 8004b7e:	e7d8      	b.n	8004b32 <_printf_common+0x9e>

08004b80 <_printf_i>:
 8004b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b84:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004b88:	460c      	mov	r4, r1
 8004b8a:	7e09      	ldrb	r1, [r1, #24]
 8004b8c:	b085      	sub	sp, #20
 8004b8e:	296e      	cmp	r1, #110	; 0x6e
 8004b90:	4617      	mov	r7, r2
 8004b92:	4606      	mov	r6, r0
 8004b94:	4698      	mov	r8, r3
 8004b96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b98:	f000 80b3 	beq.w	8004d02 <_printf_i+0x182>
 8004b9c:	d822      	bhi.n	8004be4 <_printf_i+0x64>
 8004b9e:	2963      	cmp	r1, #99	; 0x63
 8004ba0:	d036      	beq.n	8004c10 <_printf_i+0x90>
 8004ba2:	d80a      	bhi.n	8004bba <_printf_i+0x3a>
 8004ba4:	2900      	cmp	r1, #0
 8004ba6:	f000 80b9 	beq.w	8004d1c <_printf_i+0x19c>
 8004baa:	2958      	cmp	r1, #88	; 0x58
 8004bac:	f000 8083 	beq.w	8004cb6 <_printf_i+0x136>
 8004bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bb4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004bb8:	e032      	b.n	8004c20 <_printf_i+0xa0>
 8004bba:	2964      	cmp	r1, #100	; 0x64
 8004bbc:	d001      	beq.n	8004bc2 <_printf_i+0x42>
 8004bbe:	2969      	cmp	r1, #105	; 0x69
 8004bc0:	d1f6      	bne.n	8004bb0 <_printf_i+0x30>
 8004bc2:	6820      	ldr	r0, [r4, #0]
 8004bc4:	6813      	ldr	r3, [r2, #0]
 8004bc6:	0605      	lsls	r5, r0, #24
 8004bc8:	f103 0104 	add.w	r1, r3, #4
 8004bcc:	d52a      	bpl.n	8004c24 <_printf_i+0xa4>
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6011      	str	r1, [r2, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	da03      	bge.n	8004bde <_printf_i+0x5e>
 8004bd6:	222d      	movs	r2, #45	; 0x2d
 8004bd8:	425b      	negs	r3, r3
 8004bda:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004bde:	486f      	ldr	r0, [pc, #444]	; (8004d9c <_printf_i+0x21c>)
 8004be0:	220a      	movs	r2, #10
 8004be2:	e039      	b.n	8004c58 <_printf_i+0xd8>
 8004be4:	2973      	cmp	r1, #115	; 0x73
 8004be6:	f000 809d 	beq.w	8004d24 <_printf_i+0x1a4>
 8004bea:	d808      	bhi.n	8004bfe <_printf_i+0x7e>
 8004bec:	296f      	cmp	r1, #111	; 0x6f
 8004bee:	d020      	beq.n	8004c32 <_printf_i+0xb2>
 8004bf0:	2970      	cmp	r1, #112	; 0x70
 8004bf2:	d1dd      	bne.n	8004bb0 <_printf_i+0x30>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	f043 0320 	orr.w	r3, r3, #32
 8004bfa:	6023      	str	r3, [r4, #0]
 8004bfc:	e003      	b.n	8004c06 <_printf_i+0x86>
 8004bfe:	2975      	cmp	r1, #117	; 0x75
 8004c00:	d017      	beq.n	8004c32 <_printf_i+0xb2>
 8004c02:	2978      	cmp	r1, #120	; 0x78
 8004c04:	d1d4      	bne.n	8004bb0 <_printf_i+0x30>
 8004c06:	2378      	movs	r3, #120	; 0x78
 8004c08:	4865      	ldr	r0, [pc, #404]	; (8004da0 <_printf_i+0x220>)
 8004c0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c0e:	e055      	b.n	8004cbc <_printf_i+0x13c>
 8004c10:	6813      	ldr	r3, [r2, #0]
 8004c12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c16:	1d19      	adds	r1, r3, #4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6011      	str	r1, [r2, #0]
 8004c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c20:	2301      	movs	r3, #1
 8004c22:	e08c      	b.n	8004d3e <_printf_i+0x1be>
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c2a:	6011      	str	r1, [r2, #0]
 8004c2c:	bf18      	it	ne
 8004c2e:	b21b      	sxthne	r3, r3
 8004c30:	e7cf      	b.n	8004bd2 <_printf_i+0x52>
 8004c32:	6813      	ldr	r3, [r2, #0]
 8004c34:	6825      	ldr	r5, [r4, #0]
 8004c36:	1d18      	adds	r0, r3, #4
 8004c38:	6010      	str	r0, [r2, #0]
 8004c3a:	0628      	lsls	r0, r5, #24
 8004c3c:	d501      	bpl.n	8004c42 <_printf_i+0xc2>
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	e002      	b.n	8004c48 <_printf_i+0xc8>
 8004c42:	0668      	lsls	r0, r5, #25
 8004c44:	d5fb      	bpl.n	8004c3e <_printf_i+0xbe>
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	296f      	cmp	r1, #111	; 0x6f
 8004c4a:	bf14      	ite	ne
 8004c4c:	220a      	movne	r2, #10
 8004c4e:	2208      	moveq	r2, #8
 8004c50:	4852      	ldr	r0, [pc, #328]	; (8004d9c <_printf_i+0x21c>)
 8004c52:	2100      	movs	r1, #0
 8004c54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c58:	6865      	ldr	r5, [r4, #4]
 8004c5a:	2d00      	cmp	r5, #0
 8004c5c:	60a5      	str	r5, [r4, #8]
 8004c5e:	f2c0 8095 	blt.w	8004d8c <_printf_i+0x20c>
 8004c62:	6821      	ldr	r1, [r4, #0]
 8004c64:	f021 0104 	bic.w	r1, r1, #4
 8004c68:	6021      	str	r1, [r4, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d13d      	bne.n	8004cea <_printf_i+0x16a>
 8004c6e:	2d00      	cmp	r5, #0
 8004c70:	f040 808e 	bne.w	8004d90 <_printf_i+0x210>
 8004c74:	4665      	mov	r5, ip
 8004c76:	2a08      	cmp	r2, #8
 8004c78:	d10b      	bne.n	8004c92 <_printf_i+0x112>
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	07db      	lsls	r3, r3, #31
 8004c7e:	d508      	bpl.n	8004c92 <_printf_i+0x112>
 8004c80:	6923      	ldr	r3, [r4, #16]
 8004c82:	6862      	ldr	r2, [r4, #4]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	bfde      	ittt	le
 8004c88:	2330      	movle	r3, #48	; 0x30
 8004c8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c92:	ebac 0305 	sub.w	r3, ip, r5
 8004c96:	6123      	str	r3, [r4, #16]
 8004c98:	f8cd 8000 	str.w	r8, [sp]
 8004c9c:	463b      	mov	r3, r7
 8004c9e:	aa03      	add	r2, sp, #12
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	f7ff fef6 	bl	8004a94 <_printf_common>
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d14d      	bne.n	8004d48 <_printf_i+0x1c8>
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb0:	b005      	add	sp, #20
 8004cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cb6:	4839      	ldr	r0, [pc, #228]	; (8004d9c <_printf_i+0x21c>)
 8004cb8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004cbc:	6813      	ldr	r3, [r2, #0]
 8004cbe:	6821      	ldr	r1, [r4, #0]
 8004cc0:	1d1d      	adds	r5, r3, #4
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6015      	str	r5, [r2, #0]
 8004cc6:	060a      	lsls	r2, r1, #24
 8004cc8:	d50b      	bpl.n	8004ce2 <_printf_i+0x162>
 8004cca:	07ca      	lsls	r2, r1, #31
 8004ccc:	bf44      	itt	mi
 8004cce:	f041 0120 	orrmi.w	r1, r1, #32
 8004cd2:	6021      	strmi	r1, [r4, #0]
 8004cd4:	b91b      	cbnz	r3, 8004cde <_printf_i+0x15e>
 8004cd6:	6822      	ldr	r2, [r4, #0]
 8004cd8:	f022 0220 	bic.w	r2, r2, #32
 8004cdc:	6022      	str	r2, [r4, #0]
 8004cde:	2210      	movs	r2, #16
 8004ce0:	e7b7      	b.n	8004c52 <_printf_i+0xd2>
 8004ce2:	064d      	lsls	r5, r1, #25
 8004ce4:	bf48      	it	mi
 8004ce6:	b29b      	uxthmi	r3, r3
 8004ce8:	e7ef      	b.n	8004cca <_printf_i+0x14a>
 8004cea:	4665      	mov	r5, ip
 8004cec:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cf0:	fb02 3311 	mls	r3, r2, r1, r3
 8004cf4:	5cc3      	ldrb	r3, [r0, r3]
 8004cf6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	2900      	cmp	r1, #0
 8004cfe:	d1f5      	bne.n	8004cec <_printf_i+0x16c>
 8004d00:	e7b9      	b.n	8004c76 <_printf_i+0xf6>
 8004d02:	6813      	ldr	r3, [r2, #0]
 8004d04:	6825      	ldr	r5, [r4, #0]
 8004d06:	1d18      	adds	r0, r3, #4
 8004d08:	6961      	ldr	r1, [r4, #20]
 8004d0a:	6010      	str	r0, [r2, #0]
 8004d0c:	0628      	lsls	r0, r5, #24
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	d501      	bpl.n	8004d16 <_printf_i+0x196>
 8004d12:	6019      	str	r1, [r3, #0]
 8004d14:	e002      	b.n	8004d1c <_printf_i+0x19c>
 8004d16:	066a      	lsls	r2, r5, #25
 8004d18:	d5fb      	bpl.n	8004d12 <_printf_i+0x192>
 8004d1a:	8019      	strh	r1, [r3, #0]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	4665      	mov	r5, ip
 8004d20:	6123      	str	r3, [r4, #16]
 8004d22:	e7b9      	b.n	8004c98 <_printf_i+0x118>
 8004d24:	6813      	ldr	r3, [r2, #0]
 8004d26:	1d19      	adds	r1, r3, #4
 8004d28:	6011      	str	r1, [r2, #0]
 8004d2a:	681d      	ldr	r5, [r3, #0]
 8004d2c:	6862      	ldr	r2, [r4, #4]
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4628      	mov	r0, r5
 8004d32:	f000 f8e1 	bl	8004ef8 <memchr>
 8004d36:	b108      	cbz	r0, 8004d3c <_printf_i+0x1bc>
 8004d38:	1b40      	subs	r0, r0, r5
 8004d3a:	6060      	str	r0, [r4, #4]
 8004d3c:	6863      	ldr	r3, [r4, #4]
 8004d3e:	6123      	str	r3, [r4, #16]
 8004d40:	2300      	movs	r3, #0
 8004d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d46:	e7a7      	b.n	8004c98 <_printf_i+0x118>
 8004d48:	6923      	ldr	r3, [r4, #16]
 8004d4a:	462a      	mov	r2, r5
 8004d4c:	4639      	mov	r1, r7
 8004d4e:	4630      	mov	r0, r6
 8004d50:	47c0      	blx	r8
 8004d52:	3001      	adds	r0, #1
 8004d54:	d0aa      	beq.n	8004cac <_printf_i+0x12c>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	079b      	lsls	r3, r3, #30
 8004d5a:	d413      	bmi.n	8004d84 <_printf_i+0x204>
 8004d5c:	68e0      	ldr	r0, [r4, #12]
 8004d5e:	9b03      	ldr	r3, [sp, #12]
 8004d60:	4298      	cmp	r0, r3
 8004d62:	bfb8      	it	lt
 8004d64:	4618      	movlt	r0, r3
 8004d66:	e7a3      	b.n	8004cb0 <_printf_i+0x130>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	464a      	mov	r2, r9
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	4630      	mov	r0, r6
 8004d70:	47c0      	blx	r8
 8004d72:	3001      	adds	r0, #1
 8004d74:	d09a      	beq.n	8004cac <_printf_i+0x12c>
 8004d76:	3501      	adds	r5, #1
 8004d78:	68e3      	ldr	r3, [r4, #12]
 8004d7a:	9a03      	ldr	r2, [sp, #12]
 8004d7c:	1a9b      	subs	r3, r3, r2
 8004d7e:	42ab      	cmp	r3, r5
 8004d80:	dcf2      	bgt.n	8004d68 <_printf_i+0x1e8>
 8004d82:	e7eb      	b.n	8004d5c <_printf_i+0x1dc>
 8004d84:	2500      	movs	r5, #0
 8004d86:	f104 0919 	add.w	r9, r4, #25
 8004d8a:	e7f5      	b.n	8004d78 <_printf_i+0x1f8>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1ac      	bne.n	8004cea <_printf_i+0x16a>
 8004d90:	7803      	ldrb	r3, [r0, #0]
 8004d92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d9a:	e76c      	b.n	8004c76 <_printf_i+0xf6>
 8004d9c:	080050ad 	.word	0x080050ad
 8004da0:	080050be 	.word	0x080050be

08004da4 <_sbrk_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	2300      	movs	r3, #0
 8004da8:	4c05      	ldr	r4, [pc, #20]	; (8004dc0 <_sbrk_r+0x1c>)
 8004daa:	4605      	mov	r5, r0
 8004dac:	4608      	mov	r0, r1
 8004dae:	6023      	str	r3, [r4, #0]
 8004db0:	f7fc febe 	bl	8001b30 <_sbrk>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d102      	bne.n	8004dbe <_sbrk_r+0x1a>
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	b103      	cbz	r3, 8004dbe <_sbrk_r+0x1a>
 8004dbc:	602b      	str	r3, [r5, #0]
 8004dbe:	bd38      	pop	{r3, r4, r5, pc}
 8004dc0:	20000244 	.word	0x20000244

08004dc4 <__sread>:
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dcc:	f000 f8a4 	bl	8004f18 <_read_r>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	bfab      	itete	ge
 8004dd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dd6:	89a3      	ldrhlt	r3, [r4, #12]
 8004dd8:	181b      	addge	r3, r3, r0
 8004dda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dde:	bfac      	ite	ge
 8004de0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004de2:	81a3      	strhlt	r3, [r4, #12]
 8004de4:	bd10      	pop	{r4, pc}

08004de6 <__swrite>:
 8004de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dea:	461f      	mov	r7, r3
 8004dec:	898b      	ldrh	r3, [r1, #12]
 8004dee:	4605      	mov	r5, r0
 8004df0:	05db      	lsls	r3, r3, #23
 8004df2:	460c      	mov	r4, r1
 8004df4:	4616      	mov	r6, r2
 8004df6:	d505      	bpl.n	8004e04 <__swrite+0x1e>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e00:	f000 f868 	bl	8004ed4 <_lseek_r>
 8004e04:	89a3      	ldrh	r3, [r4, #12]
 8004e06:	4632      	mov	r2, r6
 8004e08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e0c:	81a3      	strh	r3, [r4, #12]
 8004e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e12:	463b      	mov	r3, r7
 8004e14:	4628      	mov	r0, r5
 8004e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e1a:	f000 b817 	b.w	8004e4c <_write_r>

08004e1e <__sseek>:
 8004e1e:	b510      	push	{r4, lr}
 8004e20:	460c      	mov	r4, r1
 8004e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e26:	f000 f855 	bl	8004ed4 <_lseek_r>
 8004e2a:	1c43      	adds	r3, r0, #1
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	bf15      	itete	ne
 8004e30:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e3a:	81a3      	strheq	r3, [r4, #12]
 8004e3c:	bf18      	it	ne
 8004e3e:	81a3      	strhne	r3, [r4, #12]
 8004e40:	bd10      	pop	{r4, pc}

08004e42 <__sclose>:
 8004e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e46:	f000 b813 	b.w	8004e70 <_close_r>
	...

08004e4c <_write_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	4605      	mov	r5, r0
 8004e50:	4608      	mov	r0, r1
 8004e52:	4611      	mov	r1, r2
 8004e54:	2200      	movs	r2, #0
 8004e56:	4c05      	ldr	r4, [pc, #20]	; (8004e6c <_write_r+0x20>)
 8004e58:	6022      	str	r2, [r4, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f7fb f99c 	bl	8000198 <_write>
 8004e60:	1c43      	adds	r3, r0, #1
 8004e62:	d102      	bne.n	8004e6a <_write_r+0x1e>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	b103      	cbz	r3, 8004e6a <_write_r+0x1e>
 8004e68:	602b      	str	r3, [r5, #0]
 8004e6a:	bd38      	pop	{r3, r4, r5, pc}
 8004e6c:	20000244 	.word	0x20000244

08004e70 <_close_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	2300      	movs	r3, #0
 8004e74:	4c05      	ldr	r4, [pc, #20]	; (8004e8c <_close_r+0x1c>)
 8004e76:	4605      	mov	r5, r0
 8004e78:	4608      	mov	r0, r1
 8004e7a:	6023      	str	r3, [r4, #0]
 8004e7c:	f7fc fe27 	bl	8001ace <_close>
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d102      	bne.n	8004e8a <_close_r+0x1a>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	b103      	cbz	r3, 8004e8a <_close_r+0x1a>
 8004e88:	602b      	str	r3, [r5, #0]
 8004e8a:	bd38      	pop	{r3, r4, r5, pc}
 8004e8c:	20000244 	.word	0x20000244

08004e90 <_fstat_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	2300      	movs	r3, #0
 8004e94:	4c06      	ldr	r4, [pc, #24]	; (8004eb0 <_fstat_r+0x20>)
 8004e96:	4605      	mov	r5, r0
 8004e98:	4608      	mov	r0, r1
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	f7fc fe21 	bl	8001ae4 <_fstat>
 8004ea2:	1c43      	adds	r3, r0, #1
 8004ea4:	d102      	bne.n	8004eac <_fstat_r+0x1c>
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	b103      	cbz	r3, 8004eac <_fstat_r+0x1c>
 8004eaa:	602b      	str	r3, [r5, #0]
 8004eac:	bd38      	pop	{r3, r4, r5, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000244 	.word	0x20000244

08004eb4 <_isatty_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	4c05      	ldr	r4, [pc, #20]	; (8004ed0 <_isatty_r+0x1c>)
 8004eba:	4605      	mov	r5, r0
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	6023      	str	r3, [r4, #0]
 8004ec0:	f7fc fe1f 	bl	8001b02 <_isatty>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d102      	bne.n	8004ece <_isatty_r+0x1a>
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	b103      	cbz	r3, 8004ece <_isatty_r+0x1a>
 8004ecc:	602b      	str	r3, [r5, #0]
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
 8004ed0:	20000244 	.word	0x20000244

08004ed4 <_lseek_r>:
 8004ed4:	b538      	push	{r3, r4, r5, lr}
 8004ed6:	4605      	mov	r5, r0
 8004ed8:	4608      	mov	r0, r1
 8004eda:	4611      	mov	r1, r2
 8004edc:	2200      	movs	r2, #0
 8004ede:	4c05      	ldr	r4, [pc, #20]	; (8004ef4 <_lseek_r+0x20>)
 8004ee0:	6022      	str	r2, [r4, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f7fc fe17 	bl	8001b16 <_lseek>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_lseek_r+0x1e>
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_lseek_r+0x1e>
 8004ef0:	602b      	str	r3, [r5, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	20000244 	.word	0x20000244

08004ef8 <memchr>:
 8004ef8:	b510      	push	{r4, lr}
 8004efa:	b2c9      	uxtb	r1, r1
 8004efc:	4402      	add	r2, r0
 8004efe:	4290      	cmp	r0, r2
 8004f00:	4603      	mov	r3, r0
 8004f02:	d101      	bne.n	8004f08 <memchr+0x10>
 8004f04:	2300      	movs	r3, #0
 8004f06:	e003      	b.n	8004f10 <memchr+0x18>
 8004f08:	781c      	ldrb	r4, [r3, #0]
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	428c      	cmp	r4, r1
 8004f0e:	d1f6      	bne.n	8004efe <memchr+0x6>
 8004f10:	4618      	mov	r0, r3
 8004f12:	bd10      	pop	{r4, pc}

08004f14 <__malloc_lock>:
 8004f14:	4770      	bx	lr

08004f16 <__malloc_unlock>:
 8004f16:	4770      	bx	lr

08004f18 <_read_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	4611      	mov	r1, r2
 8004f20:	2200      	movs	r2, #0
 8004f22:	4c05      	ldr	r4, [pc, #20]	; (8004f38 <_read_r+0x20>)
 8004f24:	6022      	str	r2, [r4, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	f7fc fdb4 	bl	8001a94 <_read>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d102      	bne.n	8004f36 <_read_r+0x1e>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	b103      	cbz	r3, 8004f36 <_read_r+0x1e>
 8004f34:	602b      	str	r3, [r5, #0]
 8004f36:	bd38      	pop	{r3, r4, r5, pc}
 8004f38:	20000244 	.word	0x20000244

08004f3c <_init>:
 8004f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3e:	bf00      	nop
 8004f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f42:	bc08      	pop	{r3}
 8004f44:	469e      	mov	lr, r3
 8004f46:	4770      	bx	lr

08004f48 <_fini>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	bf00      	nop
 8004f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4e:	bc08      	pop	{r3}
 8004f50:	469e      	mov	lr, r3
 8004f52:	4770      	bx	lr
